(function() {
  var DOMListener, Disposable, SelectorBasedListener, SpecificityCache, search, specificity,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Disposable = require('event-kit').Disposable;

  specificity = require('clear-cut').specificity;

  search = require('binary-search');

  SpecificityCache = {};

  module.exports = DOMListener = (function() {
    function DOMListener(element) {
      this.element = element;
      this.dispatchEvent = __bind(this.dispatchEvent, this);
      this.selectorBasedListenersByEventName = {};
      this.inlineListenersByEventName = {};
      this.nativeEventListeners = {};
    }

    DOMListener.prototype.add = function(target, eventName, handler) {
      if (!this.nativeEventListeners[eventName]) {
        this.element.addEventListener(eventName, this.dispatchEvent);
        this.nativeEventListeners[eventName] = true;
      }
      if (typeof target === 'string') {
        return this.addSelectorBasedListener(target, eventName, handler);
      } else {
        return this.addInlineListener(target, eventName, handler);
      }
    };

    DOMListener.prototype.destroy = function() {
      var eventName;
      for (eventName in this.nativeEventListeners) {
        this.element.removeEventListener(eventName, this.dispatchEvent);
      }
      this.selectorBasedListenersByEventName = {};
      this.inlineListenersByEventName = {};
      return this.nativeEventListeners = {};
    };

    DOMListener.prototype.addSelectorBasedListener = function(selector, eventName, handler) {
      var index, listeners, newListener, _base;
      newListener = new SelectorBasedListener(selector, handler);
      listeners = ((_base = this.selectorBasedListenersByEventName)[eventName] != null ? _base[eventName] : _base[eventName] = []);
      index = search(listeners, newListener, function(a, b) {
        return b.specificity - a.specificity;
      });
      if (index < 0) {
        index = -index - 1;
      }
      listeners.splice(index, 0, newListener);
      return new Disposable(function() {
        index = listeners.indexOf(newListener);
        return listeners.splice(index, 1);
      });
    };

    DOMListener.prototype.addInlineListener = function(node, eventName, handler) {
      var listeners, listenersByNode, _base;
      listenersByNode = ((_base = this.inlineListenersByEventName)[eventName] != null ? _base[eventName] : _base[eventName] = new WeakMap);
      if (!(listeners = listenersByNode.get(node))) {
        listeners = [];
        listenersByNode.set(node, listeners);
      }
      listeners.push(handler);
      return new Disposable(function() {
        var index;
        index = listeners.indexOf(handler);
        return listeners.splice(index, 1);
      });
    };

    DOMListener.prototype.dispatchEvent = function(event) {
      var currentTarget, defaultPrevented, descriptor, handler, immediatePropagationStopped, inlineListeners, key, listener, propagationStopped, selectorBasedListeners, syntheticEvent, value, _i, _j, _len, _len1, _ref, _results;
      currentTarget = event.target;
      propagationStopped = false;
      immediatePropagationStopped = false;
      defaultPrevented = false;
      descriptor = {
        type: {
          value: event.type
        },
        detail: {
          value: event.detail
        },
        eventPhase: {
          value: Event.BUBBLING_PHASE
        },
        target: {
          value: currentTarget
        },
        currentTarget: {
          get: function() {
            return currentTarget;
          }
        },
        stopPropagation: {
          value: function() {
            propagationStopped = true;
            return event.stopPropagation();
          }
        },
        stopImmediatePropagation: {
          value: function() {
            propagationStopped = true;
            immediatePropagationStopped = true;
            return event.stopImmediatePropagation();
          }
        },
        preventDefault: {
          value: function() {
            defaultPrevented = true;
            return event.preventDefault();
          }
        },
        defaultPrevented: {
          get: function() {
            return defaultPrevented;
          }
        }
      };
      for (key in event) {
        value = event[key];
        if (descriptor[key] == null) {
          descriptor[key] = {
            value: value
          };
        }
      }
      syntheticEvent = Object.create(event.constructor.prototype, descriptor);
      _results = [];
      while (true) {
        inlineListeners = (_ref = this.inlineListenersByEventName[event.type]) != null ? _ref.get(currentTarget) : void 0;
        if (inlineListeners != null) {
          for (_i = 0, _len = inlineListeners.length; _i < _len; _i++) {
            handler = inlineListeners[_i];
            handler.call(currentTarget, syntheticEvent);
            if (immediatePropagationStopped) {
              break;
            }
          }
        }
        if (immediatePropagationStopped) {
          break;
        }
        selectorBasedListeners = this.selectorBasedListenersByEventName[event.type];
        if ((selectorBasedListeners != null) && typeof currentTarget.matches === 'function') {
          for (_j = 0, _len1 = selectorBasedListeners.length; _j < _len1; _j++) {
            listener = selectorBasedListeners[_j];
            if (!(currentTarget.matches(listener.selector))) {
              continue;
            }
            listener.handler.call(currentTarget, syntheticEvent);
            if (immediatePropagationStopped) {
              break;
            }
          }
        }
        if (propagationStopped) {
          break;
        }
        if (currentTarget === this.element) {
          break;
        }
        _results.push(currentTarget = currentTarget.parentNode);
      }
      return _results;
    };

    return DOMListener;

  })();

  SelectorBasedListener = (function() {
    function SelectorBasedListener(selector, handler) {
      var _name;
      this.selector = selector;
      this.handler = handler;
      this.specificity = (SpecificityCache[_name = this.selector] != null ? SpecificityCache[_name] : SpecificityCache[_name] = specificity(this.selector));
    }

    return SelectorBasedListener;

  })();

}).call(this);
