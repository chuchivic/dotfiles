// Generated by CoffeeScript 1.12.3
(function() {
  var _, compareVersions, escapeChar, escapeString, escapeStringNbsp, highlightSync, popScope, pushScope, updateScopeStack;

  _ = require('underscore-plus');

  compareVersions = require('compare-versions');

  escapeChar = function(match) {
    switch (match) {
      case '&':
        return '&amp;';
      case '"':
        return '&quot;';
      case "'":
        return '&#39;';
      case '<':
        return '&lt;';
      case '>':
        return '&gt;';
      case ' ':
        return '&nbsp;';
      default:
        return match;
    }
  };

  escapeString = function(string) {
    return string.replace(/[&"'<>]/g, escapeChar);
  };

  escapeStringNbsp = function(string) {
    return string.replace(/[&"'<> ]/g, escapeChar);
  };

  pushScope = function(scopeStack, scope, html) {
    scopeStack.push(scope);
    return html += "<span class=\"" + (scope.replace(/\.+/g, ' ')) + "\">";
  };

  popScope = function(scopeStack, html) {
    scopeStack.pop();
    return html += '</span>';
  };

  updateScopeStack = function(scopeStack, desiredScopes, html) {
    var excessScopes, i, j, k, l, ref, ref1, ref2;
    excessScopes = scopeStack.length - desiredScopes.length;
    if (excessScopes > 0) {
      while (excessScopes--) {
        html = popScope(scopeStack, html);
      }
    }
    for (i = k = ref = scopeStack.length; ref <= 0 ? k <= 0 : k >= 0; i = ref <= 0 ? ++k : --k) {
      if (_.isEqual(scopeStack.slice(0, i), desiredScopes.slice(0, i))) {
        break;
      }
      html = popScope(scopeStack, html);
    }
    for (j = l = ref1 = i, ref2 = desiredScopes.length; ref1 <= ref2 ? l < ref2 : l > ref2; j = ref1 <= ref2 ? ++l : --l) {
      html = pushScope(scopeStack, desiredScopes[j], html);
    }
    return html;
  };

  module.exports = highlightSync = function(options) {
    var editorDiv, editorDivClass, editorDivTag, escape, fileContents, grammar, html, k, l, lastLineTokens, len, len1, lineDivs, lineTokens, nbsp, nullScope, ref, ref1, registry, scopeName, scopeStack, scopes, tokens, value, wrapCode;
    if (options == null) {
      options = {};
    }
    registry = atom.grammars;
    fileContents = options.fileContents, scopeName = options.scopeName, nbsp = options.nbsp, lineDivs = options.lineDivs, editorDiv = options.editorDiv, wrapCode = options.wrapCode, editorDivTag = options.editorDivTag, editorDivClass = options.editorDivClass, nullScope = options.nullScope;
    if (nbsp == null) {
      nbsp = true;
    }
    if (lineDivs == null) {
      lineDivs = false;
    }
    if (editorDiv == null) {
      editorDiv = false;
    }
    if (wrapCode == null) {
      wrapCode = false;
    }
    if (editorDivTag == null) {
      editorDivTag = 'div';
    }
    if (editorDivClass == null) {
      editorDivClass = 'editor editor-colors';
    }
    if (nullScope == null) {
      nullScope = 'text.plain.null-grammar';
    }
    grammar = (ref = registry.grammarForScopeName(scopeName)) != null ? ref : (nullScope ? registry.grammarForScopeName(nullScope) : void 0);
    if (grammar == null) {
      throw new Error("Grammar " + scopeName + " not found, and no " + nullScope + " grammar");
    }
    lineTokens = grammar.tokenizeLines(fileContents);
    if (lineTokens.length > 0) {
      lastLineTokens = lineTokens[lineTokens.length - 1];
      if (lastLineTokens.length === 1 && lastLineTokens[0].value === '') {
        lineTokens.pop();
      }
    }
    escape = nbsp ? escapeStringNbsp : escapeString;
    html = '';
    if (editorDiv) {
      html = "<" + editorDivTag + " class=\"" + editorDivClass + "\">";
    }
    if (wrapCode) {
      html += "<code>";
    }
    for (k = 0, len = lineTokens.length; k < len; k++) {
      tokens = lineTokens[k];
      scopeStack = [];
      if (lineDivs) {
        html += '<div class="line">';
      }
      for (l = 0, len1 = tokens.length; l < len1; l++) {
        ref1 = tokens[l], value = ref1.value, scopes = ref1.scopes;
        if (!value) {
          value = ' ';
        }
        if (compareVersions(atom.getVersion(), '1.13.0') >= 0) {
          scopes = scopes.map(function(s) {
            return "syntax--" + (s.replace(/\./g, '.syntax--'));
          });
        }
        html = updateScopeStack(scopeStack, scopes, html);
        html += "<span>" + (escape(value)) + "</span>";
      }
      while (scopeStack.length > 0) {
        html = popScope(scopeStack, html);
      }
      html += '\n';
      if (lineDivs) {
        html += '</div>';
      }
    }
    if (wrapCode) {
      html += "</code>";
    }
    if (editorDiv) {
      html += "</" + editorDivTag + ">";
    }
    return html;
  };

}).call(this);
