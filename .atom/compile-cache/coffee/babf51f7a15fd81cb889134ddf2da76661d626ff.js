(function() {
  var StyleLine;

  StyleLine = require("../../lib/commands/style-line");

  describe("StyleLine", function() {
    describe(".isStyleOn", function() {
      it("check heading 1 exists", function() {
        var cmd, fixture;
        cmd = new StyleLine("h1");
        fixture = "# heading 1";
        return expect(cmd.isStyleOn(fixture)).toBe(true);
      });
      it("check heading 1 not exists", function() {
        var cmd, fixture;
        cmd = new StyleLine("h1");
        fixture = "## heading 1";
        return expect(cmd.isStyleOn(fixture)).toBe(false);
      });
      it("check ul exists", function() {
        var cmd, fixture;
        cmd = new StyleLine("ul");
        fixture = "* unordered list";
        expect(cmd.isStyleOn(fixture)).toBe(true);
        fixture = "- unordered list";
        return expect(cmd.isStyleOn(fixture)).toBe(true);
      });
      return it("check ul not exists", function() {
        var cmd, fixture;
        cmd = new StyleLine("ul");
        fixture = "a normal list";
        expect(cmd.isStyleOn(fixture)).toBe(false);
        fixture = "0. ordered list";
        return expect(cmd.isStyleOn(fixture)).toBe(false);
      });
    });
    describe(".addStyle", function() {
      it("applies heading 1 styles", function() {
        var cmd, fixture;
        atom.config.set("markdown-writer.lineStyles.h1", {
          before: "# ",
          after: " #"
        });
        cmd = new StyleLine("h1");
        fixture = "## heading 1 ##";
        return expect(cmd.addStyle(fixture)).toBe("# heading 1 #");
      });
      it("applies heading 2 styles", function() {
        var cmd, fixture;
        cmd = new StyleLine("h2");
        fixture = "# heading 2";
        return expect(cmd.addStyle(fixture)).toBe("## heading 2");
      });
      it("applies blockquote styles", function() {
        var cmd, fixture;
        cmd = new StyleLine("blockquote");
        fixture = "blockquote";
        return expect(cmd.addStyle(fixture)).toBe("> blockquote");
      });
      it("applies unordered list template styles", function() {
        var cmd, fixture;
        cmd = new StyleLine("ul");
        fixture = "  unordered line";
        return expect(cmd.addStyle(fixture, {
          ul: "*"
        })).toBe("  * unordered line");
      });
      return it("applies ordered list template styles", function() {
        var cmd, fixture;
        cmd = new StyleLine("ol");
        fixture = "ordered line";
        return expect(cmd.addStyle(fixture, {
          i: 3
        })).toBe("3. ordered line");
      });
    });
    describe(".removeStyle", function() {
      it("applies heading 1 styles", function() {
        var cmd, fixture;
        atom.config.set("markdown-writer.lineStyles.h1", {
          before: "# ",
          after: " #"
        });
        cmd = new StyleLine("h1");
        fixture = "# heading 1 #";
        return expect(cmd.removeStyle(fixture)).toBe("heading 1");
      });
      it("remove heading 3 styles", function() {
        var cmd, fixture;
        cmd = new StyleLine("h3");
        fixture = "### heading 3";
        return expect(cmd.removeStyle(fixture)).toBe("heading 3");
      });
      return it("remove ol styles", function() {
        var cmd, fixture;
        cmd = new StyleLine("ol");
        fixture = "123. ordered list";
        return expect(cmd.removeStyle(fixture)).toBe("ordered list");
      });
    });
    return describe(".trigger", function() {
      var editor;
      editor = null;
      beforeEach(function() {
        waitsForPromise(function() {
          return atom.workspace.open("empty.markdown");
        });
        return runs(function() {
          return editor = atom.workspace.getActiveTextEditor();
        });
      });
      it("insert empty blockquote style", function() {
        new StyleLine("blockquote").trigger();
        expect(editor.getText()).toBe("> ");
        return expect(editor.getCursorBufferPosition().column).toBe(2);
      });
      it("apply heading 2", function() {
        editor.setText("# heading");
        new StyleLine("h2").trigger();
        expect(editor.getText()).toBe("## heading");
        return expect(editor.getCursorBufferPosition().column).toBe(10);
      });
      it("remove heading 3", function() {
        editor.setText("### heading");
        new StyleLine("h3").trigger();
        expect(editor.getText()).toBe("heading");
        return expect(editor.getCursorBufferPosition().column).toBe(7);
      });
      it("apply ordered/unordered list", function() {
        editor.setText("- list");
        new StyleLine("ol").trigger();
        expect(editor.getText()).toBe("1. list");
        expect(editor.getCursorBufferPosition().column).toBe(7);
        new StyleLine("ul").trigger();
        expect(editor.getText()).toBe("- list");
        return expect(editor.getCursorBufferPosition().column).toBe(6);
      });
      return it("apply task/taskdone list", function() {
        editor.setText("task");
        new StyleLine("task").trigger();
        expect(editor.getText()).toBe("- [ ] task");
        new StyleLine("taskdone").trigger();
        expect(editor.getText()).toBe("- [x] task");
        new StyleLine("task").trigger();
        expect(editor.getText()).toBe("- [ ] task");
        new StyleLine("task").trigger();
        return expect(editor.getText()).toBe("task");
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
