(function() {
  "use strict";
  var MathJaxHelper, UpdatePreview, WrappedDomTree, prepareCodeBlocksForAtomEditors, renderer;

  WrappedDomTree = require('./wrapped-dom-tree');

  MathJaxHelper = require('./mathjax-helper');

  renderer = require('./renderer');

  module.exports = UpdatePreview = (function() {
    function UpdatePreview(dom) {
      this.tree = new WrappedDomTree(dom, true);
      this.domFragment = document.createDocumentFragment();
    }

    UpdatePreview.prototype.update = function(domFragment, renderLaTeX) {
      var elm, firstTime, j, len, newDom, newTree, r, ref;
      prepareCodeBlocksForAtomEditors(domFragment);
      if (domFragment.isEqualNode(this.domFragment)) {
        return;
      }
      firstTime = this.domFragment.childElementCount === 0;
      this.domFragment = domFragment.cloneNode(true);
      newDom = document.createElement("div");
      newDom.className = "update-preview";
      newDom.appendChild(domFragment);
      newTree = new WrappedDomTree(newDom);
      r = this.tree.diffTo(newTree);
      newTree.removeSelf();
      if (firstTime) {
        r.possibleReplace = null;
        r.last = null;
      }
      if (renderLaTeX) {
        r.inserted = r.inserted.map(function(elm) {
          while (elm && !elm.innerHTML) {
            elm = elm.parentElement;
          }
          return elm;
        });
        r.inserted = r.inserted.filter(function(elm) {
          return !!elm;
        });
        MathJaxHelper.mathProcessor(r.inserted);
      }
      if (!(atom.config.get('markdown-preview-plus.enablePandoc') && atom.config.get('markdown-preview-plus.useNativePandocCodeStyles'))) {
        ref = r.inserted;
        for (j = 0, len = ref.length; j < len; j++) {
          elm = ref[j];
          if (elm instanceof Element) {
            renderer.convertCodeBlocksToAtomEditors(elm);
          }
        }
      }
      this.updateOrderedListsStart();
      return r;
    };

    UpdatePreview.prototype.updateOrderedListsStart = function() {
      var i, j, parsedOLs, parsedStart, previewOLs, previewStart, ref;
      previewOLs = this.tree.shownTree.dom.querySelectorAll('ol');
      parsedOLs = this.domFragment.querySelectorAll('ol');
      for (i = j = 0, ref = parsedOLs.length - 1; j <= ref; i = j += 1) {
        previewStart = previewOLs[i].getAttribute('start');
        parsedStart = parsedOLs[i].getAttribute('start');
        if (previewStart === parsedStart) {
          continue;
        } else if (parsedStart != null) {
          previewOLs[i].setAttribute('start', parsedStart);
        } else {
          previewOLs[i].removeAttribute('start');
        }
      }
    };

    return UpdatePreview;

  })();

  prepareCodeBlocksForAtomEditors = function(domFragment) {
    var j, len, preElement, preWrapper, ref;
    ref = domFragment.querySelectorAll('pre');
    for (j = 0, len = ref.length; j < len; j++) {
      preElement = ref[j];
      preWrapper = document.createElement('span');
      preWrapper.className = 'atom-text-editor';
      preElement.parentNode.insertBefore(preWrapper, preElement);
      preWrapper.appendChild(preElement);
    }
    return domFragment;
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUvamVzdXMvLmF0b20vcGFja2FnZXMvbWFya2Rvd24tcHJldmlldy1wbHVzL2xpYi91cGRhdGUtcHJldmlldy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0JBO0VBQUE7QUFBQSxNQUFBOztFQUVBLGNBQUEsR0FBa0IsT0FBQSxDQUFRLG9CQUFSOztFQUNsQixhQUFBLEdBQWtCLE9BQUEsQ0FBUSxrQkFBUjs7RUFDbEIsUUFBQSxHQUFrQixPQUFBLENBQVEsWUFBUjs7RUFFbEIsTUFBTSxDQUFDLE9BQVAsR0FBdUI7SUFHUix1QkFBQyxHQUFEO01BQ1gsSUFBQyxDQUFBLElBQUQsR0FBb0IsSUFBQSxjQUFBLENBQWUsR0FBZixFQUFvQixJQUFwQjtNQUNwQixJQUFDLENBQUEsV0FBRCxHQUFnQixRQUFRLENBQUMsc0JBQVQsQ0FBQTtJQUZMOzs0QkFJYixNQUFBLEdBQVEsU0FBQyxXQUFELEVBQWMsV0FBZDtBQUNOLFVBQUE7TUFBQSwrQkFBQSxDQUFnQyxXQUFoQztNQUVBLElBQUcsV0FBVyxDQUFDLFdBQVosQ0FBd0IsSUFBQyxDQUFBLFdBQXpCLENBQUg7QUFDRSxlQURGOztNQUdBLFNBQUEsR0FBZ0IsSUFBQyxDQUFBLFdBQVcsQ0FBQyxpQkFBYixLQUFrQztNQUNsRCxJQUFDLENBQUEsV0FBRCxHQUFnQixXQUFXLENBQUMsU0FBWixDQUFzQixJQUF0QjtNQUVoQixNQUFBLEdBQW9CLFFBQVEsQ0FBQyxhQUFULENBQXVCLEtBQXZCO01BQ3BCLE1BQU0sQ0FBQyxTQUFQLEdBQW9CO01BQ3BCLE1BQU0sQ0FBQyxXQUFQLENBQW1CLFdBQW5CO01BQ0EsT0FBQSxHQUF3QixJQUFBLGNBQUEsQ0FBZSxNQUFmO01BRXhCLENBQUEsR0FBSSxJQUFDLENBQUEsSUFBSSxDQUFDLE1BQU4sQ0FBYSxPQUFiO01BQ0osT0FBTyxDQUFDLFVBQVIsQ0FBQTtNQUVBLElBQUcsU0FBSDtRQUNFLENBQUMsQ0FBQyxlQUFGLEdBQW9CO1FBQ3BCLENBQUMsQ0FBQyxJQUFGLEdBQW9CLEtBRnRCOztNQUlBLElBQUcsV0FBSDtRQUNFLENBQUMsQ0FBQyxRQUFGLEdBQWEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFYLENBQWUsU0FBQyxHQUFEO0FBQzFCLGlCQUFNLEdBQUEsSUFBUSxDQUFJLEdBQUcsQ0FBQyxTQUF0QjtZQUNFLEdBQUEsR0FBTSxHQUFHLENBQUM7VUFEWjtpQkFFQTtRQUgwQixDQUFmO1FBSWIsQ0FBQyxDQUFDLFFBQUYsR0FBYSxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQVgsQ0FBa0IsU0FBQyxHQUFEO2lCQUM3QixDQUFDLENBQUM7UUFEMkIsQ0FBbEI7UUFFYixhQUFhLENBQUMsYUFBZCxDQUE0QixDQUFDLENBQUMsUUFBOUIsRUFQRjs7TUFTQSxJQUFBLENBQUEsQ0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQVosQ0FBZ0Isb0NBQWhCLENBQUEsSUFDQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQVosQ0FBZ0IsaURBQWhCLENBRFIsQ0FBQTtBQUVFO0FBQUEsYUFBQSxxQ0FBQTs7VUFDRSxJQUFHLEdBQUEsWUFBZSxPQUFsQjtZQUNFLFFBQVEsQ0FBQyw4QkFBVCxDQUF3QyxHQUF4QyxFQURGOztBQURGLFNBRkY7O01BTUEsSUFBQyxDQUFBLHVCQUFELENBQUE7QUFFQSxhQUFPO0lBdENEOzs0QkF3Q1IsdUJBQUEsR0FBeUIsU0FBQTtBQUN2QixVQUFBO01BQUEsVUFBQSxHQUFhLElBQUMsQ0FBQSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxnQkFBcEIsQ0FBcUMsSUFBckM7TUFDYixTQUFBLEdBQWEsSUFBQyxDQUFBLFdBQVcsQ0FBQyxnQkFBYixDQUE4QixJQUE5QjtBQUViLFdBQVMsMkRBQVQ7UUFDRSxZQUFBLEdBQWdCLFVBQVcsQ0FBQSxDQUFBLENBQUUsQ0FBQyxZQUFkLENBQTJCLE9BQTNCO1FBQ2hCLFdBQUEsR0FBZ0IsU0FBVSxDQUFBLENBQUEsQ0FBRSxDQUFDLFlBQWIsQ0FBMEIsT0FBMUI7UUFFaEIsSUFBRyxZQUFBLEtBQWdCLFdBQW5CO0FBQ0UsbUJBREY7U0FBQSxNQUVLLElBQUcsbUJBQUg7VUFDSCxVQUFXLENBQUEsQ0FBQSxDQUFFLENBQUMsWUFBZCxDQUEyQixPQUEzQixFQUFvQyxXQUFwQyxFQURHO1NBQUEsTUFBQTtVQUdILFVBQVcsQ0FBQSxDQUFBLENBQUUsQ0FBQyxlQUFkLENBQThCLE9BQTlCLEVBSEc7O0FBTlA7SUFKdUI7Ozs7OztFQWlCM0IsK0JBQUEsR0FBa0MsU0FBQyxXQUFEO0FBQ2hDLFFBQUE7QUFBQTtBQUFBLFNBQUEscUNBQUE7O01BQ0UsVUFBQSxHQUFhLFFBQVEsQ0FBQyxhQUFULENBQXVCLE1BQXZCO01BQ2IsVUFBVSxDQUFDLFNBQVgsR0FBdUI7TUFDdkIsVUFBVSxDQUFDLFVBQVUsQ0FBQyxZQUF0QixDQUFtQyxVQUFuQyxFQUErQyxVQUEvQztNQUNBLFVBQVUsQ0FBQyxXQUFYLENBQXVCLFVBQXZCO0FBSkY7V0FLQTtFQU5nQztBQXRFbEMiLCJzb3VyY2VzQ29udGVudCI6WyIjIFRoaXMgZmlsZSBpbmNvcnBvcmF0ZXMgY29kZSBmcm9tIFttYXJrbW9uXShodHRwczovL2dpdGh1Yi5jb20veXlqaGFvL21hcmttb24pXG4jIGNvdmVyZWQgYnkgdGhlIGZvbGxvd2luZyB0ZXJtczpcbiNcbiMgQ29weXJpZ2h0IChjKSAyMDE0LCBZYW8gWXVqaWFuLCBodHRwOi8veWp5YW8uY29tXG4jXG4jIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiMgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuIyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4jIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiMgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4jIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4jXG4jIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4jIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuI1xuIyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4jIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiMgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4jIFRIRSBTT0ZUV0FSRS5cblwidXNlIHN0cmljdFwiXG5cbldyYXBwZWREb21UcmVlICA9IHJlcXVpcmUgJy4vd3JhcHBlZC1kb20tdHJlZSdcbk1hdGhKYXhIZWxwZXIgICA9IHJlcXVpcmUgJy4vbWF0aGpheC1oZWxwZXInXG5yZW5kZXJlciAgICAgICAgPSByZXF1aXJlICcuL3JlbmRlcmVyJ1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIFVwZGF0ZVByZXZpZXdcbiAgIyBAcGFyYW0gZG9tIEEgRE9NIGVsZW1lbnQgb2JqZWN0XG4gICMgICAgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL2VsZW1lbnRcbiAgY29uc3RydWN0b3I6IChkb20pIC0+XG4gICAgQHRyZWUgICAgICAgICA9IG5ldyBXcmFwcGVkRG9tVHJlZSBkb20sIHRydWVcbiAgICBAZG9tRnJhZ21lbnQgID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpXG5cbiAgdXBkYXRlOiAoZG9tRnJhZ21lbnQsIHJlbmRlckxhVGVYKSAtPlxuICAgIHByZXBhcmVDb2RlQmxvY2tzRm9yQXRvbUVkaXRvcnMoZG9tRnJhZ21lbnQpXG5cbiAgICBpZiBkb21GcmFnbWVudC5pc0VxdWFsTm9kZShAZG9tRnJhZ21lbnQpXG4gICAgICByZXR1cm5cblxuICAgIGZpcnN0VGltZSAgICAgPSBAZG9tRnJhZ21lbnQuY2hpbGRFbGVtZW50Q291bnQgaXMgMFxuICAgIEBkb21GcmFnbWVudCAgPSBkb21GcmFnbWVudC5jbG9uZU5vZGUodHJ1ZSlcblxuICAgIG5ld0RvbSAgICAgICAgICAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBcImRpdlwiXG4gICAgbmV3RG9tLmNsYXNzTmFtZSAgPSBcInVwZGF0ZS1wcmV2aWV3XCJcbiAgICBuZXdEb20uYXBwZW5kQ2hpbGQgZG9tRnJhZ21lbnRcbiAgICBuZXdUcmVlICAgICAgICAgICA9IG5ldyBXcmFwcGVkRG9tVHJlZSBuZXdEb21cblxuICAgIHIgPSBAdHJlZS5kaWZmVG8gbmV3VHJlZVxuICAgIG5ld1RyZWUucmVtb3ZlU2VsZigpXG5cbiAgICBpZiBmaXJzdFRpbWVcbiAgICAgIHIucG9zc2libGVSZXBsYWNlID0gbnVsbFxuICAgICAgci5sYXN0ICAgICAgICAgICAgPSBudWxsXG5cbiAgICBpZiByZW5kZXJMYVRlWFxuICAgICAgci5pbnNlcnRlZCA9IHIuaW5zZXJ0ZWQubWFwIChlbG0pIC0+XG4gICAgICAgIHdoaWxlIGVsbSBhbmQgbm90IGVsbS5pbm5lckhUTUxcbiAgICAgICAgICBlbG0gPSBlbG0ucGFyZW50RWxlbWVudFxuICAgICAgICBlbG1cbiAgICAgIHIuaW5zZXJ0ZWQgPSByLmluc2VydGVkLmZpbHRlciAoZWxtKSAtPlxuICAgICAgICAhIWVsbVxuICAgICAgTWF0aEpheEhlbHBlci5tYXRoUHJvY2Vzc29yIHIuaW5zZXJ0ZWRcblxuICAgIHVubGVzcyBhdG9tLmNvbmZpZy5nZXQoJ21hcmtkb3duLXByZXZpZXctcGx1cy5lbmFibGVQYW5kb2MnKSBcXFxuICAgICAgICBhbmQgYXRvbS5jb25maWcuZ2V0KCdtYXJrZG93bi1wcmV2aWV3LXBsdXMudXNlTmF0aXZlUGFuZG9jQ29kZVN0eWxlcycpXG4gICAgICBmb3IgZWxtIGluIHIuaW5zZXJ0ZWRcbiAgICAgICAgaWYgZWxtIGluc3RhbmNlb2YgRWxlbWVudFxuICAgICAgICAgIHJlbmRlcmVyLmNvbnZlcnRDb2RlQmxvY2tzVG9BdG9tRWRpdG9ycyBlbG1cblxuICAgIEB1cGRhdGVPcmRlcmVkTGlzdHNTdGFydCgpXG5cbiAgICByZXR1cm4gclxuXG4gIHVwZGF0ZU9yZGVyZWRMaXN0c1N0YXJ0OiAtPlxuICAgIHByZXZpZXdPTHMgPSBAdHJlZS5zaG93blRyZWUuZG9tLnF1ZXJ5U2VsZWN0b3JBbGwoJ29sJylcbiAgICBwYXJzZWRPTHMgID0gQGRvbUZyYWdtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ29sJylcblxuICAgIGZvciBpIGluIFswLi4ocGFyc2VkT0xzLmxlbmd0aC0xKV0gYnkgMVxuICAgICAgcHJldmlld1N0YXJ0ICA9IHByZXZpZXdPTHNbaV0uZ2V0QXR0cmlidXRlICdzdGFydCdcbiAgICAgIHBhcnNlZFN0YXJ0ICAgPSBwYXJzZWRPTHNbaV0uZ2V0QXR0cmlidXRlICdzdGFydCdcblxuICAgICAgaWYgcHJldmlld1N0YXJ0IGlzIHBhcnNlZFN0YXJ0XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICBlbHNlIGlmIHBhcnNlZFN0YXJ0P1xuICAgICAgICBwcmV2aWV3T0xzW2ldLnNldEF0dHJpYnV0ZSAnc3RhcnQnLCBwYXJzZWRTdGFydFxuICAgICAgZWxzZVxuICAgICAgICBwcmV2aWV3T0xzW2ldLnJlbW92ZUF0dHJpYnV0ZSAnc3RhcnQnXG5cbiAgICByZXR1cm5cblxucHJlcGFyZUNvZGVCbG9ja3NGb3JBdG9tRWRpdG9ycyA9IChkb21GcmFnbWVudCkgLT5cbiAgZm9yIHByZUVsZW1lbnQgaW4gZG9tRnJhZ21lbnQucXVlcnlTZWxlY3RvckFsbCgncHJlJylcbiAgICBwcmVXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpXG4gICAgcHJlV3JhcHBlci5jbGFzc05hbWUgPSAnYXRvbS10ZXh0LWVkaXRvcidcbiAgICBwcmVFbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHByZVdyYXBwZXIsIHByZUVsZW1lbnQpXG4gICAgcHJlV3JhcHBlci5hcHBlbmRDaGlsZChwcmVFbGVtZW50KVxuICBkb21GcmFnbWVudFxuIl19
