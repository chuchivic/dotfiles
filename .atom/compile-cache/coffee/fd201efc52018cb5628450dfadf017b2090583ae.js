(function() {
  var SelectStageFiles, git, pathToRepoFile, ref, repo, stagedFile, unstagedFile;

  git = require('../../lib/git');

  SelectStageFiles = require('../../lib/views/select-stage-files-view-beta');

  ref = require('../fixtures'), repo = ref.repo, pathToRepoFile = ref.pathToRepoFile;

  stagedFile = {
    staged: true,
    path: pathToRepoFile + '1'
  };

  unstagedFile = {
    staged: false,
    path: pathToRepoFile
  };

  describe("SelectStageFiles", function() {
    it("renders staged files with the css class 'active'", function() {
      var view;
      spyOn(git, 'cmd').andReturn(Promise.resolve(''));
      view = new SelectStageFiles(repo, [stagedFile, unstagedFile]);
      return expect(view.find('li.active').length).toBe(1);
    });
    it("toggles staged files and their css class of 'active'", function() {
      var selectedItem, view;
      spyOn(git, 'cmd').andReturn(Promise.resolve(''));
      view = new SelectStageFiles(repo, [stagedFile, unstagedFile]);
      expect(view.find('li.active').length).toBe(1);
      selectedItem = view.getSelectedItem();
      while (!selectedItem.staged) {
        selectedItem = view.selectNextItemView();
      }
      view.confirmed(selectedItem, view.getSelectedItemView());
      return expect(view.find('li.active').length).toBe(0);
    });
    it("stages the selected files", function() {
      var view;
      spyOn(git, 'cmd').andReturn(Promise.resolve(''));
      view = new SelectStageFiles(repo, [unstagedFile]);
      view.confirmSelection();
      view.find('.btn-apply-button').click();
      return expect(git.cmd).toHaveBeenCalledWith(['add', '-f', unstagedFile.path], {
        cwd: repo.getWorkingDirectory()
      });
    });
    return it("unstages the selected files", function() {
      var view;
      spyOn(git, 'cmd').andReturn(Promise.resolve(''));
      view = new SelectStageFiles(repo, [stagedFile]);
      view.find('.btn-apply-button').click();
      return expect(git.cmd).toHaveBeenCalledWith(['reset', 'HEAD', '--', stagedFile.path], {
        cwd: repo.getWorkingDirectory()
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUvamVzdXMvLmF0b20vcGFja2FnZXMvZ2l0LXBsdXMvc3BlYy92aWV3cy9zZWxlY3Qtc3RhZ2UtZmlsZXMtdmlldy1iZXRhLXNwZWMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxHQUFBLEdBQU0sT0FBQSxDQUFRLGVBQVI7O0VBQ04sZ0JBQUEsR0FBbUIsT0FBQSxDQUFRLDhDQUFSOztFQUVuQixNQUF5QixPQUFBLENBQVEsYUFBUixDQUF6QixFQUFDLGVBQUQsRUFBTzs7RUFDUCxVQUFBLEdBQ0U7SUFBQSxNQUFBLEVBQVEsSUFBUjtJQUNBLElBQUEsRUFBTSxjQUFBLEdBQWlCLEdBRHZCOzs7RUFFRixZQUFBLEdBQ0U7SUFBQSxNQUFBLEVBQVEsS0FBUjtJQUNBLElBQUEsRUFBTSxjQUROOzs7RUFHRixRQUFBLENBQVMsa0JBQVQsRUFBNkIsU0FBQTtJQUMzQixFQUFBLENBQUcsa0RBQUgsRUFBdUQsU0FBQTtBQUNyRCxVQUFBO01BQUEsS0FBQSxDQUFNLEdBQU4sRUFBVyxLQUFYLENBQWlCLENBQUMsU0FBbEIsQ0FBNEIsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsRUFBaEIsQ0FBNUI7TUFDQSxJQUFBLEdBQVcsSUFBQSxnQkFBQSxDQUFpQixJQUFqQixFQUF1QixDQUFDLFVBQUQsRUFBYSxZQUFiLENBQXZCO2FBQ1gsTUFBQSxDQUFPLElBQUksQ0FBQyxJQUFMLENBQVUsV0FBVixDQUFzQixDQUFDLE1BQTlCLENBQXFDLENBQUMsSUFBdEMsQ0FBMkMsQ0FBM0M7SUFIcUQsQ0FBdkQ7SUFLQSxFQUFBLENBQUcsc0RBQUgsRUFBMkQsU0FBQTtBQUN6RCxVQUFBO01BQUEsS0FBQSxDQUFNLEdBQU4sRUFBVyxLQUFYLENBQWlCLENBQUMsU0FBbEIsQ0FBNEIsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsRUFBaEIsQ0FBNUI7TUFDQSxJQUFBLEdBQVcsSUFBQSxnQkFBQSxDQUFpQixJQUFqQixFQUF1QixDQUFDLFVBQUQsRUFBYSxZQUFiLENBQXZCO01BQ1gsTUFBQSxDQUFPLElBQUksQ0FBQyxJQUFMLENBQVUsV0FBVixDQUFzQixDQUFDLE1BQTlCLENBQXFDLENBQUMsSUFBdEMsQ0FBMkMsQ0FBM0M7TUFDQSxZQUFBLEdBQWUsSUFBSSxDQUFDLGVBQUwsQ0FBQTtBQUNmLGFBQU0sQ0FBSSxZQUFZLENBQUMsTUFBdkI7UUFDRSxZQUFBLEdBQWUsSUFBSSxDQUFDLGtCQUFMLENBQUE7TUFEakI7TUFFQSxJQUFJLENBQUMsU0FBTCxDQUFlLFlBQWYsRUFBNkIsSUFBSSxDQUFDLG1CQUFMLENBQUEsQ0FBN0I7YUFDQSxNQUFBLENBQU8sSUFBSSxDQUFDLElBQUwsQ0FBVSxXQUFWLENBQXNCLENBQUMsTUFBOUIsQ0FBcUMsQ0FBQyxJQUF0QyxDQUEyQyxDQUEzQztJQVJ5RCxDQUEzRDtJQVVBLEVBQUEsQ0FBRywyQkFBSCxFQUFnQyxTQUFBO0FBQzlCLFVBQUE7TUFBQSxLQUFBLENBQU0sR0FBTixFQUFXLEtBQVgsQ0FBaUIsQ0FBQyxTQUFsQixDQUE0QixPQUFPLENBQUMsT0FBUixDQUFnQixFQUFoQixDQUE1QjtNQUNBLElBQUEsR0FBVyxJQUFBLGdCQUFBLENBQWlCLElBQWpCLEVBQXVCLENBQUMsWUFBRCxDQUF2QjtNQUNYLElBQUksQ0FBQyxnQkFBTCxDQUFBO01BQ0EsSUFBSSxDQUFDLElBQUwsQ0FBVSxtQkFBVixDQUE4QixDQUFDLEtBQS9CLENBQUE7YUFDQSxNQUFBLENBQU8sR0FBRyxDQUFDLEdBQVgsQ0FBZSxDQUFDLG9CQUFoQixDQUFxQyxDQUFDLEtBQUQsRUFBUSxJQUFSLEVBQWMsWUFBWSxDQUFDLElBQTNCLENBQXJDLEVBQXVFO1FBQUEsR0FBQSxFQUFLLElBQUksQ0FBQyxtQkFBTCxDQUFBLENBQUw7T0FBdkU7SUFMOEIsQ0FBaEM7V0FPQSxFQUFBLENBQUcsNkJBQUgsRUFBa0MsU0FBQTtBQUNoQyxVQUFBO01BQUEsS0FBQSxDQUFNLEdBQU4sRUFBVyxLQUFYLENBQWlCLENBQUMsU0FBbEIsQ0FBNEIsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsRUFBaEIsQ0FBNUI7TUFDQSxJQUFBLEdBQVcsSUFBQSxnQkFBQSxDQUFpQixJQUFqQixFQUF1QixDQUFDLFVBQUQsQ0FBdkI7TUFDWCxJQUFJLENBQUMsSUFBTCxDQUFVLG1CQUFWLENBQThCLENBQUMsS0FBL0IsQ0FBQTthQUNBLE1BQUEsQ0FBTyxHQUFHLENBQUMsR0FBWCxDQUFlLENBQUMsb0JBQWhCLENBQXFDLENBQUMsT0FBRCxFQUFVLE1BQVYsRUFBa0IsSUFBbEIsRUFBd0IsVUFBVSxDQUFDLElBQW5DLENBQXJDLEVBQStFO1FBQUEsR0FBQSxFQUFLLElBQUksQ0FBQyxtQkFBTCxDQUFBLENBQUw7T0FBL0U7SUFKZ0MsQ0FBbEM7RUF2QjJCLENBQTdCO0FBWEEiLCJzb3VyY2VzQ29udGVudCI6WyJnaXQgPSByZXF1aXJlICcuLi8uLi9saWIvZ2l0J1xuU2VsZWN0U3RhZ2VGaWxlcyA9IHJlcXVpcmUgJy4uLy4uL2xpYi92aWV3cy9zZWxlY3Qtc3RhZ2UtZmlsZXMtdmlldy1iZXRhJ1xuXG57cmVwbywgcGF0aFRvUmVwb0ZpbGV9ID0gcmVxdWlyZSAnLi4vZml4dHVyZXMnXG5zdGFnZWRGaWxlID1cbiAgc3RhZ2VkOiB0cnVlXG4gIHBhdGg6IHBhdGhUb1JlcG9GaWxlICsgJzEnXG51bnN0YWdlZEZpbGUgPVxuICBzdGFnZWQ6IGZhbHNlXG4gIHBhdGg6IHBhdGhUb1JlcG9GaWxlXG5cbmRlc2NyaWJlIFwiU2VsZWN0U3RhZ2VGaWxlc1wiLCAtPlxuICBpdCBcInJlbmRlcnMgc3RhZ2VkIGZpbGVzIHdpdGggdGhlIGNzcyBjbGFzcyAnYWN0aXZlJ1wiLCAtPlxuICAgIHNweU9uKGdpdCwgJ2NtZCcpLmFuZFJldHVybiBQcm9taXNlLnJlc29sdmUgJydcbiAgICB2aWV3ID0gbmV3IFNlbGVjdFN0YWdlRmlsZXMocmVwbywgW3N0YWdlZEZpbGUsIHVuc3RhZ2VkRmlsZV0pXG4gICAgZXhwZWN0KHZpZXcuZmluZCgnbGkuYWN0aXZlJykubGVuZ3RoKS50b0JlIDFcblxuICBpdCBcInRvZ2dsZXMgc3RhZ2VkIGZpbGVzIGFuZCB0aGVpciBjc3MgY2xhc3Mgb2YgJ2FjdGl2ZSdcIiwgLT5cbiAgICBzcHlPbihnaXQsICdjbWQnKS5hbmRSZXR1cm4gUHJvbWlzZS5yZXNvbHZlICcnXG4gICAgdmlldyA9IG5ldyBTZWxlY3RTdGFnZUZpbGVzKHJlcG8sIFtzdGFnZWRGaWxlLCB1bnN0YWdlZEZpbGVdKVxuICAgIGV4cGVjdCh2aWV3LmZpbmQoJ2xpLmFjdGl2ZScpLmxlbmd0aCkudG9CZSAxXG4gICAgc2VsZWN0ZWRJdGVtID0gdmlldy5nZXRTZWxlY3RlZEl0ZW0oKVxuICAgIHdoaWxlIG5vdCBzZWxlY3RlZEl0ZW0uc3RhZ2VkXG4gICAgICBzZWxlY3RlZEl0ZW0gPSB2aWV3LnNlbGVjdE5leHRJdGVtVmlldygpXG4gICAgdmlldy5jb25maXJtZWQoc2VsZWN0ZWRJdGVtLCB2aWV3LmdldFNlbGVjdGVkSXRlbVZpZXcoKSlcbiAgICBleHBlY3Qodmlldy5maW5kKCdsaS5hY3RpdmUnKS5sZW5ndGgpLnRvQmUgMFxuXG4gIGl0IFwic3RhZ2VzIHRoZSBzZWxlY3RlZCBmaWxlc1wiLCAtPlxuICAgIHNweU9uKGdpdCwgJ2NtZCcpLmFuZFJldHVybiBQcm9taXNlLnJlc29sdmUgJydcbiAgICB2aWV3ID0gbmV3IFNlbGVjdFN0YWdlRmlsZXMocmVwbywgW3Vuc3RhZ2VkRmlsZV0pXG4gICAgdmlldy5jb25maXJtU2VsZWN0aW9uKClcbiAgICB2aWV3LmZpbmQoJy5idG4tYXBwbHktYnV0dG9uJykuY2xpY2soKVxuICAgIGV4cGVjdChnaXQuY21kKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCBbJ2FkZCcsICctZicsIHVuc3RhZ2VkRmlsZS5wYXRoXSwgY3dkOiByZXBvLmdldFdvcmtpbmdEaXJlY3RvcnkoKVxuXG4gIGl0IFwidW5zdGFnZXMgdGhlIHNlbGVjdGVkIGZpbGVzXCIsIC0+XG4gICAgc3B5T24oZ2l0LCAnY21kJykuYW5kUmV0dXJuIFByb21pc2UucmVzb2x2ZSAnJ1xuICAgIHZpZXcgPSBuZXcgU2VsZWN0U3RhZ2VGaWxlcyhyZXBvLCBbc3RhZ2VkRmlsZV0pXG4gICAgdmlldy5maW5kKCcuYnRuLWFwcGx5LWJ1dHRvbicpLmNsaWNrKClcbiAgICBleHBlY3QoZ2l0LmNtZCkudG9IYXZlQmVlbkNhbGxlZFdpdGggWydyZXNldCcsICdIRUFEJywgJy0tJywgc3RhZ2VkRmlsZS5wYXRoXSwgY3dkOiByZXBvLmdldFdvcmtpbmdEaXJlY3RvcnkoKVxuIl19
