(function() {
  var TextData, dispatch, getView, getVimState, ref, settings, withMockPlatform;

  ref = require('./spec-helper'), getVimState = ref.getVimState, dispatch = ref.dispatch, TextData = ref.TextData, getView = ref.getView, withMockPlatform = ref.withMockPlatform;

  settings = require('../lib/settings');

  describe("mini DSL used in vim-mode-plus's spec", function() {
    var editor, editorElement, ensure, ref1, set, vimState;
    ref1 = [], set = ref1[0], ensure = ref1[1], editor = ref1[2], editorElement = ref1[3], vimState = ref1[4];
    beforeEach(function() {
      getVimState(function(state, vim) {
        vimState = state;
        editor = vimState.editor, editorElement = vimState.editorElement;
        return set = vim.set, ensure = vim.ensure, vim;
      });
      return runs(function() {
        return jasmine.attachToDOM(editorElement);
      });
    });
    describe("old exisisting spec options", function() {
      beforeEach(function() {
        return set({
          text: "abc",
          cursor: [0, 0]
        });
      });
      return it("toggle and move right", function() {
        return ensure("~", {
          text: "Abc",
          cursor: [0, 1]
        });
      });
    });
    describe("new 'textC' spec options with explanatory ensure", function() {
      describe("| represent cursor", function() {
        beforeEach(function() {
          set({
            textC: "|abc"
          });
          return ensure(null, {
            text: "abc",
            cursor: [0, 0]
          });
        });
        return it("toggle and move right", function() {
          ensure("~", {
            textC: "A|bc"
          });
          return ensure(null, {
            text: "Abc",
            cursor: [0, 1]
          });
        });
      });
      describe("! represent cursor", function() {
        beforeEach(function() {
          set({
            textC: "!abc"
          });
          return ensure(null, {
            text: "abc",
            cursor: [0, 0]
          });
        });
        return it("toggle and move right", function() {
          ensure("~", {
            textC: "A!bc"
          });
          return ensure(null, {
            text: "Abc",
            cursor: [0, 1]
          });
        });
      });
      return describe("| and ! is exchangable", function() {
        return it("both are OK", function() {
          set({
            textC: "|abc"
          });
          ensure("~", {
            textC: "A!bc"
          });
          set({
            textC: "a!bc"
          });
          return ensure("~", {
            textC: "aB!c"
          });
        });
      });
    });
    return describe("multi-low, multi-cursor case", function() {
      describe("without ! cursor", function() {
        return it("last | become last cursor", function() {
          set({
            textC: "|0: line0\n|1: line1"
          });
          ensure(null, {
            cursor: [[0, 0], [1, 0]]
          });
          return expect(editor.getLastCursor().getBufferPosition()).toEqual([1, 0]);
        });
      });
      describe("with ! cursor", function() {
        return it("! become last cursor", function() {
          set({
            textC: "|012|345|678"
          });
          ensure(null, {
            textC: "|012|345|678"
          });
          ensure(null, {
            cursor: [[0, 0], [0, 3], [0, 6]]
          });
          expect(editor.getLastCursor().getBufferPosition()).toEqual([0, 6]);
          set({
            textC: "!012|345|678"
          });
          ensure(null, {
            textC: "!012|345|678"
          });
          ensure(null, {
            cursor: [[0, 3], [0, 6], [0, 0]]
          });
          expect(editor.getLastCursor().getBufferPosition()).toEqual([0, 0]);
          set({
            textC: "|012!345|678"
          });
          ensure(null, {
            textC: "|012!345|678"
          });
          ensure(null, {
            cursor: [[0, 0], [0, 6], [0, 3]]
          });
          expect(editor.getLastCursor().getBufferPosition()).toEqual([0, 3]);
          set({
            textC: "|012|345!678"
          });
          ensure(null, {
            textC: "|012|345!678"
          });
          ensure(null, {
            cursor: [[0, 0], [0, 3], [0, 6]]
          });
          return expect(editor.getLastCursor().getBufferPosition()).toEqual([0, 6]);
        });
      });
      return describe("without ! cursor", function() {
        beforeEach(function() {
          set({
            textC: "|ab|cde|fg\nhi|jklmn\nopqrstu\n"
          });
          return ensure(null, {
            text: "abcdefg\nhijklmn\nopqrstu\n",
            cursor: [[0, 0], [0, 2], [0, 5], [1, 2]]
          });
        });
        return it("toggle and move right", function() {
          ensure('~', {
            textC: "A|bC|deF|g\nhiJ|klmn\nopqrstu\n"
          });
          return ensure(null, {
            text: "AbCdeFg\nhiJklmn\nopqrstu\n",
            cursor: [[0, 1], [0, 3], [0, 6], [1, 3]]
          });
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
