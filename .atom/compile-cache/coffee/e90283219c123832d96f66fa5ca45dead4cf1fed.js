(function() {
  var TagCreateView, git, repo;

  git = require('../../lib/git');

  repo = require('../fixtures').repo;

  TagCreateView = require('../../lib/views/tag-create-view');

  describe("TagCreateView", function() {
    return describe("when there are two tags", function() {
      beforeEach(function() {
        return this.view = new TagCreateView(repo);
      });
      it("displays inputs for tag name and message", function() {
        expect(this.view.tagName).toBeDefined();
        return expect(this.view.tagMessage).toBeDefined();
      });
      it("creates a tag with the given name and message", function() {
        var cwd;
        spyOn(git, 'cmd').andReturn(Promise.resolve(0));
        cwd = repo.getWorkingDirectory();
        this.view.tagName.setText('tag1');
        this.view.tagMessage.setText('tag1 message');
        this.view.find('.gp-confirm-button').click();
        return expect(git.cmd).toHaveBeenCalledWith(['tag', '-a', 'tag1', '-m', 'tag1 message'], {
          cwd: cwd
        });
      });
      return it("creates a signed tag with the given name and message", function() {
        var cwd;
        atom.config.set('git-plus.tags.signTags', true);
        spyOn(git, 'cmd').andReturn(Promise.resolve(0));
        cwd = repo.getWorkingDirectory();
        this.view.tagName.setText('tag2');
        this.view.tagMessage.setText('tag2 message');
        this.view.find('.gp-confirm-button').click();
        return expect(git.cmd).toHaveBeenCalledWith(['tag', '-s', 'tag2', '-m', 'tag2 message'], {
          cwd: cwd
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUvamVzdXMvLmF0b20vcGFja2FnZXMvZ2l0LXBsdXMvc3BlYy92aWV3cy90YWctY3JlYXRlLXZpZXctc3BlYy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBOztFQUFBLEdBQUEsR0FBTSxPQUFBLENBQVEsZUFBUjs7RUFDTCxPQUFRLE9BQUEsQ0FBUSxhQUFSOztFQUNULGFBQUEsR0FBZ0IsT0FBQSxDQUFRLGlDQUFSOztFQUVoQixRQUFBLENBQVMsZUFBVCxFQUEwQixTQUFBO1dBQ3hCLFFBQUEsQ0FBUyx5QkFBVCxFQUFvQyxTQUFBO01BQ2xDLFVBQUEsQ0FBVyxTQUFBO2VBQ1QsSUFBQyxDQUFBLElBQUQsR0FBWSxJQUFBLGFBQUEsQ0FBYyxJQUFkO01BREgsQ0FBWDtNQUdBLEVBQUEsQ0FBRywwQ0FBSCxFQUErQyxTQUFBO1FBQzdDLE1BQUEsQ0FBTyxJQUFDLENBQUEsSUFBSSxDQUFDLE9BQWIsQ0FBcUIsQ0FBQyxXQUF0QixDQUFBO2VBQ0EsTUFBQSxDQUFPLElBQUMsQ0FBQSxJQUFJLENBQUMsVUFBYixDQUF3QixDQUFDLFdBQXpCLENBQUE7TUFGNkMsQ0FBL0M7TUFJQSxFQUFBLENBQUcsK0NBQUgsRUFBb0QsU0FBQTtBQUNsRCxZQUFBO1FBQUEsS0FBQSxDQUFNLEdBQU4sRUFBVyxLQUFYLENBQWlCLENBQUMsU0FBbEIsQ0FBNEIsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsQ0FBaEIsQ0FBNUI7UUFDQSxHQUFBLEdBQU0sSUFBSSxDQUFDLG1CQUFMLENBQUE7UUFDTixJQUFDLENBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFkLENBQXNCLE1BQXRCO1FBQ0EsSUFBQyxDQUFBLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBakIsQ0FBeUIsY0FBekI7UUFDQSxJQUFDLENBQUEsSUFBSSxDQUFDLElBQU4sQ0FBVyxvQkFBWCxDQUFnQyxDQUFDLEtBQWpDLENBQUE7ZUFDQSxNQUFBLENBQU8sR0FBRyxDQUFDLEdBQVgsQ0FBZSxDQUFDLG9CQUFoQixDQUFxQyxDQUFDLEtBQUQsRUFBUSxJQUFSLEVBQWMsTUFBZCxFQUFzQixJQUF0QixFQUE0QixjQUE1QixDQUFyQyxFQUFrRjtVQUFDLEtBQUEsR0FBRDtTQUFsRjtNQU5rRCxDQUFwRDthQVFBLEVBQUEsQ0FBRyxzREFBSCxFQUEyRCxTQUFBO0FBQ3pELFlBQUE7UUFBQSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQVosQ0FBZ0Isd0JBQWhCLEVBQTBDLElBQTFDO1FBQ0EsS0FBQSxDQUFNLEdBQU4sRUFBVyxLQUFYLENBQWlCLENBQUMsU0FBbEIsQ0FBNEIsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsQ0FBaEIsQ0FBNUI7UUFDQSxHQUFBLEdBQU0sSUFBSSxDQUFDLG1CQUFMLENBQUE7UUFDTixJQUFDLENBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFkLENBQXNCLE1BQXRCO1FBQ0EsSUFBQyxDQUFBLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBakIsQ0FBeUIsY0FBekI7UUFDQSxJQUFDLENBQUEsSUFBSSxDQUFDLElBQU4sQ0FBVyxvQkFBWCxDQUFnQyxDQUFDLEtBQWpDLENBQUE7ZUFDQSxNQUFBLENBQU8sR0FBRyxDQUFDLEdBQVgsQ0FBZSxDQUFDLG9CQUFoQixDQUFxQyxDQUFDLEtBQUQsRUFBUSxJQUFSLEVBQWMsTUFBZCxFQUFzQixJQUF0QixFQUE0QixjQUE1QixDQUFyQyxFQUFrRjtVQUFDLEtBQUEsR0FBRDtTQUFsRjtNQVB5RCxDQUEzRDtJQWhCa0MsQ0FBcEM7RUFEd0IsQ0FBMUI7QUFKQSIsInNvdXJjZXNDb250ZW50IjpbImdpdCA9IHJlcXVpcmUgJy4uLy4uL2xpYi9naXQnXG57cmVwb30gPSByZXF1aXJlICcuLi9maXh0dXJlcydcblRhZ0NyZWF0ZVZpZXcgPSByZXF1aXJlICcuLi8uLi9saWIvdmlld3MvdGFnLWNyZWF0ZS12aWV3J1xuXG5kZXNjcmliZSBcIlRhZ0NyZWF0ZVZpZXdcIiwgLT5cbiAgZGVzY3JpYmUgXCJ3aGVuIHRoZXJlIGFyZSB0d28gdGFnc1wiLCAtPlxuICAgIGJlZm9yZUVhY2ggLT5cbiAgICAgIEB2aWV3ID0gbmV3IFRhZ0NyZWF0ZVZpZXcocmVwbylcblxuICAgIGl0IFwiZGlzcGxheXMgaW5wdXRzIGZvciB0YWcgbmFtZSBhbmQgbWVzc2FnZVwiLCAtPlxuICAgICAgZXhwZWN0KEB2aWV3LnRhZ05hbWUpLnRvQmVEZWZpbmVkKClcbiAgICAgIGV4cGVjdChAdmlldy50YWdNZXNzYWdlKS50b0JlRGVmaW5lZCgpXG5cbiAgICBpdCBcImNyZWF0ZXMgYSB0YWcgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBhbmQgbWVzc2FnZVwiLCAtPlxuICAgICAgc3B5T24oZ2l0LCAnY21kJykuYW5kUmV0dXJuIFByb21pc2UucmVzb2x2ZSAwXG4gICAgICBjd2QgPSByZXBvLmdldFdvcmtpbmdEaXJlY3RvcnkoKVxuICAgICAgQHZpZXcudGFnTmFtZS5zZXRUZXh0ICd0YWcxJ1xuICAgICAgQHZpZXcudGFnTWVzc2FnZS5zZXRUZXh0ICd0YWcxIG1lc3NhZ2UnXG4gICAgICBAdmlldy5maW5kKCcuZ3AtY29uZmlybS1idXR0b24nKS5jbGljaygpXG4gICAgICBleHBlY3QoZ2l0LmNtZCkudG9IYXZlQmVlbkNhbGxlZFdpdGggWyd0YWcnLCAnLWEnLCAndGFnMScsICctbScsICd0YWcxIG1lc3NhZ2UnXSwge2N3ZH1cblxuICAgIGl0IFwiY3JlYXRlcyBhIHNpZ25lZCB0YWcgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBhbmQgbWVzc2FnZVwiLCAtPlxuICAgICAgYXRvbS5jb25maWcuc2V0KCdnaXQtcGx1cy50YWdzLnNpZ25UYWdzJywgdHJ1ZSlcbiAgICAgIHNweU9uKGdpdCwgJ2NtZCcpLmFuZFJldHVybiBQcm9taXNlLnJlc29sdmUgMFxuICAgICAgY3dkID0gcmVwby5nZXRXb3JraW5nRGlyZWN0b3J5KClcbiAgICAgIEB2aWV3LnRhZ05hbWUuc2V0VGV4dCAndGFnMidcbiAgICAgIEB2aWV3LnRhZ01lc3NhZ2Uuc2V0VGV4dCAndGFnMiBtZXNzYWdlJ1xuICAgICAgQHZpZXcuZmluZCgnLmdwLWNvbmZpcm0tYnV0dG9uJykuY2xpY2soKVxuICAgICAgZXhwZWN0KGdpdC5jbWQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoIFsndGFnJywgJy1zJywgJ3RhZzInLCAnLW0nLCAndGFnMiBtZXNzYWdlJ10sIHtjd2R9XG4iXX0=
