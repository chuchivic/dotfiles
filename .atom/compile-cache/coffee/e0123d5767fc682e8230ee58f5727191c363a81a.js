(function() {
  var StyleText;

  StyleText = require("../../lib/commands/style-text");

  describe("StyleText", function() {
    describe(".isStyleOn", function() {
      it("check a style is added", function() {
        var cmd, fixture;
        cmd = new StyleText("bold");
        fixture = "**bold**";
        return expect(cmd.isStyleOn(fixture)).toBe(true);
      });
      it("check any bold style is in string", function() {
        var cmd, fixture;
        cmd = new StyleText("bold");
        fixture = "hello **bold** world";
        return expect(cmd.isStyleOn(fixture)).toBe(true);
      });
      it("check any italic is in string", function() {
        var cmd, fixture;
        cmd = new StyleText("italic");
        fixture = "_italic_ yah _text_";
        return expect(cmd.isStyleOn(fixture)).toBe(true);
      });
      it("check any strike is in string", function() {
        var cmd, fixture;
        cmd = new StyleText("strikethrough");
        fixture = "**bold** one ~~strike~~ two _italic_";
        return expect(cmd.isStyleOn(fixture)).toBe(true);
      });
      return it("check a style is not added", function() {
        var cmd, fixture;
        cmd = new StyleText("bold");
        fixture = "_not bold_";
        return expect(cmd.isStyleOn(fixture)).toBe(false);
      });
    });
    describe(".removeStyle", function() {
      it("remove a style from text", function() {
        var cmd, fixture;
        cmd = new StyleText("italic");
        fixture = "_italic text_";
        return expect(cmd.removeStyle(fixture)).toEqual("italic text");
      });
      it("remove bold style from text", function() {
        var cmd, fixture;
        cmd = new StyleText("bold");
        fixture = "**bold text** in a string";
        return expect(cmd.removeStyle(fixture)).toEqual("bold text in a string");
      });
      return it("remove italic styles from text", function() {
        var cmd, fixture;
        cmd = new StyleText("italic");
        fixture = "_italic_ yah _text_ loh _more_";
        return expect(cmd.removeStyle(fixture)).toEqual("italic yah text loh more");
      });
    });
    describe(".addStyle", function() {
      return it("add a style to text", function() {
        var cmd, fixture;
        cmd = new StyleText("bold");
        fixture = "bold text";
        return expect(cmd.addStyle(fixture)).toEqual("**bold text**");
      });
    });
    return describe(".trigger", function() {
      var editor;
      editor = null;
      beforeEach(function() {
        waitsForPromise(function() {
          return atom.workspace.open("empty.markdown");
        });
        return runs(function() {
          return editor = atom.workspace.getActiveTextEditor();
        });
      });
      it("insert empty bold style", function() {
        new StyleText("bold").trigger();
        expect(editor.getText()).toBe("****");
        return expect(editor.getCursorBufferPosition().column).toBe(2);
      });
      it("apply italic style to word", function() {
        editor.setText("italic");
        editor.setCursorBufferPosition([0, 2]);
        new StyleText("italic").trigger();
        expect(editor.getText()).toBe("_italic_");
        return expect(editor.getCursorBufferPosition().column).toBe(8);
      });
      it("remove italic style from word", function() {
        editor.setText("_italic_");
        editor.setCursorBufferPosition([0, 3]);
        new StyleText("italic").trigger();
        expect(editor.getText()).toBe("italic");
        return expect(editor.getCursorBufferPosition().column).toBe(6);
      });
      return it("toggle code style on selection", function() {
        editor.setText("some code here");
        editor.setSelectedBufferRange([[0, 5], [0, 9]]);
        new StyleText("code").trigger();
        expect(editor.getText()).toBe("some `code` here");
        return expect(editor.getCursorBufferPosition().column).toBe(11);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
