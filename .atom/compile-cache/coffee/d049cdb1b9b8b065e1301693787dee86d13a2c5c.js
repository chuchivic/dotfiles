(function() {
  var EditLine;

  EditLine = require("../../lib/commands/edit-line");

  describe("EditLine", function() {
    var editLine, editor, event, ref;
    ref = [], editor = ref[0], editLine = ref[1], event = ref[2];
    beforeEach(function() {
      waitsForPromise(function() {
        return atom.workspace.open("empty.markdown");
      });
      return runs(function() {
        editor = atom.workspace.getActiveTextEditor();
        event = {
          abortKeyBinding: function() {
            return {};
          }
        };
        return spyOn(event, "abortKeyBinding");
      });
    });
    describe("insertNewLine", function() {
      beforeEach(function() {
        return editLine = new EditLine("insert-new-line");
      });
      it("does not affect normal new line", function() {
        editor.setText("this is normal line");
        editor.setCursorBufferPosition([0, 4]);
        editLine.trigger(event);
        return expect(event.abortKeyBinding).toHaveBeenCalled();
      });
      it("continue if config inlineNewLineContinuation enabled", function() {
        atom.config.set("markdown-writer.inlineNewLineContinuation", true);
        editor.setText("- inline line");
        editor.setCursorBufferPosition([0, 8]);
        editLine.trigger(event);
        return expect(editor.getText()).toBe("- inline\n-  line");
      });
      it("continue after unordered list line", function() {
        editor.setText("- line");
        editor.setCursorBufferPosition([0, 6]);
        editLine.trigger(event);
        return expect(editor.getText()).toBe(["- line", "- "].join("\n"));
      });
      it("continue after ordered task list line", function() {
        editor.setText("1. [ ] Epic Tasks\n  1. [X] Sub-task A");
        editor.setCursorBufferPosition([1, 19]);
        editLine.trigger(event);
        return expect(editor.getText()).toBe(["1. [ ] Epic Tasks", "  1. [X] Sub-task A", "  2. [ ] "].join("\n"));
      });
      it("continue after ordered task list line (without number continuation)", function() {
        atom.config.set("markdown-writer.orderedNewLineNumberContinuation", false);
        editor.setText("1. Epic Order One");
        editor.setCursorBufferPosition([0, 17]);
        editLine.trigger(event);
        return expect(editor.getText()).toBe(["1. Epic Order One", "1. "].join("\n"));
      });
      it("continue after alpha ordered task list line", function() {
        editor.setText("1. [ ] Epic Tasks\n  y. [X] Sub-task A");
        editor.setCursorBufferPosition([1, 19]);
        editLine.trigger(event);
        return expect(editor.getText()).toBe(["1. [ ] Epic Tasks", "  y. [X] Sub-task A", "  z. [ ] "].join("\n"));
      });
      it("continue after blockquote line", function() {
        editor.setText("> Your time is limited, so don’t waste it living someone else’s life.");
        editor.setCursorBufferPosition([0, 69]);
        editLine.trigger(event);
        return expect(editor.getText()).toBe(["> Your time is limited, so don’t waste it living someone else’s life.", "> "].join("\n"));
      });
      it("not continue after empty unordered task list line", function() {
        editor.setText("- [ ]");
        editor.setCursorBufferPosition([0, 5]);
        editLine.trigger(event);
        return expect(editor.getText()).toBe(["", ""].join("\n"));
      });
      it("not continue after empty ordered list line", function() {
        editor.setText(["1. [ ] parent", "  - child", "  - "].join("\n"));
        editor.setCursorBufferPosition([2, 4]);
        editLine.trigger(event);
        return expect(editor.getText()).toBe(["1. [ ] parent", "  - child", "2. [ ] "].join("\n"));
      });
      return it("not continue after empty ordered paragraph", function() {
        editor.setText(["1. parent", "  - child has a paragraph", "", "    paragraph one", "", "    paragraph two", "", "  - "].join("\n"));
        editor.setCursorBufferPosition([7, 4]);
        editLine.trigger(event);
        return expect(editor.getText()).toBe(["1. parent", "  - child has a paragraph", "", "    paragraph one", "", "    paragraph two", "", "2. "].join("\n"));
      });
    });
    describe("insertNewLine (Table)", function() {
      beforeEach(function() {
        editLine = new EditLine("insert-new-line");
        return editor.setText(["a | b | c", "a | b | c", "", "random line | with bar", "", "a | b | c", "--|---|--", "a | b | c", "a | b | c", "  |   |  "].join("\n"));
      });
      it("continue after table separator", function() {
        editor.setCursorBufferPosition([6, 5]);
        editLine.trigger(event);
        expect(editor.getText()).toBe(["a | b | c", "a | b | c", "", "random line | with bar", "", "a | b | c", "--|---|--", "  |   |  ", "a | b | c", "a | b | c", "  |   |  "].join("\n"));
        return expect(editor.getCursorBufferPosition().toString()).toBe("(7, 0)");
      });
      it("continue after table rows", function() {
        editor.setCursorBufferPosition([1, 9]);
        editLine.trigger(event);
        expect(editor.getText()).toBe(["a | b | c", "a | b | c", "  |   |  ", "", "random line | with bar", "", "a | b | c", "--|---|--", "a | b | c", "a | b | c", "  |   |  "].join("\n"));
        return expect(editor.getCursorBufferPosition().toString()).toBe("(2, 0)");
      });
      it("continue in a table row", function() {
        editor.setCursorBufferPosition([7, 3]);
        editLine.trigger(event);
        expect(editor.getText()).toBe(["a | b | c", "a | b | c", "", "random line | with bar", "", "a | b | c", "--|---|--", "a | b | c", "  |   |  ", "a | b | c", "  |   |  "].join("\n"));
        return expect(editor.getCursorBufferPosition().toString()).toBe("(8, 0)");
      });
      it("not continue after empty table row", function() {
        editor.setCursorBufferPosition([9, 8]);
        editLine.trigger(event);
        expect(editor.getText()).toBe(["a | b | c", "a | b | c", "", "random line | with bar", "", "a | b | c", "--|---|--", "a | b | c", "a | b | c", "", ""].join("\n"));
        return expect(editor.getCursorBufferPosition().toString()).toBe("(10, 0)");
      });
      it("has not effect at table head", function() {
        editor.setCursorBufferPosition([5, 9]);
        editLine.trigger(event);
        expect(editor.getText()).toBe(["a | b | c", "a | b | c", "", "random line | with bar", "", "a | b | c", "--|---|--", "a | b | c", "a | b | c", "  |   |  "].join("\n"));
        return expect(editor.getCursorBufferPosition().toString()).toBe("(5, 9)");
      });
      return it("has not effect at random line", function() {
        editor.setCursorBufferPosition([3, 9]);
        editLine.trigger(event);
        expect(editor.getText()).toBe(["a | b | c", "a | b | c", "", "random line | with bar", "", "a | b | c", "--|---|--", "a | b | c", "a | b | c", "  |   |  "].join("\n"));
        return expect(editor.getCursorBufferPosition().toString()).toBe("(3, 9)");
      });
    });
    return describe("indentListLine", function() {
      beforeEach(function() {
        return editLine = new EditLine("indent-list-line");
      });
      it("indent line if it is at head of line", function() {
        editor.setText("  normal line");
        editor.setCursorBufferPosition([0, 1]);
        editLine.trigger(event);
        return expect(editor.getText()).toBe("    normal line");
      });
      it("indent line if it is an unordered list", function() {
        editor.setText("- list");
        editor.setCursorBufferPosition([0, 5]);
        editLine.trigger(event);
        return expect(editor.getText()).toBe("  - list");
      });
      it("indent line if it is an ordered list", function() {
        editor.setText("3. list");
        editor.setCursorBufferPosition([0, 5]);
        editLine.trigger(event);
        return expect(editor.getText()).toBe("  1. list");
      });
      return it("insert space if it is text", function() {
        editor.setText("texttext");
        editor.setCursorBufferPosition([0, 4]);
        editLine.trigger(event);
        return expect(event.abortKeyBinding).toHaveBeenCalled();
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
