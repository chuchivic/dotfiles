Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.provideStructure = provideStructure;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodashTrim = require('lodash/trim');

var _lodashTrim2 = _interopRequireDefault(_lodashTrim);

var _utils = require('./utils');

var _tokenizer = require('./tokenizer');

'use babel';

var STRING = _tokenizer.TokenType.STRING;
var NULL = _tokenizer.TokenType.NULL;
var SYMBOL = _tokenizer.TokenType.SYMBOL;
var NUMBER = _tokenizer.TokenType.NUMBER;
var BEGIN_OBJECT = _tokenizer.TokenType.BEGIN_OBJECT;
var END_OBJECT = _tokenizer.TokenType.END_OBJECT;
var BEGIN_ARRAY = _tokenizer.TokenType.BEGIN_ARRAY;
var END_ARRAY = _tokenizer.TokenType.END_ARRAY;
var END_LABEL = _tokenizer.TokenType.END_LABEL;
var COMMA = _tokenizer.TokenType.COMMA;

function intersectsWithToken(position, token) {
  var tRow = token.line - 1;
  var pRow = position.row;
  var tCol = token.col;
  var tLength = token.src.length;
  var pCol = position.column;

  if (token.type === STRING) {
    return tRow === pRow && tCol <= pCol && tCol + tLength - 1 > pCol; // attention to ""
  }
  return tRow === pRow && tCol <= pCol && tCol + tLength > pCol;
}

function isBetweenTokenType(position, firstToken, secondToken) {
  var pRow = position.row;
  var pCol = position.column;
  var fRow = firstToken.line - 1;
  var sRow = secondToken.line - 1;
  var fEnd = firstToken.col + firstToken.src.length - 1;
  var sStart = secondToken.col;

  // cursor position and the 2 tokens are on the same line
  if (pRow === fRow && pRow === sRow) {
    return pCol >= fEnd && pCol < sStart;
  }
  // cursor position is not on the same line as the 2 other tokens but is between them
  return pRow > fRow && pRow < sRow || // firstToken \n+ position \n+ secondToken
  pRow === fRow && pRow < sRow && pCol >= fEnd // fistToken position \n+ secondToken
   || pRow > fRow && pRow === sRow && pCol < sStart; // firstToken \n+ position secondToken
}

function consumeValue(tokens, container, position, posInfo, posInfoHolder) {
  var valueStartToken = tokens.next();

  function checkPosition() {
    if (!posInfoHolder.hasValue() && intersectsWithToken(position, valueStartToken)) {
      var info = posInfo.setValuePosition().setEditedToken(valueStartToken).setPreviousToken(tokens.peekPrevious()).setNextToken(tokens.peekNext()).toObject();
      posInfoHolder.set(info);
    }
  }

  switch (valueStartToken.type) {
    case STRING:
      container.push((0, _lodashTrim2['default'])(valueStartToken.src, '"'));
      checkPosition();
      break;
    case NULL:
      container.push(null);
      checkPosition();
      break;
    case SYMBOL:
      container.push(undefined);
      checkPosition();
      break;
    case NUMBER:
      container.push(Number(valueStartToken.src));
      checkPosition();
      break;
    case BEGIN_OBJECT:
      var object = {};
      consumeObject(object, tokens, position, posInfo, posInfoHolder);
      container.push(object);
      break;
    case BEGIN_ARRAY:
      var array = [];
      consumeArray(array, tokens, position, posInfo, posInfoHolder);
      container.push(array);
      break;
    default:
      break;
  }
  return posInfo;
}

function consumeKeyValuePair(object, tokens, position, posInfo, posInfoHolder) {
  if (tokens.hasNext() && tokens.peekNext().type === END_OBJECT) {
    if (!posInfoHolder.hasValue() && isBetweenTokenType(position, tokens.current(), tokens.peekNext())) {
      var info = posInfo.setKeyPosition().setPreviousToken(tokens.current()).setNextToken(tokens.peekNext()).toObject();
      posInfoHolder.set(info);
    }
    return;
  }

  if (!posInfoHolder.hasValue() && isBetweenTokenType(position, tokens.current(), tokens.peekNext())) {
    var info = posInfo.setKeyPosition().setPreviousToken(tokens.current()).setNextToken(tokens.peekNext()).toObject();
    posInfoHolder.set(info);
  }

  var keyToken = tokens.next();
  // First token is not a key, skip it.
  if (keyToken.type !== STRING && keyToken.type !== SYMBOL) {
    return;
  }

  if (!posInfoHolder.hasValue() && intersectsWithToken(position, keyToken)) {
    var info = posInfo.setKeyPosition().setPreviousToken(tokens.peekPrevious()).setEditedToken(keyToken).setNextToken(tokens.peekNext()).toObject();
    posInfoHolder.set(info);
  }

  var key = (0, _lodashTrim2['default'])(keyToken.src, '"');
  var separatorToken = tokens.next();
  if (separatorToken.type === END_LABEL) {
    var pathWithKey = posInfo.add(key);
    if (!posInfoHolder.hasValue() && isBetweenTokenType(position, separatorToken, tokens.peekNext())) {
      var info = pathWithKey.setValuePosition().setPreviousToken(separatorToken).setNextToken(tokens.peekNext()).toObject();
      posInfoHolder.set(info);
    }
    // Complete key-value pair
    var valContainer = [];
    consumeValue(tokens, valContainer, position, pathWithKey, posInfoHolder);
    var value = valContainer[0];

    object[key] = value;
  } else {
    // separator in place, value probably under editing
    object[key] = undefined;
  }
}

function consumeObject(object, tokens, position, posInfo, posInfoHolder) {
  while (tokens.hasNext()) {
    consumeKeyValuePair(object, tokens, position, posInfo, posInfoHolder);
    if (tokens.hasNext()) {
      var token = tokens.next();
      switch (token.type) {
        case END_OBJECT:
          return; // end of object
        case COMMA:
          break; // ',' read - nothing else to do
        default:
          tokens.previous(); // something else, go back
      }
    }
  }
}

function consumeArray(array, tokens, position, posInfo, posInfoHolder) {
  var index = 0;
  while (tokens.hasNext()) {
    if (tokens.hasNext()) {
      var token = tokens.next();
      if (!posInfoHolder.hasValue() && isBetweenTokenType(position, tokens.peekPrevious(), token)) {
        var info = posInfo.add(index).setValuePosition().setPreviousToken(tokens.peekPrevious()).setNextToken(token).toObject();
        posInfoHolder.set(info);
      }
      switch (token.type) {
        case END_ARRAY:
          return; // end of array
        default:
          tokens.previous(); // something else, go back
      }
    }

    var valContainer = [];
    consumeValue(tokens, valContainer, position, posInfo.add(index), posInfoHolder);
    var value = valContainer[0];

    array.push(value);
    index++;

    if (tokens.hasNext()) {
      var token = tokens.next();
      if (!posInfoHolder.hasValue() && isBetweenTokenType(position, token, tokens.peekNext())) {
        var info = posInfo.add(index).setValuePosition().setPreviousToken(token).setNextToken(tokens.peekNext()).toObject();
        posInfoHolder.set(info);
      }
      switch (token.type) {
        case END_ARRAY:
          return; // end of object
        case COMMA:
          break; // ',' read - nothing else to do
        default:
          tokens.previous(); // something else, go back
      }
    }
  }
}

function provideStructure(tokensArray, position) {
  var tokens = new _utils.ArrayTraverser(tokensArray);

  if (!tokens.hasNext()) {
    return { contents: null, positionInfo: null, tokens: tokensArray }; // no tokens
  }

  var posInfoHolder = new _utils.ValueHolder();
  var firstToken = tokens.next();
  if (firstToken.type === BEGIN_OBJECT) {
    var object = {};
    consumeObject(object, tokens, position, new _utils.PositionInfo(), posInfoHolder);
    return { contents: object, positionInfo: posInfoHolder.getOrElse(null), tokens: tokensArray };
  } else if (firstToken.type === BEGIN_ARRAY) {
    var array = [];
    consumeArray(array, tokens, position, new _utils.PositionInfo(), posInfoHolder);
    return { contents: array, positionInfo: posInfoHolder.getOrElse(null), tokens: tokensArray };
  }
  return { contents: null, positionInfo: null, tokens: tokensArray }; // don't bother with strings, numbers, etc. for now
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,