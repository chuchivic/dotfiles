
"use strict";

/**
 * Checks if a string contains a value. The comparison value can be a string or
 * an array of strings.
 *
 * Any strings starting and ending with `/` are ignored. Use the
 * matchesStringOrRegExp() util to match regexes.
 */
module.exports = function containsString(input, /*: string*/
comparison /*: string | Array<string>*/
) /*: false | { match: string, pattern: string }*/{
  if (!Array.isArray(comparison)) {
    return testAgainstString(input, comparison);
  }

  for (var comparisonItem of comparison) {
    var testResult = testAgainstString(input, comparisonItem);
    if (testResult) {
      return testResult;
    }
  }
  return false;
};

function testAgainstString(value, comparison) {
  if (!comparison) return false;
  if (comparison[0] === "/" && comparison[comparison.length - 1] === "/") {
    return false;
  }

  if (value.indexOf(comparison) >= 0) {
    return { match: value, pattern: comparison };
  }

  return false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2plc3VzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1zdHlsZWxpbnQvbm9kZV9tb2R1bGVzL3N0eWxlbGludC9saWIvdXRpbHMvY29udGFpbnNTdHJpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLFlBQVksQ0FBQzs7Ozs7Ozs7O0FBU2IsTUFBTSxDQUFDLE9BQU8sR0FBRyxTQUFTLGNBQWMsQ0FDdEMsS0FBSztBQUNMLFVBQVU7a0RBQ3VDO0FBQ2pELE1BQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQzlCLFdBQU8saUJBQWlCLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0dBQzdDOztBQUVELE9BQUssSUFBTSxjQUFjLElBQUksVUFBVSxFQUFFO0FBQ3ZDLFFBQU0sVUFBVSxHQUFHLGlCQUFpQixDQUFDLEtBQUssRUFBRSxjQUFjLENBQUMsQ0FBQztBQUM1RCxRQUFJLFVBQVUsRUFBRTtBQUNkLGFBQU8sVUFBVSxDQUFDO0tBQ25CO0dBQ0Y7QUFDRCxTQUFPLEtBQUssQ0FBQztDQUNkLENBQUM7O0FBRUYsU0FBUyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFO0FBQzVDLE1BQUksQ0FBQyxVQUFVLEVBQUUsT0FBTyxLQUFLLENBQUM7QUFDOUIsTUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtBQUN0RSxXQUFPLEtBQUssQ0FBQztHQUNkOztBQUVELE1BQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDbEMsV0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDO0dBQzlDOztBQUVELFNBQU8sS0FBSyxDQUFDO0NBQ2QiLCJmaWxlIjoiL2hvbWUvamVzdXMvLmF0b20vcGFja2FnZXMvbGludGVyLXN0eWxlbGludC9ub2RlX21vZHVsZXMvc3R5bGVsaW50L2xpYi91dGlscy9jb250YWluc1N0cmluZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBzdHJpbmcgY29udGFpbnMgYSB2YWx1ZS4gVGhlIGNvbXBhcmlzb24gdmFsdWUgY2FuIGJlIGEgc3RyaW5nIG9yXG4gKiBhbiBhcnJheSBvZiBzdHJpbmdzLlxuICpcbiAqIEFueSBzdHJpbmdzIHN0YXJ0aW5nIGFuZCBlbmRpbmcgd2l0aCBgL2AgYXJlIGlnbm9yZWQuIFVzZSB0aGVcbiAqIG1hdGNoZXNTdHJpbmdPclJlZ0V4cCgpIHV0aWwgdG8gbWF0Y2ggcmVnZXhlcy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb250YWluc1N0cmluZyhcbiAgaW5wdXQgLyo6IHN0cmluZyovLFxuICBjb21wYXJpc29uIC8qOiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+Ki9cbikgLyo6IGZhbHNlIHwgeyBtYXRjaDogc3RyaW5nLCBwYXR0ZXJuOiBzdHJpbmcgfSovIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGNvbXBhcmlzb24pKSB7XG4gICAgcmV0dXJuIHRlc3RBZ2FpbnN0U3RyaW5nKGlucHV0LCBjb21wYXJpc29uKTtcbiAgfVxuXG4gIGZvciAoY29uc3QgY29tcGFyaXNvbkl0ZW0gb2YgY29tcGFyaXNvbikge1xuICAgIGNvbnN0IHRlc3RSZXN1bHQgPSB0ZXN0QWdhaW5zdFN0cmluZyhpbnB1dCwgY29tcGFyaXNvbkl0ZW0pO1xuICAgIGlmICh0ZXN0UmVzdWx0KSB7XG4gICAgICByZXR1cm4gdGVzdFJlc3VsdDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuZnVuY3Rpb24gdGVzdEFnYWluc3RTdHJpbmcodmFsdWUsIGNvbXBhcmlzb24pIHtcbiAgaWYgKCFjb21wYXJpc29uKSByZXR1cm4gZmFsc2U7XG4gIGlmIChjb21wYXJpc29uWzBdID09PSBcIi9cIiAmJiBjb21wYXJpc29uW2NvbXBhcmlzb24ubGVuZ3RoIC0gMV0gPT09IFwiL1wiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHZhbHVlLmluZGV4T2YoY29tcGFyaXNvbikgPj0gMCkge1xuICAgIHJldHVybiB7IG1hdGNoOiB2YWx1ZSwgcGF0dGVybjogY29tcGFyaXNvbiB9O1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuIl19