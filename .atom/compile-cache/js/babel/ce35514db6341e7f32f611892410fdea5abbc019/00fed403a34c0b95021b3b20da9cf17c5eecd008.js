function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _path = require('path');

var path = _interopRequireWildcard(_path);

// eslint-disable-next-line no-unused-vars, import/no-extraneous-dependencies

var _jasmineFix = require('jasmine-fix');

'use babel';

var fixtures = path.join(__dirname, 'fixtures');
var configStandardPath = path.join(fixtures, 'bad', 'stylelint-config-standard.css');
var warningPath = path.join(fixtures, 'warn', 'warn.css');
var invalidRulePath = path.join(fixtures, 'invalid-rule', 'styles.css');

var blockNoEmpty = 'Unexpected empty block (block-no-empty)';
var blockNoEmptyUrl = 'http://stylelint.io/user-guide/rules/block-no-empty';

describe('The stylelint provider for Linter', function () {
  var lint = require('../lib/index.js').provideLinter().lint;

  (0, _jasmineFix.beforeEach)(_asyncToGenerator(function* () {
    atom.workspace.destroyActivePaneItem();

    yield atom.packages.activatePackage('language-css');
    yield atom.packages.activatePackage('linter-stylelint');
  }));

  (0, _jasmineFix.it)('bundles and works with stylelint-config-standard', _asyncToGenerator(function* () {
    atom.config.set('linter-stylelint.useStandard', true);
    var editor = yield atom.workspace.open(configStandardPath);
    var messages = yield lint(editor);
    expect(messages.length).toBeGreaterThan(0);

    // test only the first error
    expect(messages[0].severity).toBe('error');
    expect(messages[0].excerpt).toBe(blockNoEmpty);
    expect(messages[0].url).toBe(blockNoEmptyUrl);
    expect(messages[0].location.file).toBe(configStandardPath);
    expect(messages[0].location.position).toEqual([[0, 5], [0, 7]]);
  }));

  (0, _jasmineFix.it)('reports rules set as warnings as a Warning', _asyncToGenerator(function* () {
    var editor = yield atom.workspace.open(warningPath);
    var messages = yield lint(editor);

    expect(messages.length).toBeGreaterThan(0);

    // test only the first error
    expect(messages[0].severity).toBe('warning');
    expect(messages[0].excerpt).toBe(blockNoEmpty);
    expect(messages[0].url).toBe(blockNoEmptyUrl);
    expect(messages[0].location.file).toMatch(/.+warn\.css$/);
    expect(messages[0].location.position).toEqual([[0, 5], [0, 7]]);
  }));

  (0, _jasmineFix.it)('finds nothing wrong with a valid file', _asyncToGenerator(function* () {
    var goodPath = path.join(fixtures, 'good', 'good.css');
    var editor = yield atom.workspace.open(goodPath);
    var messages = yield lint(editor);
    expect(messages.length).toBe(0);
  }));

  (0, _jasmineFix.it)('shows CSS syntax errors with an invalid file', _asyncToGenerator(function* () {
    var invalidPath = path.join(fixtures, 'invalid', 'invalid.css');
    var editor = yield atom.workspace.open(invalidPath);
    var messages = yield lint(editor);
    expect(messages.length).toBe(1);

    expect(messages[0].severity).toBe('error');
    expect(messages[0].excerpt).toBe('Unknown word (CssSyntaxError)');
    expect(messages[0].location.file).toBe(invalidPath);
    expect(messages[0].location.position).toEqual([[0, 0], [0, 3]]);
  }));

  (0, _jasmineFix.it)('shows an error on non-fatal stylelint runtime error', _asyncToGenerator(function* () {
    var text = 'Unexpected option value "foo" for rule "block-no-empty"';
    var editor = yield atom.workspace.open(invalidRulePath);
    var messages = yield lint(editor);
    expect(messages.length).toBe(1);

    expect(messages[0].severity).toBe('error');
    expect(messages[0].excerpt).toBe(text);
    expect(messages[0].location.file).toBe(invalidRulePath);
    expect(messages[0].location.position).toEqual([[0, 0], [0, 6]]);
  }));

  (0, _jasmineFix.it)('shows an error notification for a fatal stylelint runtime error', _asyncToGenerator(function* () {
    var invalidExtendsPath = path.join(fixtures, 'invalid-extends', 'styles.css');

    spyOn(atom.notifications, 'addError').andCallFake(function () {
      return {};
    });
    var addError = atom.notifications.addError;

    var editor = yield atom.workspace.open(invalidExtendsPath);
    var messages = yield lint(editor);
    expect(messages.length).toBe(0);

    var args = addError.mostRecentCall.args;
    expect(addError.calls.length).toBe(1);
    expect(args[0]).toBe('Unable to parse stylelint configuration');
    expect(args[1].detail).toContain('Could not find "some-module-that-will-never-exist".');
    expect(args[1].dismissable).toBe(true);
  }));

  (0, _jasmineFix.it)('shows an error notification with a broken syntax configuration', _asyncToGenerator(function* () {
    var invalidConfigPath = path.join(fixtures, 'invalid-config', 'styles.css');

    spyOn(atom.notifications, 'addError').andCallFake(function () {
      return {};
    });
    var addError = atom.notifications.addError;

    var editor = yield atom.workspace.open(invalidConfigPath);
    var messages = yield lint(editor);
    expect(messages.length).toBe(0);

    var args = addError.mostRecentCall.args;
    expect(addError.calls.length).toBe(1);
    expect(args[0]).toBe('Unable to parse stylelint configuration');
    expect(args[1].detail).toContain('>>>');
    expect(args[1].dismissable).toBe(true);
  }));

  (0, _jasmineFix.it)('disables when no configuration file is found', _asyncToGenerator(function* () {
    spyOn(atom.notifications, 'addError').andCallFake(function () {
      return {};
    });

    var editor = yield atom.workspace.open(configStandardPath);
    var messages = yield lint(editor);
    expect(messages.length).toBe(0);
    expect(atom.notifications.addError.calls.length).toBe(0);
  }));

  describe('ignores files when files are specified in ignoreFiles and', function () {
    var ignorePath = path.join(fixtures, 'ignore-files', 'styles.css');

    (0, _jasmineFix.it)('shows a message when asked to', _asyncToGenerator(function* () {
      atom.config.set('linter-stylelint.showIgnored', true);
      var editor = yield atom.workspace.open(ignorePath);
      var messages = yield lint(editor);
      expect(messages.length).toBe(1);

      expect(messages[0].severity).toBe('warning');
      expect(messages[0].excerpt).toBe('This file is ignored');
      expect(messages[0].location.file).toBe(ignorePath);
      expect(messages[0].location.position).toEqual([[0, 0], [0, 7]]);
    }));

    (0, _jasmineFix.it)("doesn't show a message when not asked to", _asyncToGenerator(function* () {
      atom.config.set('linter-stylelint.showIgnored', false);
      var editor = yield atom.workspace.open(ignorePath);
      var messages = yield lint(editor);
      expect(messages.length).toBe(0);
    }));
  });

  (0, _jasmineFix.it)("doesn't persist settings across runs", _asyncToGenerator(function* () {
    // The config for this folder breaks the block-no-empty rule
    var invalidEditor = yield atom.workspace.open(invalidRulePath);
    yield lint(invalidEditor);

    // While this file uses that rule
    var editor = yield atom.workspace.open(warningPath);
    var messages = yield lint(editor);
    expect(messages.length).toBeGreaterThan(0);

    // test only the first error
    expect(messages[0].severity).toBe('warning');
    expect(messages[0].excerpt).toBe(blockNoEmpty);
    expect(messages[0].url).toBe(blockNoEmptyUrl);
    expect(messages[0].location.file).toBe(warningPath);
    expect(messages[0].location.position).toEqual([[0, 5], [0, 7]]);
  }));

  describe('works with Less files and', function () {
    var lessDir = path.join(fixtures, 'less');
    var goodLess = path.join(lessDir, 'good.less');
    var badLess = path.join(lessDir, 'bad.less');

    (0, _jasmineFix.beforeEach)(_asyncToGenerator(function* () {
      yield atom.packages.activatePackage('language-less');
    }));

    (0, _jasmineFix.it)('shows lint messages when found', _asyncToGenerator(function* () {
      var editor = yield atom.workspace.open(badLess);
      var messages = yield lint(editor);
      expect(messages.length).toBeGreaterThan(0);

      // test only the first error
      expect(messages[0].severity).toBe('error');
      expect(messages[0].excerpt).toBe(blockNoEmpty);
      expect(messages[0].url).toBe(blockNoEmptyUrl);
      expect(messages[0].location.file).toBe(badLess);
      expect(messages[0].location.position).toEqual([[0, 5], [0, 7]]);
    }));

    (0, _jasmineFix.it)('finds nothing wrong with a valid file', _asyncToGenerator(function* () {
      var editor = yield atom.workspace.open(goodLess);
      var messages = yield lint(editor);
      expect(messages.length).toBe(0);
    }));
  });

  describe('works with PostCSS files and', function () {
    var goodPostCSS = path.join(fixtures, 'postcss', 'styles.pcss');
    var issuesPostCSS = path.join(fixtures, 'postcss', 'issues.pcss');

    (0, _jasmineFix.beforeEach)(_asyncToGenerator(function* () {
      yield atom.packages.activatePackage('language-postcss');
    }));

    (0, _jasmineFix.it)('shows lint messages when found', _asyncToGenerator(function* () {
      var editor = yield atom.workspace.open(issuesPostCSS);
      var messages = yield lint(editor);
      expect(messages.length).toBeGreaterThan(0);

      // test only the first error
      expect(messages[0].severity).toBe('error');
      expect(messages[0].excerpt).toBe(blockNoEmpty);
      expect(messages[0].url).toBe(blockNoEmptyUrl);
      expect(messages[0].location.file).toBe(issuesPostCSS);
      expect(messages[0].location.position).toEqual([[0, 5], [0, 7]]);
    }));

    (0, _jasmineFix.it)('finds nothing wrong with a valid file', _asyncToGenerator(function* () {
      var editor = yield atom.workspace.open(goodPostCSS);
      var messages = yield lint(editor);
      expect(messages.length).toBe(0);
    }));
  });

  describe('works with SugarSS files and', function () {
    var goodSugarSS = path.join(fixtures, 'sugarss', 'good.sss');
    var badSugarSS = path.join(fixtures, 'sugarss', 'bad.sss');

    (0, _jasmineFix.beforeEach)(_asyncToGenerator(function* () {
      yield atom.packages.activatePackage('language-postcss');
    }));

    (0, _jasmineFix.it)('shows lint messages when found', _asyncToGenerator(function* () {
      var editor = yield atom.workspace.open(badSugarSS);
      var messages = yield lint(editor);

      expect(messages[0].severity).toBe('error');
      expect(messages[0].excerpt).toBe('Expected a leading zero (number-leading-zero)');
      expect(messages[0].url).toBe('http://stylelint.io/user-guide/rules/number-leading-zero');
      expect(messages[0].location.file).toBe(badSugarSS);
      expect(messages[0].location.position).toEqual([[1, 38], [1, 40]]);
    }));

    (0, _jasmineFix.it)('finds nothing wrong with a valid file', _asyncToGenerator(function* () {
      var editor = yield atom.workspace.open(goodSugarSS);
      var messages = yield lint(editor);
      expect(messages.length).toBe(0);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,