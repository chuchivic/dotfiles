'use babel';
var OutputView = require('../../lib/views/output-view');

var text = "foo bar baz";
var view = new OutputView();

var getContent = function getContent() {
  return view.element.querySelector('#content');
};

describe("OutputView", function () {
  it("displays a default message", function () {
    expect(getContent().textContent).toContain('Nothing new to show');
  });

  it("displays the new message when ::finish is called", function () {
    view.showContent(text);
    expect(getContent().textContent).toBe(text);
  });

  it("resets its html property when ::reset is called", function () {
    view.showContent(text);
    view.reset();
    expect(getContent().textContent).toContain('Nothing new to show');
  });

  describe("::showContent", function () {
    it("accepts terminal color encoded text and transforms it into html", function () {
      view.showContent("foo[m * [32mmaster[m");
      expect(getContent().innerHTML).toBe('foo * <span style="color:#0A0">master</span>');
    });

    it("returns the instance of the view to allow method chaining", function () {
      view.showContent(text);
      expect(getContent().textContent).toBe(text);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2plc3VzLy5hdG9tL3BhY2thZ2VzL2dpdC1wbHVzL3NwZWMvdmlld3Mvb3V0cHV0LXZpZXctc3BlYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUE7QUFDWCxJQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsNkJBQTZCLENBQUMsQ0FBQTs7QUFFekQsSUFBTSxJQUFJLEdBQUcsYUFBYSxDQUFBO0FBQzFCLElBQU0sSUFBSSxHQUFHLElBQUksVUFBVSxFQUFBLENBQUE7O0FBRTNCLElBQU0sVUFBVSxHQUFHLFNBQWIsVUFBVTtTQUFTLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQztDQUFBLENBQUE7O0FBRS9ELFFBQVEsQ0FBQyxZQUFZLEVBQUUsWUFBTTtBQUMzQixJQUFFLENBQUMsNEJBQTRCLEVBQUUsWUFBTTtBQUNyQyxVQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLENBQUE7R0FDbEUsQ0FBQyxDQUFBOztBQUVGLElBQUUsQ0FBQyxrREFBa0QsRUFBRSxZQUFPO0FBQzVELFFBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDdEIsVUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtHQUM1QyxDQUFDLENBQUE7O0FBRUYsSUFBRSxDQUFDLGlEQUFpRCxFQUFFLFlBQU07QUFDMUQsUUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUN0QixRQUFJLENBQUMsS0FBSyxFQUFFLENBQUE7QUFDWixVQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLENBQUE7R0FDbEUsQ0FBQyxDQUFBOztBQUVGLFVBQVEsQ0FBQyxlQUFlLEVBQUUsWUFBTTtBQUM5QixNQUFFLENBQUMsaUVBQWlFLEVBQUUsWUFBTTtBQUMxRSxVQUFJLENBQUMsV0FBVyxDQUFDLHlCQUF5QixDQUFDLENBQUE7QUFDM0MsWUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFBO0tBQ3BGLENBQUMsQ0FBQTs7QUFFRixNQUFFLENBQUMsMkRBQTJELEVBQUUsWUFBTTtBQUNwRSxVQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ3RCLFlBQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7S0FDNUMsQ0FBQyxDQUFBO0dBQ0gsQ0FBQyxDQUFBO0NBQ0gsQ0FBQyxDQUFBIiwiZmlsZSI6Ii9ob21lL2plc3VzLy5hdG9tL3BhY2thZ2VzL2dpdC1wbHVzL3NwZWMvdmlld3Mvb3V0cHV0LXZpZXctc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnXG5jb25zdCBPdXRwdXRWaWV3ID0gcmVxdWlyZSgnLi4vLi4vbGliL3ZpZXdzL291dHB1dC12aWV3JylcblxuY29uc3QgdGV4dCA9IFwiZm9vIGJhciBiYXpcIlxuY29uc3QgdmlldyA9IG5ldyBPdXRwdXRWaWV3XG5cbmNvbnN0IGdldENvbnRlbnQgPSAoKSA9PiB2aWV3LmVsZW1lbnQucXVlcnlTZWxlY3RvcignI2NvbnRlbnQnKVxuXG5kZXNjcmliZShcIk91dHB1dFZpZXdcIiwgKCkgPT4ge1xuICBpdChcImRpc3BsYXlzIGEgZGVmYXVsdCBtZXNzYWdlXCIsICgpID0+IHtcbiAgICBleHBlY3QoZ2V0Q29udGVudCgpLnRleHRDb250ZW50KS50b0NvbnRhaW4oJ05vdGhpbmcgbmV3IHRvIHNob3cnKVxuICB9KVxuXG4gIGl0KFwiZGlzcGxheXMgdGhlIG5ldyBtZXNzYWdlIHdoZW4gOjpmaW5pc2ggaXMgY2FsbGVkXCIsICgpID0+ICB7XG4gICAgdmlldy5zaG93Q29udGVudCh0ZXh0KVxuICAgIGV4cGVjdChnZXRDb250ZW50KCkudGV4dENvbnRlbnQpLnRvQmUodGV4dClcbiAgfSlcblxuICBpdChcInJlc2V0cyBpdHMgaHRtbCBwcm9wZXJ0eSB3aGVuIDo6cmVzZXQgaXMgY2FsbGVkXCIsICgpID0+IHtcbiAgICB2aWV3LnNob3dDb250ZW50KHRleHQpXG4gICAgdmlldy5yZXNldCgpXG4gICAgZXhwZWN0KGdldENvbnRlbnQoKS50ZXh0Q29udGVudCkudG9Db250YWluKCdOb3RoaW5nIG5ldyB0byBzaG93JylcbiAgfSlcblxuICBkZXNjcmliZShcIjo6c2hvd0NvbnRlbnRcIiwgKCkgPT4ge1xuICAgIGl0KFwiYWNjZXB0cyB0ZXJtaW5hbCBjb2xvciBlbmNvZGVkIHRleHQgYW5kIHRyYW5zZm9ybXMgaXQgaW50byBodG1sXCIsICgpID0+IHtcbiAgICAgIHZpZXcuc2hvd0NvbnRlbnQoXCJmb29cdTAwMWJbbSAqIFx1MDAxYlszMm1tYXN0ZXJcdTAwMWJbbVwiKVxuICAgICAgZXhwZWN0KGdldENvbnRlbnQoKS5pbm5lckhUTUwpLnRvQmUoJ2ZvbyAqIDxzcGFuIHN0eWxlPVwiY29sb3I6IzBBMFwiPm1hc3Rlcjwvc3Bhbj4nKVxuICAgIH0pXG5cbiAgICBpdChcInJldHVybnMgdGhlIGluc3RhbmNlIG9mIHRoZSB2aWV3IHRvIGFsbG93IG1ldGhvZCBjaGFpbmluZ1wiLCAoKSA9PiB7XG4gICAgICB2aWV3LnNob3dDb250ZW50KHRleHQpXG4gICAgICBleHBlY3QoZ2V0Q29udGVudCgpLnRleHRDb250ZW50KS50b0JlKHRleHQpXG4gICAgfSlcbiAgfSlcbn0pXG4iXX0=