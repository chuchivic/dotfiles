
"use strict";
var _ = require("lodash");
var balancedMatch = require("balanced-match");

/**
 * Replace all of the characters that are arguments to a certain
 * CSS function with some innocuous character.
 *
 * This is useful if you need to use a RegExp to find a string
 * but want to ignore matches in certain functions (e.g. `url()`,
 * which might contain all kinds of false positives).
 *
 * For example:
 * blurFunctionArguments("abc url(abc) abc", "url") === "abc url(```) abc"
 *
 * @param {string} source
 * @param {string} functionName
 * @param {[string]} blurChar="`"
 * @return {string} - The result string, with the function arguments "blurred"
 */
module.exports = function (source, /*: string*/
functionName /*: string*/
) /*: string*/{
  var blurChar /*: string*/ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "`";

  var nameWithParen = functionName.toLowerCase() + "(";
  var lowerCaseSource = source.toLowerCase();
  if (!_.includes(lowerCaseSource, nameWithParen)) {
    return source;
  }

  var functionNameLength /*: number*/ = functionName.length;

  var result = source;
  var searchStartIndex = 0;
  while (lowerCaseSource.indexOf(nameWithParen, searchStartIndex) !== -1) {
    var openingParenIndex = lowerCaseSource.indexOf(nameWithParen, searchStartIndex) + functionNameLength;
    var closingParenIndex = balancedMatch("(", ")", lowerCaseSource.slice(openingParenIndex)).end + openingParenIndex;
    var argumentsLength = closingParenIndex - openingParenIndex - 1;
    result = result.slice(0, openingParenIndex + 1) + _.repeat(blurChar, argumentsLength) + result.slice(closingParenIndex);
    searchStartIndex = closingParenIndex;
  }
  return result;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2plc3VzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1zdHlsZWxpbnQvbm9kZV9tb2R1bGVzL3N0eWxlbGludC9saWIvdXRpbHMvYmx1ckZ1bmN0aW9uQXJndW1lbnRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxZQUFZLENBQUM7QUFDYixJQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDNUIsSUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCaEQsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUNmLE1BQU07QUFDTixZQUFZO2NBQ0M7QUFDYixNQUFNLFFBQVEsZ0JBQ1osU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLFNBQVMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDOztBQUUxRSxNQUFNLGFBQWEsR0FBTSxZQUFZLENBQUMsV0FBVyxFQUFFLE1BQUcsQ0FBQztBQUN2RCxNQUFNLGVBQWUsR0FBRyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDN0MsTUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLGFBQWEsQ0FBQyxFQUFFO0FBQy9DLFdBQU8sTUFBTSxDQUFDO0dBQ2Y7O0FBRUQsTUFBTSxrQkFBa0IsZ0JBQWdCLFlBQVksQ0FBQyxNQUFNLENBQUM7O0FBRTVELE1BQUksTUFBTSxHQUFHLE1BQU0sQ0FBQztBQUNwQixNQUFJLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUN6QixTQUFPLGVBQWUsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7QUFDdEUsUUFBTSxpQkFBaUIsR0FDckIsZUFBZSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsZ0JBQWdCLENBQUMsR0FDeEQsa0JBQWtCLENBQUM7QUFDckIsUUFBTSxpQkFBaUIsR0FDckIsYUFBYSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsZUFBZSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUNyRSxpQkFBaUIsQ0FBQztBQUNwQixRQUFNLGVBQWUsR0FBRyxpQkFBaUIsR0FBRyxpQkFBaUIsR0FBRyxDQUFDLENBQUM7QUFDbEUsVUFBTSxHQUNKLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLGlCQUFpQixHQUFHLENBQUMsQ0FBQyxHQUN0QyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxlQUFlLENBQUMsR0FDbkMsTUFBTSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ2xDLG9CQUFnQixHQUFHLGlCQUFpQixDQUFDO0dBQ3RDO0FBQ0QsU0FBTyxNQUFNLENBQUM7Q0FDZixDQUFDIiwiZmlsZSI6Ii9ob21lL2plc3VzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1zdHlsZWxpbnQvbm9kZV9tb2R1bGVzL3N0eWxlbGludC9saWIvdXRpbHMvYmx1ckZ1bmN0aW9uQXJndW1lbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblwidXNlIHN0cmljdFwiO1xuY29uc3QgXyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XG5jb25zdCBiYWxhbmNlZE1hdGNoID0gcmVxdWlyZShcImJhbGFuY2VkLW1hdGNoXCIpO1xuXG4vKipcbiAqIFJlcGxhY2UgYWxsIG9mIHRoZSBjaGFyYWN0ZXJzIHRoYXQgYXJlIGFyZ3VtZW50cyB0byBhIGNlcnRhaW5cbiAqIENTUyBmdW5jdGlvbiB3aXRoIHNvbWUgaW5ub2N1b3VzIGNoYXJhY3Rlci5cbiAqXG4gKiBUaGlzIGlzIHVzZWZ1bCBpZiB5b3UgbmVlZCB0byB1c2UgYSBSZWdFeHAgdG8gZmluZCBhIHN0cmluZ1xuICogYnV0IHdhbnQgdG8gaWdub3JlIG1hdGNoZXMgaW4gY2VydGFpbiBmdW5jdGlvbnMgKGUuZy4gYHVybCgpYCxcbiAqIHdoaWNoIG1pZ2h0IGNvbnRhaW4gYWxsIGtpbmRzIG9mIGZhbHNlIHBvc2l0aXZlcykuXG4gKlxuICogRm9yIGV4YW1wbGU6XG4gKiBibHVyRnVuY3Rpb25Bcmd1bWVudHMoXCJhYmMgdXJsKGFiYykgYWJjXCIsIFwidXJsXCIpID09PSBcImFiYyB1cmwoYGBgKSBhYmNcIlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2VcbiAqIEBwYXJhbSB7c3RyaW5nfSBmdW5jdGlvbk5hbWVcbiAqIEBwYXJhbSB7W3N0cmluZ119IGJsdXJDaGFyPVwiYFwiXG4gKiBAcmV0dXJuIHtzdHJpbmd9IC0gVGhlIHJlc3VsdCBzdHJpbmcsIHdpdGggdGhlIGZ1bmN0aW9uIGFyZ3VtZW50cyBcImJsdXJyZWRcIlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFxuICBzb3VyY2UgLyo6IHN0cmluZyovLFxuICBmdW5jdGlvbk5hbWUgLyo6IHN0cmluZyovXG4pIC8qOiBzdHJpbmcqLyB7XG4gIGNvbnN0IGJsdXJDaGFyIC8qOiBzdHJpbmcqLyA9XG4gICAgYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBcImBcIjtcblxuICBjb25zdCBuYW1lV2l0aFBhcmVuID0gYCR7ZnVuY3Rpb25OYW1lLnRvTG93ZXJDYXNlKCl9KGA7XG4gIGNvbnN0IGxvd2VyQ2FzZVNvdXJjZSA9IHNvdXJjZS50b0xvd2VyQ2FzZSgpO1xuICBpZiAoIV8uaW5jbHVkZXMobG93ZXJDYXNlU291cmNlLCBuYW1lV2l0aFBhcmVuKSkge1xuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICBjb25zdCBmdW5jdGlvbk5hbWVMZW5ndGggLyo6IG51bWJlciovID0gZnVuY3Rpb25OYW1lLmxlbmd0aDtcblxuICBsZXQgcmVzdWx0ID0gc291cmNlO1xuICBsZXQgc2VhcmNoU3RhcnRJbmRleCA9IDA7XG4gIHdoaWxlIChsb3dlckNhc2VTb3VyY2UuaW5kZXhPZihuYW1lV2l0aFBhcmVuLCBzZWFyY2hTdGFydEluZGV4KSAhPT0gLTEpIHtcbiAgICBjb25zdCBvcGVuaW5nUGFyZW5JbmRleCA9XG4gICAgICBsb3dlckNhc2VTb3VyY2UuaW5kZXhPZihuYW1lV2l0aFBhcmVuLCBzZWFyY2hTdGFydEluZGV4KSArXG4gICAgICBmdW5jdGlvbk5hbWVMZW5ndGg7XG4gICAgY29uc3QgY2xvc2luZ1BhcmVuSW5kZXggPVxuICAgICAgYmFsYW5jZWRNYXRjaChcIihcIiwgXCIpXCIsIGxvd2VyQ2FzZVNvdXJjZS5zbGljZShvcGVuaW5nUGFyZW5JbmRleCkpLmVuZCArXG4gICAgICBvcGVuaW5nUGFyZW5JbmRleDtcbiAgICBjb25zdCBhcmd1bWVudHNMZW5ndGggPSBjbG9zaW5nUGFyZW5JbmRleCAtIG9wZW5pbmdQYXJlbkluZGV4IC0gMTtcbiAgICByZXN1bHQgPVxuICAgICAgcmVzdWx0LnNsaWNlKDAsIG9wZW5pbmdQYXJlbkluZGV4ICsgMSkgK1xuICAgICAgXy5yZXBlYXQoYmx1ckNoYXIsIGFyZ3VtZW50c0xlbmd0aCkgK1xuICAgICAgcmVzdWx0LnNsaWNlKGNsb3NpbmdQYXJlbkluZGV4KTtcbiAgICBzZWFyY2hTdGFydEluZGV4ID0gY2xvc2luZ1BhcmVuSW5kZXg7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iXX0=