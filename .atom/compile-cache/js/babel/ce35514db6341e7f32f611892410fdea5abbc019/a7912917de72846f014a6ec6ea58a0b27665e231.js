
"use strict";

/**
 * Compares a string to a second value that, if it fits a certain convention,
 * is converted to a regular expression before the comparison.
 * If it doesn't fit the convention, then two strings are compared.
 *
 * Any strings starting and ending with `/` are interpreted
 * as regular expressions.
 */
module.exports = function matchesStringOrRegExp(input, /*: string | Array<string>*/
comparison /*: string | Array<string>*/
) /*: false | { match: string, pattern: string}*/{
  if (!Array.isArray(input)) {
    return testAgainstStringOrArray(input, comparison);
  }

  for (var inputItem of input) {
    var testResult = testAgainstStringOrArray(inputItem, comparison);
    if (testResult) {
      return testResult;
    }
  }

  return false;
};

function testAgainstStringOrArray(value, comparison) {
  if (!Array.isArray(comparison)) {
    return testAgainstString(value, comparison);
  }

  for (var comparisonItem of comparison) {
    var testResult = testAgainstString(value, comparisonItem);
    if (testResult) {
      return testResult;
    }
  }
  return false;
}

function testAgainstString(value, comparison) {
  var comparisonIsRegex = comparison[0] === "/" && comparison[comparison.length - 1] === "/";

  if (comparisonIsRegex) {
    var valueMatches = new RegExp(comparison.slice(1, -1)).test(value);
    return valueMatches ? { match: value, pattern: comparison } : false;
  }

  return value === comparison ? { match: value, pattern: comparison } : false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2plc3VzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1zdHlsZWxpbnQvbm9kZV9tb2R1bGVzL3N0eWxlbGludC9saWIvdXRpbHMvbWF0Y2hlc1N0cmluZ09yUmVnRXhwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxZQUFZLENBQUE7Ozs7Ozs7Ozs7QUFVWixNQUFNLENBQUMsT0FBTyxHQUFHLFNBQVMscUJBQXFCLENBQzdDLEtBQUs7QUFDTCxVQUFVO2lEQUNxQztBQUMvQyxNQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUN6QixXQUFPLHdCQUF3QixDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQTtHQUNuRDs7QUFFRCxPQUFLLElBQU0sU0FBUyxJQUFJLEtBQUssRUFBRTtBQUM3QixRQUFNLFVBQVUsR0FBRyx3QkFBd0IsQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUE7QUFDbEUsUUFBSSxVQUFVLEVBQUU7QUFDZCxhQUFPLFVBQVUsQ0FBQTtLQUNsQjtHQUNGOztBQUVELFNBQU8sS0FBSyxDQUFBO0NBQ2IsQ0FBQTs7QUFFRCxTQUFTLHdCQUF3QixDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUU7QUFDbkQsTUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUU7QUFDOUIsV0FBTyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUE7R0FDNUM7O0FBRUQsT0FBSyxJQUFNLGNBQWMsSUFBSSxVQUFVLEVBQUU7QUFDdkMsUUFBTSxVQUFVLEdBQUcsaUJBQWlCLENBQUMsS0FBSyxFQUFFLGNBQWMsQ0FBQyxDQUFBO0FBQzNELFFBQUksVUFBVSxFQUFFO0FBQ2QsYUFBTyxVQUFVLENBQUE7S0FDbEI7R0FDRjtBQUNELFNBQU8sS0FBSyxDQUFBO0NBQ2I7O0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFO0FBQzVDLE1BQU0saUJBQWlCLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUE7O0FBRTVGLE1BQUksaUJBQWlCLEVBQUU7QUFDckIsUUFBTSxZQUFZLEdBQUcsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUNwRSxXQUFPLFlBQVksR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEtBQUssQ0FBQTtHQUNwRTs7QUFFRCxTQUFPLEtBQUssS0FBSyxVQUFVLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxLQUFLLENBQUE7Q0FDNUUiLCJmaWxlIjoiL2hvbWUvamVzdXMvLmF0b20vcGFja2FnZXMvbGludGVyLXN0eWxlbGludC9ub2RlX21vZHVsZXMvc3R5bGVsaW50L2xpYi91dGlscy9tYXRjaGVzU3RyaW5nT3JSZWdFeHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXCJ1c2Ugc3RyaWN0XCJcblxuLyoqXG4gKiBDb21wYXJlcyBhIHN0cmluZyB0byBhIHNlY29uZCB2YWx1ZSB0aGF0LCBpZiBpdCBmaXRzIGEgY2VydGFpbiBjb252ZW50aW9uLFxuICogaXMgY29udmVydGVkIHRvIGEgcmVndWxhciBleHByZXNzaW9uIGJlZm9yZSB0aGUgY29tcGFyaXNvbi5cbiAqIElmIGl0IGRvZXNuJ3QgZml0IHRoZSBjb252ZW50aW9uLCB0aGVuIHR3byBzdHJpbmdzIGFyZSBjb21wYXJlZC5cbiAqXG4gKiBBbnkgc3RyaW5ncyBzdGFydGluZyBhbmQgZW5kaW5nIHdpdGggYC9gIGFyZSBpbnRlcnByZXRlZFxuICogYXMgcmVndWxhciBleHByZXNzaW9ucy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtYXRjaGVzU3RyaW5nT3JSZWdFeHAoXG4gIGlucHV0Lyo6IHN0cmluZyB8IEFycmF5PHN0cmluZz4qLyxcbiAgY29tcGFyaXNvbi8qOiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+Ki9cbikvKjogZmFsc2UgfCB7IG1hdGNoOiBzdHJpbmcsIHBhdHRlcm46IHN0cmluZ30qLyB7XG4gIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICByZXR1cm4gdGVzdEFnYWluc3RTdHJpbmdPckFycmF5KGlucHV0LCBjb21wYXJpc29uKVxuICB9XG5cbiAgZm9yIChjb25zdCBpbnB1dEl0ZW0gb2YgaW5wdXQpIHtcbiAgICBjb25zdCB0ZXN0UmVzdWx0ID0gdGVzdEFnYWluc3RTdHJpbmdPckFycmF5KGlucHV0SXRlbSwgY29tcGFyaXNvbilcbiAgICBpZiAodGVzdFJlc3VsdCkge1xuICAgICAgcmV0dXJuIHRlc3RSZXN1bHRcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gdGVzdEFnYWluc3RTdHJpbmdPckFycmF5KHZhbHVlLCBjb21wYXJpc29uKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShjb21wYXJpc29uKSkge1xuICAgIHJldHVybiB0ZXN0QWdhaW5zdFN0cmluZyh2YWx1ZSwgY29tcGFyaXNvbilcbiAgfVxuXG4gIGZvciAoY29uc3QgY29tcGFyaXNvbkl0ZW0gb2YgY29tcGFyaXNvbikge1xuICAgIGNvbnN0IHRlc3RSZXN1bHQgPSB0ZXN0QWdhaW5zdFN0cmluZyh2YWx1ZSwgY29tcGFyaXNvbkl0ZW0pXG4gICAgaWYgKHRlc3RSZXN1bHQpIHtcbiAgICAgIHJldHVybiB0ZXN0UmVzdWx0XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiB0ZXN0QWdhaW5zdFN0cmluZyh2YWx1ZSwgY29tcGFyaXNvbikge1xuICBjb25zdCBjb21wYXJpc29uSXNSZWdleCA9IGNvbXBhcmlzb25bMF0gPT09IFwiL1wiICYmIGNvbXBhcmlzb25bY29tcGFyaXNvbi5sZW5ndGggLSAxXSA9PT0gXCIvXCJcblxuICBpZiAoY29tcGFyaXNvbklzUmVnZXgpIHtcbiAgICBjb25zdCB2YWx1ZU1hdGNoZXMgPSBuZXcgUmVnRXhwKGNvbXBhcmlzb24uc2xpY2UoMSwgLTEpKS50ZXN0KHZhbHVlKVxuICAgIHJldHVybiB2YWx1ZU1hdGNoZXMgPyB7IG1hdGNoOiB2YWx1ZSwgcGF0dGVybjogY29tcGFyaXNvbiB9IDogZmFsc2VcbiAgfVxuXG4gIHJldHVybiB2YWx1ZSA9PT0gY29tcGFyaXNvbiA/IHsgbWF0Y2g6IHZhbHVlLCBwYXR0ZXJuOiBjb21wYXJpc29uIH0gOiBmYWxzZVxufVxuIl19