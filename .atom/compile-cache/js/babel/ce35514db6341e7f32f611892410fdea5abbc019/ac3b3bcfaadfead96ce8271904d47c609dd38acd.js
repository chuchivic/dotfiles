
"use strict";
var path = require("path");
var formatters /*: Object*/ = require("./formatters");
var createStylelint = require("./createStylelint");
var globby /*: Function*/ = require("globby");
var needlessDisables /*: Function*/ = require("./needlessDisables");
var alwaysIgnoredGlobs = require("./alwaysIgnoredGlobs");
var FileCache = require("./utils/FileCache");
var debug = require("debug")("stylelint:standalone");
var pkg = require("../package.json");
var hash = require("./utils/hash");

/*::type CssSyntaxErrorT = {
  column: number;
  file?: string;
  input: {
    column: number;
    file?: string;
    line: number;
    source: string;
  };
  line: number;
  message: string;
  name: string;
  reason: string;
  source: string;
}*/

module.exports = function (options /*: stylelint$standaloneOptions */) /*: Promise<stylelint$standaloneReturnValue>*/{
  var files = options.files;
  var code = options.code;
  var codeFilename = options.codeFilename;
  var config = options.config;
  var configFile = options.configFile;
  var configBasedir = options.configBasedir;
  var configOverrides = options.configOverrides;
  var ignoreDisables = options.ignoreDisables;
  var ignorePath = options.ignorePath;
  var reportNeedlessDisables = options.reportNeedlessDisables;
  var formatter = options.formatter;
  var syntax = options.syntax;
  var customSyntax = options.customSyntax;
  var allowEmptyInput = options.allowEmptyInput;
  var cacheLocation = options.cacheLocation;
  var useCache = options.cache || false;
  var fileCache = undefined;

  var startTime = Date.now();

  var isValidCode = typeof code === "string";
  if (!files && !isValidCode || files && (code || isValidCode)) {
    throw new Error("You must pass stylelint a `files` glob or a `code` string, though not both");
  }

  var formatterFunction = undefined;
  if (typeof formatter === "string") {
    formatterFunction = formatters[formatter];
    if (formatterFunction === undefined) {
      return Promise.reject(new Error("You must use a valid formatter option: 'json', 'string', 'verbose', or a function"));
    }
  } else if (typeof formatter === "function") {
    formatterFunction = formatter;
  } else {
    formatterFunction = formatters.json;
  }

  var stylelint = createStylelint({
    config: config,
    configFile: configFile,
    configBasedir: configBasedir,
    configOverrides: configOverrides,
    ignoreDisables: ignoreDisables,
    ignorePath: ignorePath,
    reportNeedlessDisables: reportNeedlessDisables,
    syntax: syntax,
    customSyntax: customSyntax
  });

  if (!files) {
    var absoluteCodeFilename = codeFilename !== undefined && !path.isAbsolute(codeFilename) ? path.join(process.cwd(), codeFilename) : codeFilename;
    return stylelint._lintSource({
      code: code,
      codeFilename: absoluteCodeFilename
    }).then(function (postcssResult) {
      return stylelint._createStylelintResult(postcssResult);
    })["catch"](handleError).then(function (stylelintResult) {
      return prepareReturnValue([stylelintResult]);
    });
  }

  var fileList = files;
  if (typeof fileList === "string") {
    fileList = [fileList];
  }
  fileList = fileList.concat(alwaysIgnoredGlobs.map(function (file) {
    return "!" + file;
  }));

  if (useCache) {
    var stylelintVersion = pkg.version;
    var hashOfConfig = hash(stylelintVersion + "_" + JSON.stringify(config));
    fileCache = new FileCache(cacheLocation, hashOfConfig);
  } else {
    // No need to calculate hash here, we just want to delete cache file.
    fileCache = new FileCache(cacheLocation);
    // Remove cache file if cache option is disabled
    fileCache.destroy();
  }

  return globby(fileList).then(function (filePaths) {
    if (!filePaths.length) {
      if (allowEmptyInput === undefined || !allowEmptyInput) {
        var message = (function (files) {
          if (typeof files === "string") {
            return files + " does";
          }
          // seperate files into last (last file) and initial) all the others
          var initial = files.slice(0);
          var last = initial.pop();
          // join into a comma seperated string of file names
          var ending = files.length > 1 ? "and " + last + " do" : last + " does";
          return (initial.join(", ") + " " + ending).trim();
        })(files) + " not match any files";

        var err /*: Object*/ = new Error(message);
        err.code = 80;
        throw err;
      } else {
        return Promise.all([]);
      }
    }

    var absoluteFilePaths = filePaths.map(function (filePath) {
      var absoluteFilepath = !path.isAbsolute(filePath) ? path.join(process.cwd(), filePath) : path.normalize(filePath);
      return absoluteFilepath;
    });

    if (useCache) {
      absoluteFilePaths = absoluteFilePaths.filter(fileCache.hasFileChanged.bind(fileCache));
    }

    var getStylelintResults = absoluteFilePaths.map(function (absoluteFilepath) {
      debug("Processing " + absoluteFilepath);
      return stylelint._lintSource({
        filePath: absoluteFilepath
      }).then(function (postcssResult) {
        if (postcssResult.stylelint.stylelintError && useCache) {
          debug(absoluteFilepath + " contains linting errors and will not be cached.");
          fileCache.removeEntry(absoluteFilepath);
        }
        return stylelint._createStylelintResult(postcssResult, absoluteFilepath);
      })["catch"](handleError);
    });

    return Promise.all(getStylelintResults);
  }).then(prepareReturnValue);

  function prepareReturnValue(stylelintResults /*: Array<stylelint$result>*/) /*: stylelint$standaloneReturnValue*/{
    var errored = stylelintResults.some(function (result) {
      return result.errored;
    });
    var returnValue /*: stylelint$standaloneReturnValue*/ = {
      errored: errored,
      output: formatterFunction(stylelintResults),
      results: stylelintResults
    };
    if (reportNeedlessDisables) {
      returnValue.needlessDisables = needlessDisables(stylelintResults);
    }
    if (useCache) {
      fileCache.reconcile();
    }
    debug("Linting complete in " + (Date.now() - startTime) + "ms");
    return returnValue;
  }
};

function handleError(error /*: Object*/) {
  if (error.name === "CssSyntaxError") {
    return convertCssSyntaxErrorToResult(error);
  } else {
    throw error;
  }
}

// By converting syntax errors to stylelint results,
// we can control their appearance in the formatted output
// and other tools like editor plugins can decide how to
// present them, as well
function convertCssSyntaxErrorToResult(error /*: CssSyntaxErrorT*/) /*: stylelint$result*/{
  if (error.name !== "CssSyntaxError") {
    throw error;
  }

  return {
    source: error.file || "<input css 1>",
    deprecations: [],
    invalidOptionWarnings: [],
    errored: true,
    warnings: [{
      line: error.line,
      column: error.column,
      rule: error.name,
      severity: "error",
      text: error.reason + " (" + error.name + ")"
    }]
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,