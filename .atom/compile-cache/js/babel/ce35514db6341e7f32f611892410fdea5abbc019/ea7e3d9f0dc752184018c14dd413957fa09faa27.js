
"use strict";
var _ = require("lodash");

module.exports = function (stylelint, /*: stylelint$internalApi*/
postcssResult, /*: Object*/
filePath /*:: ?: string*/
) /*: Promise<stylelint$result>*/{
  var source = !postcssResult.root.source ? undefined : postcssResult.root.source.input.file || postcssResult.root.source.input.id;

  // Strip out deprecation warnings from the messages
  var deprecationMessages = _.remove(postcssResult.messages, { stylelintType: "deprecation" });
  var deprecations = deprecationMessages.map(function (deprecationMessage) {
    return {
      text: deprecationMessage.text,
      reference: deprecationMessage.stylelintReference
    };
  });

  // Also strip out invalid options
  var invalidOptionMessages = _.remove(postcssResult.messages, { stylelintType: "invalidOption" });
  var invalidOptionWarnings = invalidOptionMessages.map(function (invalidOptionMessage) {
    return {
      text: invalidOptionMessage.text
    };
  });

  // This defines the stylelint result object that formatters receive
  var stylelintResult = {
    source: source,
    deprecations: deprecations,
    invalidOptionWarnings: invalidOptionWarnings,
    errored: postcssResult.stylelint.stylelintError,
    warnings: postcssResult.messages.map(function (message) {
      return {
        line: message.line,
        column: message.column,
        rule: message.rule,
        severity: message.severity,
        text: message.text
      };
    }),
    ignored: postcssResult.stylelint.ignored,
    _postcssResult: postcssResult
  };

  return stylelint.getConfigForFile(filePath).then(function (result) {
    var config = result.config;

    if (config.resultProcessors) {
      config.resultProcessors.forEach(function (resultProcessor) {
        // Result processors might just mutate the result object,
        // or might return a new one
        var returned = resultProcessor(stylelintResult, source);
        if (returned) {
          stylelintResult = returned;
        }
      });
    }

    return stylelintResult;
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2plc3VzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1zdHlsZWxpbnQvbm9kZV9tb2R1bGVzL3N0eWxlbGludC9saWIvY3JlYXRlU3R5bGVsaW50UmVzdWx0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxZQUFZLENBQUE7QUFDWixJQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUE7O0FBRTNCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFDZixTQUFTO0FBQ1QsYUFBYTtBQUNiLFFBQVE7aUNBQ3VCO0FBQy9CLE1BQU0sTUFBTSxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQTs7O0FBR2xJLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUE7QUFDOUYsTUFBTSxZQUFZLEdBQUcsbUJBQW1CLENBQUMsR0FBRyxDQUFDLFVBQUEsa0JBQWtCLEVBQUk7QUFDakUsV0FBTztBQUNMLFVBQUksRUFBRSxrQkFBa0IsQ0FBQyxJQUFJO0FBQzdCLGVBQVMsRUFBRSxrQkFBa0IsQ0FBQyxrQkFBa0I7S0FDakQsQ0FBQTtHQUNGLENBQUMsQ0FBQTs7O0FBR0YsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsRUFBRSxhQUFhLEVBQUUsZUFBZSxFQUFFLENBQUMsQ0FBQTtBQUNsRyxNQUFNLHFCQUFxQixHQUFHLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxVQUFBLG9CQUFvQixFQUFJO0FBQzlFLFdBQU87QUFDTCxVQUFJLEVBQUUsb0JBQW9CLENBQUMsSUFBSTtLQUNoQyxDQUFBO0dBQ0YsQ0FBQyxDQUFBOzs7QUFHRixNQUFJLGVBQWUsR0FBRztBQUNwQixVQUFNLEVBQU4sTUFBTTtBQUNOLGdCQUFZLEVBQVosWUFBWTtBQUNaLHlCQUFxQixFQUFyQixxQkFBcUI7QUFDckIsV0FBTyxFQUFFLGFBQWEsQ0FBQyxTQUFTLENBQUMsY0FBYztBQUMvQyxZQUFRLEVBQUUsYUFBYSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBQSxPQUFPLEVBQUk7QUFDOUMsYUFBTztBQUNMLFlBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtBQUNsQixjQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU07QUFDdEIsWUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJO0FBQ2xCLGdCQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7QUFDMUIsWUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJO09BQ25CLENBQUE7S0FDRixDQUFDO0FBQ0YsV0FBTyxFQUFFLGFBQWEsQ0FBQyxTQUFTLENBQUMsT0FBTztBQUN4QyxrQkFBYyxFQUFFLGFBQWE7R0FDOUIsQ0FBQTs7QUFFRCxTQUFPLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxNQUFNLEVBQUs7QUFDM0QsUUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQTs7QUFFNUIsUUFBSSxNQUFNLENBQUMsZ0JBQWdCLEVBQUU7QUFDM0IsWUFBTSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxVQUFBLGVBQWUsRUFBSTs7O0FBR2pELFlBQU0sUUFBUSxHQUFHLGVBQWUsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUE7QUFDekQsWUFBSSxRQUFRLEVBQUU7QUFDWix5QkFBZSxHQUFHLFFBQVEsQ0FBQTtTQUMzQjtPQUNGLENBQUMsQ0FBQTtLQUNIOztBQUVELFdBQU8sZUFBZSxDQUFBO0dBQ3ZCLENBQUMsQ0FBQTtDQUNILENBQUEiLCJmaWxlIjoiL2hvbWUvamVzdXMvLmF0b20vcGFja2FnZXMvbGludGVyLXN0eWxlbGludC9ub2RlX21vZHVsZXMvc3R5bGVsaW50L2xpYi9jcmVhdGVTdHlsZWxpbnRSZXN1bHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXCJ1c2Ugc3RyaWN0XCJcbmNvbnN0IF8gPSByZXF1aXJlKFwibG9kYXNoXCIpXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFxuICBzdHlsZWxpbnQvKjogc3R5bGVsaW50JGludGVybmFsQXBpKi8sXG4gIHBvc3Rjc3NSZXN1bHQvKjogT2JqZWN0Ki8sXG4gIGZpbGVQYXRoLyo6OiA/OiBzdHJpbmcqL1xuKS8qOiBQcm9taXNlPHN0eWxlbGludCRyZXN1bHQ+Ki8ge1xuICBjb25zdCBzb3VyY2UgPSAhcG9zdGNzc1Jlc3VsdC5yb290LnNvdXJjZSA/IHVuZGVmaW5lZCA6IHBvc3Rjc3NSZXN1bHQucm9vdC5zb3VyY2UuaW5wdXQuZmlsZSB8fCBwb3N0Y3NzUmVzdWx0LnJvb3Quc291cmNlLmlucHV0LmlkXG5cbiAgLy8gU3RyaXAgb3V0IGRlcHJlY2F0aW9uIHdhcm5pbmdzIGZyb20gdGhlIG1lc3NhZ2VzXG4gIGNvbnN0IGRlcHJlY2F0aW9uTWVzc2FnZXMgPSBfLnJlbW92ZShwb3N0Y3NzUmVzdWx0Lm1lc3NhZ2VzLCB7IHN0eWxlbGludFR5cGU6IFwiZGVwcmVjYXRpb25cIiB9KVxuICBjb25zdCBkZXByZWNhdGlvbnMgPSBkZXByZWNhdGlvbk1lc3NhZ2VzLm1hcChkZXByZWNhdGlvbk1lc3NhZ2UgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0ZXh0OiBkZXByZWNhdGlvbk1lc3NhZ2UudGV4dCxcbiAgICAgIHJlZmVyZW5jZTogZGVwcmVjYXRpb25NZXNzYWdlLnN0eWxlbGludFJlZmVyZW5jZSxcbiAgICB9XG4gIH0pXG5cbiAgLy8gQWxzbyBzdHJpcCBvdXQgaW52YWxpZCBvcHRpb25zXG4gIGNvbnN0IGludmFsaWRPcHRpb25NZXNzYWdlcyA9IF8ucmVtb3ZlKHBvc3Rjc3NSZXN1bHQubWVzc2FnZXMsIHsgc3R5bGVsaW50VHlwZTogXCJpbnZhbGlkT3B0aW9uXCIgfSlcbiAgY29uc3QgaW52YWxpZE9wdGlvbldhcm5pbmdzID0gaW52YWxpZE9wdGlvbk1lc3NhZ2VzLm1hcChpbnZhbGlkT3B0aW9uTWVzc2FnZSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRleHQ6IGludmFsaWRPcHRpb25NZXNzYWdlLnRleHQsXG4gICAgfVxuICB9KVxuXG4gIC8vIFRoaXMgZGVmaW5lcyB0aGUgc3R5bGVsaW50IHJlc3VsdCBvYmplY3QgdGhhdCBmb3JtYXR0ZXJzIHJlY2VpdmVcbiAgbGV0IHN0eWxlbGludFJlc3VsdCA9IHtcbiAgICBzb3VyY2UsXG4gICAgZGVwcmVjYXRpb25zLFxuICAgIGludmFsaWRPcHRpb25XYXJuaW5ncyxcbiAgICBlcnJvcmVkOiBwb3N0Y3NzUmVzdWx0LnN0eWxlbGludC5zdHlsZWxpbnRFcnJvcixcbiAgICB3YXJuaW5nczogcG9zdGNzc1Jlc3VsdC5tZXNzYWdlcy5tYXAobWVzc2FnZSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsaW5lOiBtZXNzYWdlLmxpbmUsXG4gICAgICAgIGNvbHVtbjogbWVzc2FnZS5jb2x1bW4sXG4gICAgICAgIHJ1bGU6IG1lc3NhZ2UucnVsZSxcbiAgICAgICAgc2V2ZXJpdHk6IG1lc3NhZ2Uuc2V2ZXJpdHksXG4gICAgICAgIHRleHQ6IG1lc3NhZ2UudGV4dCxcbiAgICAgIH1cbiAgICB9KSxcbiAgICBpZ25vcmVkOiBwb3N0Y3NzUmVzdWx0LnN0eWxlbGludC5pZ25vcmVkLFxuICAgIF9wb3N0Y3NzUmVzdWx0OiBwb3N0Y3NzUmVzdWx0LFxuICB9XG5cbiAgcmV0dXJuIHN0eWxlbGludC5nZXRDb25maWdGb3JGaWxlKGZpbGVQYXRoKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICBjb25zdCBjb25maWcgPSByZXN1bHQuY29uZmlnXG5cbiAgICBpZiAoY29uZmlnLnJlc3VsdFByb2Nlc3NvcnMpIHtcbiAgICAgIGNvbmZpZy5yZXN1bHRQcm9jZXNzb3JzLmZvckVhY2gocmVzdWx0UHJvY2Vzc29yID0+IHtcbiAgICAgICAgLy8gUmVzdWx0IHByb2Nlc3NvcnMgbWlnaHQganVzdCBtdXRhdGUgdGhlIHJlc3VsdCBvYmplY3QsXG4gICAgICAgIC8vIG9yIG1pZ2h0IHJldHVybiBhIG5ldyBvbmVcbiAgICAgICAgY29uc3QgcmV0dXJuZWQgPSByZXN1bHRQcm9jZXNzb3Ioc3R5bGVsaW50UmVzdWx0LCBzb3VyY2UpXG4gICAgICAgIGlmIChyZXR1cm5lZCkge1xuICAgICAgICAgIHN0eWxlbGludFJlc3VsdCA9IHJldHVybmVkXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlbGludFJlc3VsdFxuICB9KVxufVxuIl19