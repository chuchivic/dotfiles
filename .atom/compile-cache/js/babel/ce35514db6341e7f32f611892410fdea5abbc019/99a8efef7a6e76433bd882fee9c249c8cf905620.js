
"use strict";

var fs = require("fs");
var lessSyntax = require("postcss-less");
var path = require("path");
var postcss = require("postcss");
var scssSyntax = require("postcss-scss");
var sugarssSyntax = require("sugarss");
var dynamicRequire = require("./dynamicRequire");

var postcssProcessor = postcss();

module.exports = function (stylelint /*: stylelint$internalApi*/) /*: Promise<?Object>*/{
  var options /*: {
              code?: string,
              codeFilename?: string,
              filePath?: string,
              codeProcessors?: Array<Function>,
              syntax?: stylelint$syntaxes,
              customSyntax?: string
              }*/ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var cached /*: ?postcss$result*/ = stylelint._postcssResultCache.get(options.filePath);
  if (cached) return Promise.resolve(cached);

  var getCode = undefined;
  if (options.code !== undefined) {
    getCode = Promise.resolve(options.code);
  } else if (options.filePath) {
    getCode = readFile(options.filePath);
  }

  if (!getCode) {
    throw new Error("code or filePath required");
  }

  return getCode.then(function (code) {
    var customSyntax = stylelint._options.customSyntax;
    var syntax = stylelint._options.syntax;

    if (customSyntax) {
      try {
        syntax = dynamicRequire(customSyntax);
      } catch (e) {
        throw new Error("Cannot resolve custom syntax module " + customSyntax);
      }
    } else {
      var fileExtension = path.extname(options.filePath || "");
      if (syntax === "scss" || !syntax && fileExtension === ".scss") {
        syntax = scssSyntax;
      } else if (syntax === "less" || !syntax && fileExtension === ".less") {
        syntax = lessSyntax;
      } else if (syntax === "sugarss" || !syntax && fileExtension === ".sss") {
        syntax = sugarssSyntax;
      } else if (syntax) {
        throw new Error("You must use a valid syntax option, either: scss, less or sugarss");
      }
    }

    var postcssOptions /*: postcss$options*/ = {};

    postcssOptions.from = options.filePath;

    /*
     * PostCSS allows for syntaxes that only contain a parser, however,
     * it then expects the syntax to be set as the `parser` option rather than `syntax.
     */
    if (syntax && !syntax.stringify) {
      postcssOptions.parser = syntax;
    } else {
      postcssOptions.syntax = syntax;
    }

    var source = options.code ? options.codeFilename : options.filePath;
    var preProcessedCode = code;
    if (options.codeProcessors) {
      options.codeProcessors.forEach(function (codeProcessor) {
        preProcessedCode = codeProcessor(preProcessedCode, source);
      });
    }

    return postcssProcessor.process(preProcessedCode, postcssOptions);
  }).then(function (postcssResult) {
    stylelint._postcssResultCache.set(options.filePath, postcssResult);
    return postcssResult;
  });
};

function readFile(filePath /*: string*/) /*: Promise<string>*/{
  return new Promise(function (resolve, reject) {
    fs.readFile(filePath, "utf8", function (err, content) {
      if (err) {
        return reject(err);
      }
      resolve(content);
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,