
"use strict";
var ignore = require("ignore");
var micromatch = require("micromatch");
var path = require("path");

var alwaysIgnoredGlobs = require("./alwaysIgnoredGlobs");

// To find out if a path is ignored, we need to load the config,
// which may have an ignoreFiles property,
// and will have incorporated any .stylelintignore file that was found
// into its ignorePatterns property. We then check the path
// against these.
module.exports = function (stylelint, /*: stylelint$internalApi*/
filePathArg /*:: ?: string*/
) /*: Promise<boolean>*/{
  var filePath = filePathArg; // to please Flow
  if (!filePath) {
    return Promise.resolve(false);
  }

  return stylelint.getConfigForFile(filePath).then(function (result) {
    var config = result.config;

    var absoluteFilePath = path.isAbsolute(filePath) ? filePath : path.resolve(process.cwd(), filePath);

    var ignoreFiles = alwaysIgnoredGlobs.concat(config.ignoreFiles || []);
    if (micromatch(absoluteFilePath, ignoreFiles).length) {
      return true;
    }

    var ignorePatternsFilter = ignore().add(config.ignorePatterns).createFilter();

    var filepathRelativeToCwd = path.relative(process.cwd(), filePath);

    if (ignorePatternsFilter && !ignorePatternsFilter(filepathRelativeToCwd)) {
      return true;
    }

    return false;
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2plc3VzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1zdHlsZWxpbnQvbm9kZV9tb2R1bGVzL3N0eWxlbGludC9saWIvaXNQYXRoSWdub3JlZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsWUFBWSxDQUFBO0FBQ1osSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBQ2hDLElBQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQTtBQUN4QyxJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7O0FBRTVCLElBQU0sa0JBQWtCLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUE7Ozs7Ozs7QUFPMUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUNmLFNBQVM7QUFDVCxXQUFXO3dCQUNXO0FBQ3RCLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQTtBQUM1QixNQUFJLENBQUMsUUFBUSxFQUFFO0FBQ2IsV0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBO0dBQzlCOztBQUVELFNBQU8sU0FBUyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLE1BQU0sRUFBSztBQUMzRCxRQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFBOztBQUU1QixRQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFBOztBQUVyRyxRQUFNLFdBQVcsR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUMsQ0FBQTtBQUN2RSxRQUFJLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxXQUFXLENBQUMsQ0FBQyxNQUFNLEVBQUU7QUFDcEQsYUFBTyxJQUFJLENBQUE7S0FDWjs7QUFFRCxRQUFNLG9CQUFvQixHQUFHLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUE7O0FBRS9FLFFBQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUE7O0FBRXBFLFFBQUksb0JBQW9CLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFO0FBQ3hFLGFBQU8sSUFBSSxDQUFBO0tBQ1o7O0FBRUQsV0FBTyxLQUFLLENBQUE7R0FDYixDQUFDLENBQUE7Q0FDSCxDQUFBIiwiZmlsZSI6Ii9ob21lL2plc3VzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1zdHlsZWxpbnQvbm9kZV9tb2R1bGVzL3N0eWxlbGludC9saWIvaXNQYXRoSWdub3JlZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cInVzZSBzdHJpY3RcIlxuY29uc3QgaWdub3JlID0gcmVxdWlyZShcImlnbm9yZVwiKVxuY29uc3QgbWljcm9tYXRjaCA9IHJlcXVpcmUoXCJtaWNyb21hdGNoXCIpXG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIilcblxuY29uc3QgYWx3YXlzSWdub3JlZEdsb2JzID0gcmVxdWlyZShcIi4vYWx3YXlzSWdub3JlZEdsb2JzXCIpXG5cbi8vIFRvIGZpbmQgb3V0IGlmIGEgcGF0aCBpcyBpZ25vcmVkLCB3ZSBuZWVkIHRvIGxvYWQgdGhlIGNvbmZpZyxcbi8vIHdoaWNoIG1heSBoYXZlIGFuIGlnbm9yZUZpbGVzIHByb3BlcnR5LFxuLy8gYW5kIHdpbGwgaGF2ZSBpbmNvcnBvcmF0ZWQgYW55IC5zdHlsZWxpbnRpZ25vcmUgZmlsZSB0aGF0IHdhcyBmb3VuZFxuLy8gaW50byBpdHMgaWdub3JlUGF0dGVybnMgcHJvcGVydHkuIFdlIHRoZW4gY2hlY2sgdGhlIHBhdGhcbi8vIGFnYWluc3QgdGhlc2UuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChcbiAgc3R5bGVsaW50Lyo6IHN0eWxlbGludCRpbnRlcm5hbEFwaSovLFxuICBmaWxlUGF0aEFyZy8qOjogPzogc3RyaW5nKi9cbikvKjogUHJvbWlzZTxib29sZWFuPiovIHtcbiAgY29uc3QgZmlsZVBhdGggPSBmaWxlUGF0aEFyZyAvLyB0byBwbGVhc2UgRmxvd1xuICBpZiAoIWZpbGVQYXRoKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSlcbiAgfVxuXG4gIHJldHVybiBzdHlsZWxpbnQuZ2V0Q29uZmlnRm9yRmlsZShmaWxlUGF0aCkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgY29uc3QgY29uZmlnID0gcmVzdWx0LmNvbmZpZ1xuXG4gICAgY29uc3QgYWJzb2x1dGVGaWxlUGF0aCA9IHBhdGguaXNBYnNvbHV0ZShmaWxlUGF0aCkgPyBmaWxlUGF0aCA6IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBmaWxlUGF0aClcblxuICAgIGNvbnN0IGlnbm9yZUZpbGVzID0gYWx3YXlzSWdub3JlZEdsb2JzLmNvbmNhdChjb25maWcuaWdub3JlRmlsZXMgfHwgW10pXG4gICAgaWYgKG1pY3JvbWF0Y2goYWJzb2x1dGVGaWxlUGF0aCwgaWdub3JlRmlsZXMpLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBjb25zdCBpZ25vcmVQYXR0ZXJuc0ZpbHRlciA9IGlnbm9yZSgpLmFkZChjb25maWcuaWdub3JlUGF0dGVybnMpLmNyZWF0ZUZpbHRlcigpXG5cbiAgICBjb25zdCBmaWxlcGF0aFJlbGF0aXZlVG9Dd2QgPSBwYXRoLnJlbGF0aXZlKHByb2Nlc3MuY3dkKCksIGZpbGVQYXRoKVxuXG4gICAgaWYgKGlnbm9yZVBhdHRlcm5zRmlsdGVyICYmICFpZ25vcmVQYXR0ZXJuc0ZpbHRlcihmaWxlcGF0aFJlbGF0aXZlVG9Dd2QpKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9KVxufVxuIl19