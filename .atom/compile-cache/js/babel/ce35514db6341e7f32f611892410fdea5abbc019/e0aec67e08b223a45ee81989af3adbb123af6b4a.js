
"use strict";

var Browsers = require("autoprefixer/lib/browsers");
var Prefixes = require("autoprefixer/lib/prefixes");
var autoprefixer = require("autoprefixer");

/**
 * Use Autoprefixer's secret powers to determine whether or
 * not a certain CSS identifier contains a vendor prefix that
 * Autoprefixer, given the standardized identifier, could add itself.
 *
 * Used by `*-no-vendor-prefix-*` rules to find superfluous
 * vendor prefixes.
 */

var prefixes = new Prefixes(autoprefixer.data.prefixes, new Browsers(autoprefixer.data.browsers, []));

/**
 * Most identifier types have to be looked up in a unique way,
 * so we're exposing special functions for each.
 */
module.exports = {

  atRuleName: function atRuleName(identifier /*: string*/) /*: boolean*/{
    return prefixes.remove["@" + identifier.toLowerCase()];
  },

  selector: function selector(identifier /*: string*/) /*: boolean*/{
    return prefixes.remove.selectors.some(function (selectorObj) {
      return identifier.toLowerCase() === selectorObj.prefixed;
    });
  },

  mediaFeatureName: function mediaFeatureName(identifier /*: string*/) /*: boolean*/{
    return identifier.toLowerCase().indexOf("device-pixel-ratio") !== -1;
  },

  property: function property(identifier /*: string*/) /*: boolean*/{
    return autoprefixer.data.prefixes[prefixes.unprefixed(identifier.toLowerCase())];
  },

  propertyValue: function propertyValue(prop, /*: string*/value /*: string*/) /*: boolean*/{
    var possiblePrefixableValues = prefixes.remove[prop.toLowerCase()] && prefixes.remove[prop.toLowerCase()].values;
    return possiblePrefixableValues && possiblePrefixableValues.some(function (valueObj) {
      return value.toLowerCase() === valueObj.prefixed;
    });
  }

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2plc3VzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1zdHlsZWxpbnQvbm9kZV9tb2R1bGVzL3N0eWxlbGludC9saWIvdXRpbHMvaXNBdXRvcHJlZml4YWJsZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsWUFBWSxDQUFBOztBQUVaLElBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQyxDQUFBO0FBQ3JELElBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQyxDQUFBO0FBQ3JELElBQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQTs7Ozs7Ozs7Ozs7QUFXNUMsSUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTs7Ozs7O0FBTXZHLE1BQU0sQ0FBQyxPQUFPLEdBQUc7O0FBRWYsWUFBVSxFQUFBLG9CQUFDLFVBQVUsNEJBQTJCO0FBQzlDLFdBQU8sUUFBUSxDQUFDLE1BQU0sT0FBSyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUcsQ0FBQTtHQUN2RDs7QUFFRCxVQUFRLEVBQUEsa0JBQUMsVUFBVSw0QkFBMkI7QUFDNUMsV0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBQSxXQUFXLEVBQUk7QUFDbkQsYUFBTyxVQUFVLENBQUMsV0FBVyxFQUFFLEtBQUssV0FBVyxDQUFDLFFBQVEsQ0FBQTtLQUN6RCxDQUFDLENBQUE7R0FDSDs7QUFFRCxrQkFBZ0IsRUFBQSwwQkFBQyxVQUFVLDRCQUEyQjtBQUNwRCxXQUFPLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtHQUNyRTs7QUFFRCxVQUFRLEVBQUEsa0JBQUMsVUFBVSw0QkFBMkI7QUFDNUMsV0FBTyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUE7R0FDakY7O0FBRUQsZUFBYSxFQUFBLHVCQUFDLElBQUksY0FBYyxLQUFLLDRCQUEyQjtBQUM5RCxRQUFNLHdCQUF3QixHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUE7QUFDbEgsV0FBTyx3QkFBd0IsSUFBSSx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsVUFBQSxRQUFRLEVBQUk7QUFDM0UsYUFBTyxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssUUFBUSxDQUFDLFFBQVEsQ0FBQTtLQUNqRCxDQUFDLENBQUE7R0FDSDs7Q0FFRixDQUFBIiwiZmlsZSI6Ii9ob21lL2plc3VzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1zdHlsZWxpbnQvbm9kZV9tb2R1bGVzL3N0eWxlbGludC9saWIvdXRpbHMvaXNBdXRvcHJlZml4YWJsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cInVzZSBzdHJpY3RcIlxuXG5jb25zdCBCcm93c2VycyA9IHJlcXVpcmUoXCJhdXRvcHJlZml4ZXIvbGliL2Jyb3dzZXJzXCIpXG5jb25zdCBQcmVmaXhlcyA9IHJlcXVpcmUoXCJhdXRvcHJlZml4ZXIvbGliL3ByZWZpeGVzXCIpXG5jb25zdCBhdXRvcHJlZml4ZXIgPSByZXF1aXJlKFwiYXV0b3ByZWZpeGVyXCIpXG5cbi8qKlxuICogVXNlIEF1dG9wcmVmaXhlcidzIHNlY3JldCBwb3dlcnMgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgb3JcbiAqIG5vdCBhIGNlcnRhaW4gQ1NTIGlkZW50aWZpZXIgY29udGFpbnMgYSB2ZW5kb3IgcHJlZml4IHRoYXRcbiAqIEF1dG9wcmVmaXhlciwgZ2l2ZW4gdGhlIHN0YW5kYXJkaXplZCBpZGVudGlmaWVyLCBjb3VsZCBhZGQgaXRzZWxmLlxuICpcbiAqIFVzZWQgYnkgYCotbm8tdmVuZG9yLXByZWZpeC0qYCBydWxlcyB0byBmaW5kIHN1cGVyZmx1b3VzXG4gKiB2ZW5kb3IgcHJlZml4ZXMuXG4gKi9cblxuY29uc3QgcHJlZml4ZXMgPSBuZXcgUHJlZml4ZXMoYXV0b3ByZWZpeGVyLmRhdGEucHJlZml4ZXMsIG5ldyBCcm93c2VycyhhdXRvcHJlZml4ZXIuZGF0YS5icm93c2VycywgW10pKVxuXG4vKipcbiAqIE1vc3QgaWRlbnRpZmllciB0eXBlcyBoYXZlIHRvIGJlIGxvb2tlZCB1cCBpbiBhIHVuaXF1ZSB3YXksXG4gKiBzbyB3ZSdyZSBleHBvc2luZyBzcGVjaWFsIGZ1bmN0aW9ucyBmb3IgZWFjaC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgYXRSdWxlTmFtZShpZGVudGlmaWVyLyo6IHN0cmluZyovKS8qOiBib29sZWFuKi8ge1xuICAgIHJldHVybiBwcmVmaXhlcy5yZW1vdmVbYEAke2lkZW50aWZpZXIudG9Mb3dlckNhc2UoKX1gXVxuICB9LFxuXG4gIHNlbGVjdG9yKGlkZW50aWZpZXIvKjogc3RyaW5nKi8pLyo6IGJvb2xlYW4qLyB7XG4gICAgcmV0dXJuIHByZWZpeGVzLnJlbW92ZS5zZWxlY3RvcnMuc29tZShzZWxlY3Rvck9iaiA9PiB7XG4gICAgICByZXR1cm4gaWRlbnRpZmllci50b0xvd2VyQ2FzZSgpID09PSBzZWxlY3Rvck9iai5wcmVmaXhlZFxuICAgIH0pXG4gIH0sXG5cbiAgbWVkaWFGZWF0dXJlTmFtZShpZGVudGlmaWVyLyo6IHN0cmluZyovKS8qOiBib29sZWFuKi8ge1xuICAgIHJldHVybiBpZGVudGlmaWVyLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcImRldmljZS1waXhlbC1yYXRpb1wiKSAhPT0gLTFcbiAgfSxcblxuICBwcm9wZXJ0eShpZGVudGlmaWVyLyo6IHN0cmluZyovKS8qOiBib29sZWFuKi8ge1xuICAgIHJldHVybiBhdXRvcHJlZml4ZXIuZGF0YS5wcmVmaXhlc1twcmVmaXhlcy51bnByZWZpeGVkKGlkZW50aWZpZXIudG9Mb3dlckNhc2UoKSldXG4gIH0sXG5cbiAgcHJvcGVydHlWYWx1ZShwcm9wLyo6IHN0cmluZyovLCB2YWx1ZS8qOiBzdHJpbmcqLykvKjogYm9vbGVhbiovIHtcbiAgICBjb25zdCBwb3NzaWJsZVByZWZpeGFibGVWYWx1ZXMgPSBwcmVmaXhlcy5yZW1vdmVbcHJvcC50b0xvd2VyQ2FzZSgpXSAmJiBwcmVmaXhlcy5yZW1vdmVbcHJvcC50b0xvd2VyQ2FzZSgpXS52YWx1ZXNcbiAgICByZXR1cm4gcG9zc2libGVQcmVmaXhhYmxlVmFsdWVzICYmIHBvc3NpYmxlUHJlZml4YWJsZVZhbHVlcy5zb21lKHZhbHVlT2JqID0+IHtcbiAgICAgIHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSB2YWx1ZU9iai5wcmVmaXhlZFxuICAgIH0pXG4gIH0sXG5cbn1cbiJdfQ==