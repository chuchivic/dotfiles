
"use strict";
var createStylelint = require("./createStylelint");
var debug = require("debug")("stylelint:standalone");
var FileCache = require("./utils/FileCache");
var formatters /*: Object*/ = require("./formatters");
var fs = require("fs");
var globby /*: Function*/ = require("globby");
var hash = require("./utils/hash");
var ignore = require("ignore");
var needlessDisables /*: Function*/ = require("./needlessDisables");
var path = require("path");
var pify = require("pify");
var pkg = require("../package.json");

var DEFAULT_IGNORE_FILENAME = ".stylelintignore";
var FILE_NOT_FOUND_ERROR_CODE = "ENOENT";
var ALWAYS_IGNORED_GLOBS = ["**/node_modules/**", "**/bower_components/**"];

/*::type CssSyntaxErrorT = {
  column: number;
  file?: string;
  input: {
    column: number;
    file?: string;
    line: number;
    source: string;
  };
  line: number;
  message: string;
  name: string;
  reason: string;
  source: string;
}*/

module.exports = function (options /*: stylelint$standaloneOptions */
) /*: Promise<stylelint$standaloneReturnValue>*/{
  var cacheLocation = options.cacheLocation;
  var code = options.code;
  var codeFilename = options.codeFilename;
  var config = options.config;
  var configBasedir = options.configBasedir;
  var configFile = options.configFile;
  var configOverrides = options.configOverrides;
  var customSyntax = options.customSyntax;
  var files = options.files;
  var fix = options.fix;
  var formatter = options.formatter;
  var ignoreDisables = options.ignoreDisables;
  var reportNeedlessDisables = options.reportNeedlessDisables;
  var syntax = options.syntax;
  var useCache = options.cache || false;
  var fileCache = undefined;
  var startTime = Date.now();

  // The ignorer will be used to filter file paths after the glob is checked,
  // before any files are actually read
  var ignoreFilePath = options.ignorePath || DEFAULT_IGNORE_FILENAME;
  var absoluteIgnoreFilePath = path.isAbsolute(ignoreFilePath) ? ignoreFilePath : path.resolve(process.cwd(), ignoreFilePath);
  var ignoreText = "";
  try {
    ignoreText = fs.readFileSync(absoluteIgnoreFilePath, "utf8");
  } catch (readError) {
    if (readError.code !== FILE_NOT_FOUND_ERROR_CODE) throw readError;
  }
  var ignorer = ignore().add(ignoreText);

  var isValidCode = typeof code === "string";
  if (!files && !isValidCode || files && (code || isValidCode)) {
    throw new Error("You must pass stylelint a `files` glob or a `code` string, though not both");
  }

  var formatterFunction = undefined;
  if (typeof formatter === "string") {
    formatterFunction = formatters[formatter];
    if (formatterFunction === undefined) {
      return Promise.reject(new Error("You must use a valid formatter option: 'json', 'string', 'verbose', or a function"));
    }
  } else if (typeof formatter === "function") {
    formatterFunction = formatter;
  } else {
    formatterFunction = formatters.json;
  }

  var stylelint = createStylelint({
    config: config,
    configFile: configFile,
    configBasedir: configBasedir,
    configOverrides: configOverrides,
    ignoreDisables: ignoreDisables,
    reportNeedlessDisables: reportNeedlessDisables,
    syntax: syntax,
    customSyntax: customSyntax,
    fix: fix
  });

  if (!files) {
    var absoluteCodeFilename = codeFilename !== undefined && !path.isAbsolute(codeFilename) ? path.join(process.cwd(), codeFilename) : codeFilename;
    return stylelint._lintSource({
      code: code,
      codeFilename: absoluteCodeFilename
    }).then(function (postcssResult) {
      return stylelint._createStylelintResult(postcssResult);
    })["catch"](handleError).then(function (stylelintResult) {
      return prepareReturnValue([stylelintResult]);
    });
  }

  var fileList = files;
  if (typeof fileList === "string") {
    fileList = [fileList];
  }
  if (!options.disableDefaultIgnores) {
    fileList = fileList.concat(ALWAYS_IGNORED_GLOBS.map(function (glob) {
      return "!" + glob;
    }));
  }

  if (useCache) {
    var stylelintVersion = pkg.version;
    var hashOfConfig = hash(stylelintVersion + "_" + JSON.stringify(config));
    fileCache = new FileCache(cacheLocation, hashOfConfig);
  } else {
    // No need to calculate hash here, we just want to delete cache file.
    fileCache = new FileCache(cacheLocation);
    // Remove cache file if cache option is disabled
    fileCache.destroy();
  }

  return globby(fileList).then(function (filePaths) {
    // The ignorer filter needs to check paths relative to cwd
    filePaths = ignorer.filter(filePaths.map(function (p) {
      return path.relative(process.cwd(), p);
    }));

    if (!filePaths.length) {
      return Promise.all([]);
    }

    var absoluteFilePaths = filePaths.map(function (filePath) {
      var absoluteFilepath = !path.isAbsolute(filePath) ? path.join(process.cwd(), filePath) : path.normalize(filePath);
      return absoluteFilepath;
    });

    if (useCache) {
      absoluteFilePaths = absoluteFilePaths.filter(fileCache.hasFileChanged.bind(fileCache));
    }

    var getStylelintResults = absoluteFilePaths.map(function (absoluteFilepath) {
      debug("Processing " + absoluteFilepath);
      return stylelint._lintSource({
        filePath: absoluteFilepath
      }).then(function (postcssResult) {
        if (postcssResult.stylelint.stylelintError && useCache) {
          debug(absoluteFilepath + " contains linting errors and will not be cached.");
          fileCache.removeEntry(absoluteFilepath);
        }

        // If we're fixing, save the file with changed code
        var fixFile = Promise.resolve();
        if (!postcssResult.stylelint.ignored && options.fix) {
          var fixedCss = postcssResult.root.toString(postcssResult.opts.syntax);
          fixFile = pify(fs.writeFile)(absoluteFilepath, fixedCss);
        }

        return fixFile.then(function () {
          return stylelint._createStylelintResult(postcssResult, absoluteFilepath);
        });
      })["catch"](handleError);
    });

    return Promise.all(getStylelintResults);
  }).then(function (stylelintResults) {
    if (useCache) {
      fileCache.reconcile();
    }
    return prepareReturnValue(stylelintResults);
  });

  function prepareReturnValue(stylelintResults /*: Array<stylelint$result>*/
  ) /*: stylelint$standaloneReturnValue*/{
    var errored = stylelintResults.some(function (result) {
      return result.errored || result.parseErrors.length > 0;
    });
    var returnValue /*: stylelint$standaloneReturnValue*/ = {
      errored: errored,
      output: formatterFunction(stylelintResults),
      results: stylelintResults
    };
    if (reportNeedlessDisables) {
      returnValue.needlessDisables = needlessDisables(stylelintResults);
    }
    debug("Linting complete in " + (Date.now() - startTime) + "ms");
    return returnValue;
  }
};

function handleError(error /*: Object*/) {
  if (error.name === "CssSyntaxError") {
    return convertCssSyntaxErrorToResult(error);
  } else {
    throw error;
  }
}

// By converting syntax errors to stylelint results,
// we can control their appearance in the formatted output
// and other tools like editor plugins can decide how to
// present them, as well
function convertCssSyntaxErrorToResult(error /*: CssSyntaxErrorT*/
) /*: stylelint$result*/{
  if (error.name !== "CssSyntaxError") {
    throw error;
  }

  return {
    source: error.file || "<input css 1>",
    deprecations: [],
    invalidOptionWarnings: [],
    parseErrors: [],
    errored: true,
    warnings: [{
      line: error.line,
      column: error.column,
      rule: error.name,
      severity: "error",
      text: error.reason + " (" + error.name + ")"
    }]
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2plc3VzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1zdHlsZWxpbnQvbm9kZV9tb2R1bGVzL3N0eWxlbGludC9saWIvc3RhbmRhbG9uZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsWUFBWSxDQUFDO0FBQ2IsSUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDckQsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDdkQsSUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDL0MsSUFBTSxVQUFVLGdCQUFnQixPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDeEQsSUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pCLElBQU0sTUFBTSxrQkFBa0IsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2hELElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNyQyxJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDakMsSUFBTSxnQkFBZ0Isa0JBQWtCLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQ3RFLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM3QixJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0IsSUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7O0FBRXZDLElBQU0sdUJBQXVCLEdBQUcsa0JBQWtCLENBQUM7QUFDbkQsSUFBTSx5QkFBeUIsR0FBRyxRQUFRLENBQUM7QUFDM0MsSUFBTSxvQkFBb0IsR0FBRyxDQUFDLG9CQUFvQixFQUFFLHdCQUF3QixDQUFDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCOUUsTUFBTSxDQUFDLE9BQU8s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eUJBQXFCLEVBQUUsRUFBRTtBQUN6QixlQUFXLEVBQUUsRUFBRTtBQUNmLFdBQU8sRUFBRSxJQUFJO0FBQ2IsWUFBUSxFQUFFLENBQ1I7QUFDRSxVQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7QUFDaEIsWUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO0FBQ3BCLFVBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtBQUNoQixjQUFRLEVBQUUsT0FBTztBQUNqQixVQUFJLEVBQUUsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksR0FBRyxHQUFHO0tBQzdDLENBQ0Y7R0FDRixDQUFDO0NBQ0giLCJmaWxlIjoiL2hvbWUvamVzdXMvLmF0b20vcGFja2FnZXMvbGludGVyLXN0eWxlbGludC9ub2RlX21vZHVsZXMvc3R5bGVsaW50L2xpYi9zdGFuZGFsb25lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblwidXNlIHN0cmljdFwiO1xuY29uc3QgY3JlYXRlU3R5bGVsaW50ID0gcmVxdWlyZShcIi4vY3JlYXRlU3R5bGVsaW50XCIpO1xuY29uc3QgZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIikoXCJzdHlsZWxpbnQ6c3RhbmRhbG9uZVwiKTtcbmNvbnN0IEZpbGVDYWNoZSA9IHJlcXVpcmUoXCIuL3V0aWxzL0ZpbGVDYWNoZVwiKTtcbmNvbnN0IGZvcm1hdHRlcnMgLyo6IE9iamVjdCovID0gcmVxdWlyZShcIi4vZm9ybWF0dGVyc1wiKTtcbmNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuY29uc3QgZ2xvYmJ5IC8qOiBGdW5jdGlvbiovID0gcmVxdWlyZShcImdsb2JieVwiKTtcbmNvbnN0IGhhc2ggPSByZXF1aXJlKFwiLi91dGlscy9oYXNoXCIpO1xuY29uc3QgaWdub3JlID0gcmVxdWlyZShcImlnbm9yZVwiKTtcbmNvbnN0IG5lZWRsZXNzRGlzYWJsZXMgLyo6IEZ1bmN0aW9uKi8gPSByZXF1aXJlKFwiLi9uZWVkbGVzc0Rpc2FibGVzXCIpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuY29uc3QgcGlmeSA9IHJlcXVpcmUoXCJwaWZ5XCIpO1xuY29uc3QgcGtnID0gcmVxdWlyZShcIi4uL3BhY2thZ2UuanNvblwiKTtcblxuY29uc3QgREVGQVVMVF9JR05PUkVfRklMRU5BTUUgPSBcIi5zdHlsZWxpbnRpZ25vcmVcIjtcbmNvbnN0IEZJTEVfTk9UX0ZPVU5EX0VSUk9SX0NPREUgPSBcIkVOT0VOVFwiO1xuY29uc3QgQUxXQVlTX0lHTk9SRURfR0xPQlMgPSBbXCIqKi9ub2RlX21vZHVsZXMvKipcIiwgXCIqKi9ib3dlcl9jb21wb25lbnRzLyoqXCJdO1xuXG4vKjo6dHlwZSBDc3NTeW50YXhFcnJvclQgPSB7XG4gIGNvbHVtbjogbnVtYmVyO1xuICBmaWxlPzogc3RyaW5nO1xuICBpbnB1dDoge1xuICAgIGNvbHVtbjogbnVtYmVyO1xuICAgIGZpbGU/OiBzdHJpbmc7XG4gICAgbGluZTogbnVtYmVyO1xuICAgIHNvdXJjZTogc3RyaW5nO1xuICB9O1xuICBsaW5lOiBudW1iZXI7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICByZWFzb246IHN0cmluZztcbiAgc291cmNlOiBzdHJpbmc7XG59Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihcbiAgb3B0aW9ucyAvKjogc3R5bGVsaW50JHN0YW5kYWxvbmVPcHRpb25zICovXG4pIC8qOiBQcm9taXNlPHN0eWxlbGludCRzdGFuZGFsb25lUmV0dXJuVmFsdWU+Ki8ge1xuICBjb25zdCBjYWNoZUxvY2F0aW9uID0gb3B0aW9ucy5jYWNoZUxvY2F0aW9uO1xuICBjb25zdCBjb2RlID0gb3B0aW9ucy5jb2RlO1xuICBjb25zdCBjb2RlRmlsZW5hbWUgPSBvcHRpb25zLmNvZGVGaWxlbmFtZTtcbiAgY29uc3QgY29uZmlnID0gb3B0aW9ucy5jb25maWc7XG4gIGNvbnN0IGNvbmZpZ0Jhc2VkaXIgPSBvcHRpb25zLmNvbmZpZ0Jhc2VkaXI7XG4gIGNvbnN0IGNvbmZpZ0ZpbGUgPSBvcHRpb25zLmNvbmZpZ0ZpbGU7XG4gIGNvbnN0IGNvbmZpZ092ZXJyaWRlcyA9IG9wdGlvbnMuY29uZmlnT3ZlcnJpZGVzO1xuICBjb25zdCBjdXN0b21TeW50YXggPSBvcHRpb25zLmN1c3RvbVN5bnRheDtcbiAgY29uc3QgZmlsZXMgPSBvcHRpb25zLmZpbGVzO1xuICBjb25zdCBmaXggPSBvcHRpb25zLmZpeDtcbiAgY29uc3QgZm9ybWF0dGVyID0gb3B0aW9ucy5mb3JtYXR0ZXI7XG4gIGNvbnN0IGlnbm9yZURpc2FibGVzID0gb3B0aW9ucy5pZ25vcmVEaXNhYmxlcztcbiAgY29uc3QgcmVwb3J0TmVlZGxlc3NEaXNhYmxlcyA9IG9wdGlvbnMucmVwb3J0TmVlZGxlc3NEaXNhYmxlcztcbiAgY29uc3Qgc3ludGF4ID0gb3B0aW9ucy5zeW50YXg7XG4gIGNvbnN0IHVzZUNhY2hlID0gb3B0aW9ucy5jYWNoZSB8fCBmYWxzZTtcbiAgbGV0IGZpbGVDYWNoZTtcbiAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcblxuICAvLyBUaGUgaWdub3JlciB3aWxsIGJlIHVzZWQgdG8gZmlsdGVyIGZpbGUgcGF0aHMgYWZ0ZXIgdGhlIGdsb2IgaXMgY2hlY2tlZCxcbiAgLy8gYmVmb3JlIGFueSBmaWxlcyBhcmUgYWN0dWFsbHkgcmVhZFxuICBjb25zdCBpZ25vcmVGaWxlUGF0aCA9IG9wdGlvbnMuaWdub3JlUGF0aCB8fCBERUZBVUxUX0lHTk9SRV9GSUxFTkFNRTtcbiAgY29uc3QgYWJzb2x1dGVJZ25vcmVGaWxlUGF0aCA9IHBhdGguaXNBYnNvbHV0ZShpZ25vcmVGaWxlUGF0aClcbiAgICA/IGlnbm9yZUZpbGVQYXRoXG4gICAgOiBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgaWdub3JlRmlsZVBhdGgpO1xuICBsZXQgaWdub3JlVGV4dCA9IFwiXCI7XG4gIHRyeSB7XG4gICAgaWdub3JlVGV4dCA9IGZzLnJlYWRGaWxlU3luYyhhYnNvbHV0ZUlnbm9yZUZpbGVQYXRoLCBcInV0ZjhcIik7XG4gIH0gY2F0Y2ggKHJlYWRFcnJvcikge1xuICAgIGlmIChyZWFkRXJyb3IuY29kZSAhPT0gRklMRV9OT1RfRk9VTkRfRVJST1JfQ09ERSkgdGhyb3cgcmVhZEVycm9yO1xuICB9XG4gIGNvbnN0IGlnbm9yZXIgPSBpZ25vcmUoKS5hZGQoaWdub3JlVGV4dCk7XG5cbiAgY29uc3QgaXNWYWxpZENvZGUgPSB0eXBlb2YgY29kZSA9PT0gXCJzdHJpbmdcIjtcbiAgaWYgKCghZmlsZXMgJiYgIWlzVmFsaWRDb2RlKSB8fCAoZmlsZXMgJiYgKGNvZGUgfHwgaXNWYWxpZENvZGUpKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiWW91IG11c3QgcGFzcyBzdHlsZWxpbnQgYSBgZmlsZXNgIGdsb2Igb3IgYSBgY29kZWAgc3RyaW5nLCB0aG91Z2ggbm90IGJvdGhcIlxuICAgICk7XG4gIH1cblxuICBsZXQgZm9ybWF0dGVyRnVuY3Rpb247XG4gIGlmICh0eXBlb2YgZm9ybWF0dGVyID09PSBcInN0cmluZ1wiKSB7XG4gICAgZm9ybWF0dGVyRnVuY3Rpb24gPSBmb3JtYXR0ZXJzW2Zvcm1hdHRlcl07XG4gICAgaWYgKGZvcm1hdHRlckZ1bmN0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgbmV3IEVycm9yKFxuICAgICAgICAgIFwiWW91IG11c3QgdXNlIGEgdmFsaWQgZm9ybWF0dGVyIG9wdGlvbjogJ2pzb24nLCAnc3RyaW5nJywgJ3ZlcmJvc2UnLCBvciBhIGZ1bmN0aW9uXCJcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIGZvcm1hdHRlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9ybWF0dGVyRnVuY3Rpb24gPSBmb3JtYXR0ZXI7XG4gIH0gZWxzZSB7XG4gICAgZm9ybWF0dGVyRnVuY3Rpb24gPSBmb3JtYXR0ZXJzLmpzb247XG4gIH1cblxuICBjb25zdCBzdHlsZWxpbnQgPSBjcmVhdGVTdHlsZWxpbnQoe1xuICAgIGNvbmZpZyxcbiAgICBjb25maWdGaWxlLFxuICAgIGNvbmZpZ0Jhc2VkaXIsXG4gICAgY29uZmlnT3ZlcnJpZGVzLFxuICAgIGlnbm9yZURpc2FibGVzLFxuICAgIHJlcG9ydE5lZWRsZXNzRGlzYWJsZXMsXG4gICAgc3ludGF4LFxuICAgIGN1c3RvbVN5bnRheCxcbiAgICBmaXhcbiAgfSk7XG5cbiAgaWYgKCFmaWxlcykge1xuICAgIGNvbnN0IGFic29sdXRlQ29kZUZpbGVuYW1lID1cbiAgICAgIGNvZGVGaWxlbmFtZSAhPT0gdW5kZWZpbmVkICYmICFwYXRoLmlzQWJzb2x1dGUoY29kZUZpbGVuYW1lKVxuICAgICAgICA/IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCBjb2RlRmlsZW5hbWUpXG4gICAgICAgIDogY29kZUZpbGVuYW1lO1xuICAgIHJldHVybiBzdHlsZWxpbnRcbiAgICAgIC5fbGludFNvdXJjZSh7XG4gICAgICAgIGNvZGUsXG4gICAgICAgIGNvZGVGaWxlbmFtZTogYWJzb2x1dGVDb2RlRmlsZW5hbWVcbiAgICAgIH0pXG4gICAgICAudGhlbihwb3N0Y3NzUmVzdWx0ID0+IHtcbiAgICAgICAgcmV0dXJuIHN0eWxlbGludC5fY3JlYXRlU3R5bGVsaW50UmVzdWx0KHBvc3Rjc3NSZXN1bHQpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChoYW5kbGVFcnJvcilcbiAgICAgIC50aGVuKHN0eWxlbGludFJlc3VsdCA9PiB7XG4gICAgICAgIHJldHVybiBwcmVwYXJlUmV0dXJuVmFsdWUoW3N0eWxlbGludFJlc3VsdF0pO1xuICAgICAgfSk7XG4gIH1cblxuICBsZXQgZmlsZUxpc3QgPSBmaWxlcztcbiAgaWYgKHR5cGVvZiBmaWxlTGlzdCA9PT0gXCJzdHJpbmdcIikge1xuICAgIGZpbGVMaXN0ID0gW2ZpbGVMaXN0XTtcbiAgfVxuICBpZiAoIW9wdGlvbnMuZGlzYWJsZURlZmF1bHRJZ25vcmVzKSB7XG4gICAgZmlsZUxpc3QgPSBmaWxlTGlzdC5jb25jYXQoQUxXQVlTX0lHTk9SRURfR0xPQlMubWFwKGdsb2IgPT4gXCIhXCIgKyBnbG9iKSk7XG4gIH1cblxuICBpZiAodXNlQ2FjaGUpIHtcbiAgICBjb25zdCBzdHlsZWxpbnRWZXJzaW9uID0gcGtnLnZlcnNpb247XG4gICAgY29uc3QgaGFzaE9mQ29uZmlnID0gaGFzaChgJHtzdHlsZWxpbnRWZXJzaW9ufV8ke0pTT04uc3RyaW5naWZ5KGNvbmZpZyl9YCk7XG4gICAgZmlsZUNhY2hlID0gbmV3IEZpbGVDYWNoZShjYWNoZUxvY2F0aW9uLCBoYXNoT2ZDb25maWcpO1xuICB9IGVsc2Uge1xuICAgIC8vIE5vIG5lZWQgdG8gY2FsY3VsYXRlIGhhc2ggaGVyZSwgd2UganVzdCB3YW50IHRvIGRlbGV0ZSBjYWNoZSBmaWxlLlxuICAgIGZpbGVDYWNoZSA9IG5ldyBGaWxlQ2FjaGUoY2FjaGVMb2NhdGlvbik7XG4gICAgLy8gUmVtb3ZlIGNhY2hlIGZpbGUgaWYgY2FjaGUgb3B0aW9uIGlzIGRpc2FibGVkXG4gICAgZmlsZUNhY2hlLmRlc3Ryb3koKTtcbiAgfVxuXG4gIHJldHVybiBnbG9iYnkoZmlsZUxpc3QpXG4gICAgLnRoZW4oZmlsZVBhdGhzID0+IHtcbiAgICAgIC8vIFRoZSBpZ25vcmVyIGZpbHRlciBuZWVkcyB0byBjaGVjayBwYXRocyByZWxhdGl2ZSB0byBjd2RcbiAgICAgIGZpbGVQYXRocyA9IGlnbm9yZXIuZmlsdGVyKFxuICAgICAgICBmaWxlUGF0aHMubWFwKHAgPT4gcGF0aC5yZWxhdGl2ZShwcm9jZXNzLmN3ZCgpLCBwKSlcbiAgICAgICk7XG5cbiAgICAgIGlmICghZmlsZVBhdGhzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW10pO1xuICAgICAgfVxuXG4gICAgICBsZXQgYWJzb2x1dGVGaWxlUGF0aHMgPSBmaWxlUGF0aHMubWFwKGZpbGVQYXRoID0+IHtcbiAgICAgICAgY29uc3QgYWJzb2x1dGVGaWxlcGF0aCA9ICFwYXRoLmlzQWJzb2x1dGUoZmlsZVBhdGgpXG4gICAgICAgICAgPyBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgZmlsZVBhdGgpXG4gICAgICAgICAgOiBwYXRoLm5vcm1hbGl6ZShmaWxlUGF0aCk7XG4gICAgICAgIHJldHVybiBhYnNvbHV0ZUZpbGVwYXRoO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh1c2VDYWNoZSkge1xuICAgICAgICBhYnNvbHV0ZUZpbGVQYXRocyA9IGFic29sdXRlRmlsZVBhdGhzLmZpbHRlcihcbiAgICAgICAgICBmaWxlQ2FjaGUuaGFzRmlsZUNoYW5nZWQuYmluZChmaWxlQ2FjaGUpXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGdldFN0eWxlbGludFJlc3VsdHMgPSBhYnNvbHV0ZUZpbGVQYXRocy5tYXAoYWJzb2x1dGVGaWxlcGF0aCA9PiB7XG4gICAgICAgIGRlYnVnKGBQcm9jZXNzaW5nICR7YWJzb2x1dGVGaWxlcGF0aH1gKTtcbiAgICAgICAgcmV0dXJuIHN0eWxlbGludFxuICAgICAgICAgIC5fbGludFNvdXJjZSh7XG4gICAgICAgICAgICBmaWxlUGF0aDogYWJzb2x1dGVGaWxlcGF0aFxuICAgICAgICAgIH0pXG4gICAgICAgICAgLnRoZW4ocG9zdGNzc1Jlc3VsdCA9PiB7XG4gICAgICAgICAgICBpZiAocG9zdGNzc1Jlc3VsdC5zdHlsZWxpbnQuc3R5bGVsaW50RXJyb3IgJiYgdXNlQ2FjaGUpIHtcbiAgICAgICAgICAgICAgZGVidWcoXG4gICAgICAgICAgICAgICAgYCR7YWJzb2x1dGVGaWxlcGF0aH0gY29udGFpbnMgbGludGluZyBlcnJvcnMgYW5kIHdpbGwgbm90IGJlIGNhY2hlZC5gXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGZpbGVDYWNoZS5yZW1vdmVFbnRyeShhYnNvbHV0ZUZpbGVwYXRoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgd2UncmUgZml4aW5nLCBzYXZlIHRoZSBmaWxlIHdpdGggY2hhbmdlZCBjb2RlXG4gICAgICAgICAgICBsZXQgZml4RmlsZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgaWYgKCFwb3N0Y3NzUmVzdWx0LnN0eWxlbGludC5pZ25vcmVkICYmIG9wdGlvbnMuZml4KSB7XG4gICAgICAgICAgICAgIGNvbnN0IGZpeGVkQ3NzID0gcG9zdGNzc1Jlc3VsdC5yb290LnRvU3RyaW5nKFxuICAgICAgICAgICAgICAgIHBvc3Rjc3NSZXN1bHQub3B0cy5zeW50YXhcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgZml4RmlsZSA9IHBpZnkoZnMud3JpdGVGaWxlKShhYnNvbHV0ZUZpbGVwYXRoLCBmaXhlZENzcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmaXhGaWxlLnRoZW4oKCkgPT5cbiAgICAgICAgICAgICAgc3R5bGVsaW50Ll9jcmVhdGVTdHlsZWxpbnRSZXN1bHQocG9zdGNzc1Jlc3VsdCwgYWJzb2x1dGVGaWxlcGF0aClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goaGFuZGxlRXJyb3IpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChnZXRTdHlsZWxpbnRSZXN1bHRzKTtcbiAgICB9KVxuICAgIC50aGVuKHN0eWxlbGludFJlc3VsdHMgPT4ge1xuICAgICAgaWYgKHVzZUNhY2hlKSB7XG4gICAgICAgIGZpbGVDYWNoZS5yZWNvbmNpbGUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcmVwYXJlUmV0dXJuVmFsdWUoc3R5bGVsaW50UmVzdWx0cyk7XG4gICAgfSk7XG5cbiAgZnVuY3Rpb24gcHJlcGFyZVJldHVyblZhbHVlKFxuICAgIHN0eWxlbGludFJlc3VsdHMgLyo6IEFycmF5PHN0eWxlbGludCRyZXN1bHQ+Ki9cbiAgKSAvKjogc3R5bGVsaW50JHN0YW5kYWxvbmVSZXR1cm5WYWx1ZSovIHtcbiAgICBjb25zdCBlcnJvcmVkID0gc3R5bGVsaW50UmVzdWx0cy5zb21lKFxuICAgICAgcmVzdWx0ID0+IHJlc3VsdC5lcnJvcmVkIHx8IHJlc3VsdC5wYXJzZUVycm9ycy5sZW5ndGggPiAwXG4gICAgKTtcbiAgICBjb25zdCByZXR1cm5WYWx1ZSAvKjogc3R5bGVsaW50JHN0YW5kYWxvbmVSZXR1cm5WYWx1ZSovID0ge1xuICAgICAgZXJyb3JlZCxcbiAgICAgIG91dHB1dDogZm9ybWF0dGVyRnVuY3Rpb24oc3R5bGVsaW50UmVzdWx0cyksXG4gICAgICByZXN1bHRzOiBzdHlsZWxpbnRSZXN1bHRzXG4gICAgfTtcbiAgICBpZiAocmVwb3J0TmVlZGxlc3NEaXNhYmxlcykge1xuICAgICAgcmV0dXJuVmFsdWUubmVlZGxlc3NEaXNhYmxlcyA9IG5lZWRsZXNzRGlzYWJsZXMoc3R5bGVsaW50UmVzdWx0cyk7XG4gICAgfVxuICAgIGRlYnVnKGBMaW50aW5nIGNvbXBsZXRlIGluICR7RGF0ZS5ub3coKSAtIHN0YXJ0VGltZX1tc2ApO1xuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyb3IgLyo6IE9iamVjdCovKSB7XG4gIGlmIChlcnJvci5uYW1lID09PSBcIkNzc1N5bnRheEVycm9yXCIpIHtcbiAgICByZXR1cm4gY29udmVydENzc1N5bnRheEVycm9yVG9SZXN1bHQoZXJyb3IpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbi8vIEJ5IGNvbnZlcnRpbmcgc3ludGF4IGVycm9ycyB0byBzdHlsZWxpbnQgcmVzdWx0cyxcbi8vIHdlIGNhbiBjb250cm9sIHRoZWlyIGFwcGVhcmFuY2UgaW4gdGhlIGZvcm1hdHRlZCBvdXRwdXRcbi8vIGFuZCBvdGhlciB0b29scyBsaWtlIGVkaXRvciBwbHVnaW5zIGNhbiBkZWNpZGUgaG93IHRvXG4vLyBwcmVzZW50IHRoZW0sIGFzIHdlbGxcbmZ1bmN0aW9uIGNvbnZlcnRDc3NTeW50YXhFcnJvclRvUmVzdWx0KFxuICBlcnJvciAvKjogQ3NzU3ludGF4RXJyb3JUKi9cbikgLyo6IHN0eWxlbGludCRyZXN1bHQqLyB7XG4gIGlmIChlcnJvci5uYW1lICE9PSBcIkNzc1N5bnRheEVycm9yXCIpIHtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc291cmNlOiBlcnJvci5maWxlIHx8IFwiPGlucHV0IGNzcyAxPlwiLFxuICAgIGRlcHJlY2F0aW9uczogW10sXG4gICAgaW52YWxpZE9wdGlvbldhcm5pbmdzOiBbXSxcbiAgICBwYXJzZUVycm9yczogW10sXG4gICAgZXJyb3JlZDogdHJ1ZSxcbiAgICB3YXJuaW5nczogW1xuICAgICAge1xuICAgICAgICBsaW5lOiBlcnJvci5saW5lLFxuICAgICAgICBjb2x1bW46IGVycm9yLmNvbHVtbixcbiAgICAgICAgcnVsZTogZXJyb3IubmFtZSxcbiAgICAgICAgc2V2ZXJpdHk6IFwiZXJyb3JcIixcbiAgICAgICAgdGV4dDogZXJyb3IucmVhc29uICsgXCIgKFwiICsgZXJyb3IubmFtZSArIFwiKVwiXG4gICAgICB9XG4gICAgXVxuICB9O1xufVxuIl19