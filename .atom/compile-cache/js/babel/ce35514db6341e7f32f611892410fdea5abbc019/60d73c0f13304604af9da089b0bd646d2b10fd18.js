
"use strict";
var _ = require("lodash");
var assignDisabledRanges = require("./assignDisabledRanges");
var configurationError = require("./utils/configurationError");
var path = require("path");
var ruleDefinitions = require("./rules");

// Run stylelint on a PostCSS Result, either one that is provided
// or one that we create
module.exports = function (stylelint, /*: stylelint$internalApi*/
options /*: {
        code?: string,
        codeFilename?: string, // Must be an absolute file path
        filePath?: string, // Must be an absolute file path
        existingPostcssResult?: Object,
        }*/
) /*: Promise<Object>*/{
  options = options || {};

  if (!options.filePath && options.code === undefined && !options.existingPostcssResult) {
    return Promise.reject(new Error("You must provide filePath, code, or existingPostcssResult"));
  }

  var isCodeNotFile = options.code !== undefined;

  var inputFilePath = isCodeNotFile ? options.codeFilename : options.filePath;
  if (inputFilePath !== undefined && !path.isAbsolute(inputFilePath)) {
    if (isCodeNotFile) {
      return Promise.reject(new Error("codeFilename must be an absolute path"));
    } else {
      return Promise.reject(new Error("filePath must be an absolute path"));
    }
  }

  var getIsIgnored = stylelint.isPathIgnored(inputFilePath)["catch"](function (err) {
    if (isCodeNotFile && err.code === "ENOENT") return false;
    throw err;
  });

  return getIsIgnored.then(function (isIgnored) {
    if (isIgnored) {
      var postcssResult = options.existingPostcssResult || createEmptyPostcssResult(inputFilePath);
      postcssResult.stylelint = postcssResult.stylelint || {};
      postcssResult.stylelint.ignored = true;
      postcssResult.standaloneIgnored = true; // TODO: remove need for this
      return postcssResult;
    }

    var configSearchPath = stylelint._options.configFile || inputFilePath;

    var getConfig = stylelint.getConfigForFile(configSearchPath)["catch"](function (err) {
      if (isCodeNotFile && err.code === "ENOENT") return stylelint.getConfigForFile(process.cwd());
      throw err;
    });

    return getConfig.then(function (result) {
      var config = result.config;
      var existingPostcssResult = options.existingPostcssResult;

      if (existingPostcssResult) {
        return lintPostcssResult(stylelint, existingPostcssResult, config).then(function () {
          return existingPostcssResult;
        });
      }

      return stylelint._getPostcssResult({
        code: options.code,
        codeFilename: options.codeFilename,
        filePath: inputFilePath,
        codeProcessors: config.codeProcessors
      }).then(function (postcssResult) {
        return lintPostcssResult(stylelint, postcssResult, config).then(function () {
          return postcssResult;
        });
      });
    });
  });
};

function lintPostcssResult(stylelint, /*: stylelint$internalApi*/
postcssResult, /*: Object*/
config /*: stylelint$config*/
) /*: Promise<>*/{
  postcssResult.stylelint = postcssResult.stylelint || {};
  postcssResult.stylelint.ruleSeverities = {};
  postcssResult.stylelint.customMessages = {};
  postcssResult.stylelint.quiet = config.quiet;

  var postcssRoot = postcssResult.root;
  assignDisabledRanges(postcssRoot, postcssResult);
  if (stylelint._options.reportNeedlessDisables || stylelint._options.ignoreDisables) {
    postcssResult.stylelint.ignoreDisables = true;
  }

  // Promises for the rules. Although the rule code runs synchronously now,
  // the use of Promises makes it compatible with the possibility of async
  // rules down the line.
  var performRules = [];

  var rules = config.rules ? Object.keys(config.rules) : [];

  rules.forEach(function (ruleName) {
    var ruleFunction = ruleDefinitions[ruleName] || _.get(config, ["pluginFunctions", ruleName]);

    if (ruleFunction === undefined) {
      throw configurationError("Undefined rule " + ruleName);
    }

    var ruleSettings = _.get(config, ["rules", ruleName]);
    if (ruleSettings === null || ruleSettings[0] === null) {
      return;
    }

    var primaryOption = ruleSettings[0];
    var secondaryOptions = ruleSettings[1];

    // Log the rule's severity in the PostCSS result
    var defaultSeverity = config.defaultSeverity || "error";
    postcssResult.stylelint.ruleSeverities[ruleName] = _.get(secondaryOptions, "severity", defaultSeverity);
    postcssResult.stylelint.customMessages[ruleName] = _.get(secondaryOptions, "message");

    var performRule = Promise.resolve().then(function () {
      return ruleFunction(primaryOption, secondaryOptions)(postcssRoot, postcssResult);
    });
    performRules.push(performRule);
  });

  return Promise.all(performRules);
}

function createEmptyPostcssResult(filePath /*:: ?: string*/) /*: Object*/{
  return {
    root: {
      source: {
        input: { file: filePath }
      }
    },
    messages: [],
    stylelint: { stylelintError: null }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,