
"use strict";
var _ = require("lodash");
var augmentConfig = require("./augmentConfig");
var cosmiconfig = require("cosmiconfig");
var createStylelintResult = require("./createStylelintResult");
var getConfigForFile = require("./getConfigForFile");
var getPostcssResult = require("./getPostcssResult");
var isPathIgnored = require("./isPathIgnored");
var lintSource = require("./lintSource");

// The stylelint "internal API" is passed among functions
// so that methods on a stylelint instance can invoke
// each other while sharing options and caches
module.exports = function (options /*: stylelint$options*/
) /*: stylelint$internalApi*/{
  options = options || {};
  var stylelint /*: Object*/ = { _options: options };

  // Two separate explorers so they can each have their own transform
  // function whose results are cached by cosmiconfig
  stylelint._fullExplorer = cosmiconfig("stylelint", {
    argv: false,
    rcExtensions: true,
    transform: _.partial(augmentConfig.augmentConfigFull, stylelint)
  });
  stylelint._extendExplorer = cosmiconfig(null, {
    argv: false,
    transform: _.partial(augmentConfig.augmentConfigExtended, stylelint)
  });

  stylelint._specifiedConfigCache = new Map();
  stylelint._postcssResultCache = new Map();
  stylelint._createStylelintResult = _.partial(createStylelintResult, stylelint);
  stylelint._getPostcssResult = _.partial(getPostcssResult, stylelint);
  stylelint._lintSource = _.partial(lintSource, stylelint);

  stylelint.getConfigForFile = _.partial(getConfigForFile, stylelint);
  stylelint.isPathIgnored = _.partial(isPathIgnored, stylelint);

  return stylelint;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2plc3VzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1zdHlsZWxpbnQvbm9kZV9tb2R1bGVzL3N0eWxlbGludC9saWIvY3JlYXRlU3R5bGVsaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxZQUFZLENBQUM7QUFDYixJQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDNUIsSUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDakQsSUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzNDLElBQU0scUJBQXFCLEdBQUcsT0FBTyxDQUFDLHlCQUF5QixDQUFDLENBQUM7QUFDakUsSUFBTSxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUN2RCxJQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQ3ZELElBQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ2pELElBQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQzs7Ozs7QUFLM0MsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUNmLE9BQU87NkJBQ3FCO0FBQzVCLFNBQU8sR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDO0FBQ3hCLE1BQU0sU0FBUyxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLENBQUM7Ozs7QUFJckQsV0FBUyxDQUFDLGFBQWEsR0FBRyxXQUFXLENBQUMsV0FBVyxFQUFFO0FBQ2pELFFBQUksRUFBRSxLQUFLO0FBQ1gsZ0JBQVksRUFBRSxJQUFJO0FBQ2xCLGFBQVMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsRUFBRSxTQUFTLENBQUM7R0FDakUsQ0FBQyxDQUFDO0FBQ0gsV0FBUyxDQUFDLGVBQWUsR0FBRyxXQUFXLENBQUMsSUFBSSxFQUFFO0FBQzVDLFFBQUksRUFBRSxLQUFLO0FBQ1gsYUFBUyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLHFCQUFxQixFQUFFLFNBQVMsQ0FBQztHQUNyRSxDQUFDLENBQUM7O0FBRUgsV0FBUyxDQUFDLHFCQUFxQixHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7QUFDNUMsV0FBUyxDQUFDLG1CQUFtQixHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7QUFDMUMsV0FBUyxDQUFDLHNCQUFzQixHQUFHLENBQUMsQ0FBQyxPQUFPLENBQzFDLHFCQUFxQixFQUNyQixTQUFTLENBQ1YsQ0FBQztBQUNGLFdBQVMsQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3JFLFdBQVMsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7O0FBRXpELFdBQVMsQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3BFLFdBQVMsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUM7O0FBRTlELFNBQU8sU0FBUyxDQUFDO0NBQ2xCLENBQUMiLCJmaWxlIjoiL2hvbWUvamVzdXMvLmF0b20vcGFja2FnZXMvbGludGVyLXN0eWxlbGludC9ub2RlX21vZHVsZXMvc3R5bGVsaW50L2xpYi9jcmVhdGVTdHlsZWxpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcbmNvbnN0IGF1Z21lbnRDb25maWcgPSByZXF1aXJlKFwiLi9hdWdtZW50Q29uZmlnXCIpO1xuY29uc3QgY29zbWljb25maWcgPSByZXF1aXJlKFwiY29zbWljb25maWdcIik7XG5jb25zdCBjcmVhdGVTdHlsZWxpbnRSZXN1bHQgPSByZXF1aXJlKFwiLi9jcmVhdGVTdHlsZWxpbnRSZXN1bHRcIik7XG5jb25zdCBnZXRDb25maWdGb3JGaWxlID0gcmVxdWlyZShcIi4vZ2V0Q29uZmlnRm9yRmlsZVwiKTtcbmNvbnN0IGdldFBvc3Rjc3NSZXN1bHQgPSByZXF1aXJlKFwiLi9nZXRQb3N0Y3NzUmVzdWx0XCIpO1xuY29uc3QgaXNQYXRoSWdub3JlZCA9IHJlcXVpcmUoXCIuL2lzUGF0aElnbm9yZWRcIik7XG5jb25zdCBsaW50U291cmNlID0gcmVxdWlyZShcIi4vbGludFNvdXJjZVwiKTtcblxuLy8gVGhlIHN0eWxlbGludCBcImludGVybmFsIEFQSVwiIGlzIHBhc3NlZCBhbW9uZyBmdW5jdGlvbnNcbi8vIHNvIHRoYXQgbWV0aG9kcyBvbiBhIHN0eWxlbGludCBpbnN0YW5jZSBjYW4gaW52b2tlXG4vLyBlYWNoIG90aGVyIHdoaWxlIHNoYXJpbmcgb3B0aW9ucyBhbmQgY2FjaGVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFxuICBvcHRpb25zIC8qOiBzdHlsZWxpbnQkb3B0aW9ucyovXG4pIC8qOiBzdHlsZWxpbnQkaW50ZXJuYWxBcGkqLyB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBzdHlsZWxpbnQgLyo6IE9iamVjdCovID0geyBfb3B0aW9uczogb3B0aW9ucyB9O1xuXG4gIC8vIFR3byBzZXBhcmF0ZSBleHBsb3JlcnMgc28gdGhleSBjYW4gZWFjaCBoYXZlIHRoZWlyIG93biB0cmFuc2Zvcm1cbiAgLy8gZnVuY3Rpb24gd2hvc2UgcmVzdWx0cyBhcmUgY2FjaGVkIGJ5IGNvc21pY29uZmlnXG4gIHN0eWxlbGludC5fZnVsbEV4cGxvcmVyID0gY29zbWljb25maWcoXCJzdHlsZWxpbnRcIiwge1xuICAgIGFyZ3Y6IGZhbHNlLFxuICAgIHJjRXh0ZW5zaW9uczogdHJ1ZSxcbiAgICB0cmFuc2Zvcm06IF8ucGFydGlhbChhdWdtZW50Q29uZmlnLmF1Z21lbnRDb25maWdGdWxsLCBzdHlsZWxpbnQpXG4gIH0pO1xuICBzdHlsZWxpbnQuX2V4dGVuZEV4cGxvcmVyID0gY29zbWljb25maWcobnVsbCwge1xuICAgIGFyZ3Y6IGZhbHNlLFxuICAgIHRyYW5zZm9ybTogXy5wYXJ0aWFsKGF1Z21lbnRDb25maWcuYXVnbWVudENvbmZpZ0V4dGVuZGVkLCBzdHlsZWxpbnQpXG4gIH0pO1xuXG4gIHN0eWxlbGludC5fc3BlY2lmaWVkQ29uZmlnQ2FjaGUgPSBuZXcgTWFwKCk7XG4gIHN0eWxlbGludC5fcG9zdGNzc1Jlc3VsdENhY2hlID0gbmV3IE1hcCgpO1xuICBzdHlsZWxpbnQuX2NyZWF0ZVN0eWxlbGludFJlc3VsdCA9IF8ucGFydGlhbChcbiAgICBjcmVhdGVTdHlsZWxpbnRSZXN1bHQsXG4gICAgc3R5bGVsaW50XG4gICk7XG4gIHN0eWxlbGludC5fZ2V0UG9zdGNzc1Jlc3VsdCA9IF8ucGFydGlhbChnZXRQb3N0Y3NzUmVzdWx0LCBzdHlsZWxpbnQpO1xuICBzdHlsZWxpbnQuX2xpbnRTb3VyY2UgPSBfLnBhcnRpYWwobGludFNvdXJjZSwgc3R5bGVsaW50KTtcblxuICBzdHlsZWxpbnQuZ2V0Q29uZmlnRm9yRmlsZSA9IF8ucGFydGlhbChnZXRDb25maWdGb3JGaWxlLCBzdHlsZWxpbnQpO1xuICBzdHlsZWxpbnQuaXNQYXRoSWdub3JlZCA9IF8ucGFydGlhbChpc1BhdGhJZ25vcmVkLCBzdHlsZWxpbnQpO1xuXG4gIHJldHVybiBzdHlsZWxpbnQ7XG59O1xuIl19