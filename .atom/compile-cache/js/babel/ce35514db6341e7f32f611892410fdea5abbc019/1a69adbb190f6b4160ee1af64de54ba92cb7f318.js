
"use strict";

/**
 * Compares a string to a second value that, if it fits a certain convention,
 * is converted to a regular expression before the comparison.
 * If it doesn't fit the convention, then two strings are compared.
 *
 * Any strings starting and ending with `/` are interpreted
 * as regular expressions.
 */
module.exports = function matchesStringOrRegExp(input, /*: string | Array<string>*/
comparison /*: string | Array<string>*/
) /*: false | { match: string, pattern: string}*/{
  if (!Array.isArray(input)) {
    return testAgainstStringOrArray(input, comparison);
  }

  for (var inputItem of input) {
    var testResult = testAgainstStringOrArray(inputItem, comparison);
    if (testResult) {
      return testResult;
    }
  }

  return false;
};

function testAgainstStringOrArray(value, comparison) {
  if (!Array.isArray(comparison)) {
    return testAgainstString(value, comparison);
  }

  for (var comparisonItem of comparison) {
    var testResult = testAgainstString(value, comparisonItem);
    if (testResult) {
      return testResult;
    }
  }
  return false;
}

function testAgainstString(value, comparison) {
  var firstComparisonChar = comparison[0];
  var lastComparisonChar = comparison[comparison.length - 1];
  var secondToLastComparisonChar = comparison[comparison.length - 2];

  var comparisonIsRegex = firstComparisonChar === "/" && (lastComparisonChar === "/" || secondToLastComparisonChar === "/" && lastComparisonChar === "i");

  var hasCaseInsensitiveFlag = comparisonIsRegex && lastComparisonChar === "i";

  if (comparisonIsRegex) {
    var valueMatches = hasCaseInsensitiveFlag ? new RegExp(comparison.slice(1, -2), "i").test(value) : new RegExp(comparison.slice(1, -1)).test(value);
    return valueMatches ? { match: value, pattern: comparison } : false;
  }

  return value === comparison ? { match: value, pattern: comparison } : false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2plc3VzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1zdHlsZWxpbnQvbm9kZV9tb2R1bGVzL3N0eWxlbGludC9saWIvdXRpbHMvbWF0Y2hlc1N0cmluZ09yUmVnRXhwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxZQUFZLENBQUM7Ozs7Ozs7Ozs7QUFVYixNQUFNLENBQUMsT0FBTyxHQUFHLFNBQVMscUJBQXFCLENBQzdDLEtBQUs7QUFDTCxVQUFVO2lEQUNzQztBQUNoRCxNQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUN6QixXQUFPLHdCQUF3QixDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztHQUNwRDs7QUFFRCxPQUFLLElBQU0sU0FBUyxJQUFJLEtBQUssRUFBRTtBQUM3QixRQUFNLFVBQVUsR0FBRyx3QkFBd0IsQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDbkUsUUFBSSxVQUFVLEVBQUU7QUFDZCxhQUFPLFVBQVUsQ0FBQztLQUNuQjtHQUNGOztBQUVELFNBQU8sS0FBSyxDQUFDO0NBQ2QsQ0FBQzs7QUFFRixTQUFTLHdCQUF3QixDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUU7QUFDbkQsTUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUU7QUFDOUIsV0FBTyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7R0FDN0M7O0FBRUQsT0FBSyxJQUFNLGNBQWMsSUFBSSxVQUFVLEVBQUU7QUFDdkMsUUFBTSxVQUFVLEdBQUcsaUJBQWlCLENBQUMsS0FBSyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBQzVELFFBQUksVUFBVSxFQUFFO0FBQ2QsYUFBTyxVQUFVLENBQUM7S0FDbkI7R0FDRjtBQUNELFNBQU8sS0FBSyxDQUFDO0NBQ2Q7O0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFO0FBQzVDLE1BQU0sbUJBQW1CLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFDLE1BQU0sa0JBQWtCLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDN0QsTUFBTSwwQkFBMEIsR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQzs7QUFFckUsTUFBTSxpQkFBaUIsR0FDckIsbUJBQW1CLEtBQUssR0FBRyxLQUMxQixrQkFBa0IsS0FBSyxHQUFHLElBQ3hCLDBCQUEwQixLQUFLLEdBQUcsSUFBSSxrQkFBa0IsS0FBSyxHQUFHLENBQUMsQUFBQyxDQUFDOztBQUV4RSxNQUFNLHNCQUFzQixHQUMxQixpQkFBaUIsSUFBSSxrQkFBa0IsS0FBSyxHQUFHLENBQUM7O0FBRWxELE1BQUksaUJBQWlCLEVBQUU7QUFDckIsUUFBTSxZQUFZLEdBQUcsc0JBQXNCLEdBQ3ZDLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUNwRCxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BELFdBQU8sWUFBWSxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsS0FBSyxDQUFDO0dBQ3JFOztBQUVELFNBQU8sS0FBSyxLQUFLLFVBQVUsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEtBQUssQ0FBQztDQUM3RSIsImZpbGUiOiIvaG9tZS9qZXN1cy8uYXRvbS9wYWNrYWdlcy9saW50ZXItc3R5bGVsaW50L25vZGVfbW9kdWxlcy9zdHlsZWxpbnQvbGliL3V0aWxzL21hdGNoZXNTdHJpbmdPclJlZ0V4cC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb21wYXJlcyBhIHN0cmluZyB0byBhIHNlY29uZCB2YWx1ZSB0aGF0LCBpZiBpdCBmaXRzIGEgY2VydGFpbiBjb252ZW50aW9uLFxuICogaXMgY29udmVydGVkIHRvIGEgcmVndWxhciBleHByZXNzaW9uIGJlZm9yZSB0aGUgY29tcGFyaXNvbi5cbiAqIElmIGl0IGRvZXNuJ3QgZml0IHRoZSBjb252ZW50aW9uLCB0aGVuIHR3byBzdHJpbmdzIGFyZSBjb21wYXJlZC5cbiAqXG4gKiBBbnkgc3RyaW5ncyBzdGFydGluZyBhbmQgZW5kaW5nIHdpdGggYC9gIGFyZSBpbnRlcnByZXRlZFxuICogYXMgcmVndWxhciBleHByZXNzaW9ucy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtYXRjaGVzU3RyaW5nT3JSZWdFeHAoXG4gIGlucHV0IC8qOiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+Ki8sXG4gIGNvbXBhcmlzb24gLyo6IHN0cmluZyB8IEFycmF5PHN0cmluZz4qL1xuKSAvKjogZmFsc2UgfCB7IG1hdGNoOiBzdHJpbmcsIHBhdHRlcm46IHN0cmluZ30qLyB7XG4gIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICByZXR1cm4gdGVzdEFnYWluc3RTdHJpbmdPckFycmF5KGlucHV0LCBjb21wYXJpc29uKTtcbiAgfVxuXG4gIGZvciAoY29uc3QgaW5wdXRJdGVtIG9mIGlucHV0KSB7XG4gICAgY29uc3QgdGVzdFJlc3VsdCA9IHRlc3RBZ2FpbnN0U3RyaW5nT3JBcnJheShpbnB1dEl0ZW0sIGNvbXBhcmlzb24pO1xuICAgIGlmICh0ZXN0UmVzdWx0KSB7XG4gICAgICByZXR1cm4gdGVzdFJlc3VsdDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5mdW5jdGlvbiB0ZXN0QWdhaW5zdFN0cmluZ09yQXJyYXkodmFsdWUsIGNvbXBhcmlzb24pIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGNvbXBhcmlzb24pKSB7XG4gICAgcmV0dXJuIHRlc3RBZ2FpbnN0U3RyaW5nKHZhbHVlLCBjb21wYXJpc29uKTtcbiAgfVxuXG4gIGZvciAoY29uc3QgY29tcGFyaXNvbkl0ZW0gb2YgY29tcGFyaXNvbikge1xuICAgIGNvbnN0IHRlc3RSZXN1bHQgPSB0ZXN0QWdhaW5zdFN0cmluZyh2YWx1ZSwgY29tcGFyaXNvbkl0ZW0pO1xuICAgIGlmICh0ZXN0UmVzdWx0KSB7XG4gICAgICByZXR1cm4gdGVzdFJlc3VsdDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiB0ZXN0QWdhaW5zdFN0cmluZyh2YWx1ZSwgY29tcGFyaXNvbikge1xuICBjb25zdCBmaXJzdENvbXBhcmlzb25DaGFyID0gY29tcGFyaXNvblswXTtcbiAgY29uc3QgbGFzdENvbXBhcmlzb25DaGFyID0gY29tcGFyaXNvbltjb21wYXJpc29uLmxlbmd0aCAtIDFdO1xuICBjb25zdCBzZWNvbmRUb0xhc3RDb21wYXJpc29uQ2hhciA9IGNvbXBhcmlzb25bY29tcGFyaXNvbi5sZW5ndGggLSAyXTtcblxuICBjb25zdCBjb21wYXJpc29uSXNSZWdleCA9XG4gICAgZmlyc3RDb21wYXJpc29uQ2hhciA9PT0gXCIvXCIgJiZcbiAgICAobGFzdENvbXBhcmlzb25DaGFyID09PSBcIi9cIiB8fFxuICAgICAgKHNlY29uZFRvTGFzdENvbXBhcmlzb25DaGFyID09PSBcIi9cIiAmJiBsYXN0Q29tcGFyaXNvbkNoYXIgPT09IFwiaVwiKSk7XG5cbiAgY29uc3QgaGFzQ2FzZUluc2Vuc2l0aXZlRmxhZyA9XG4gICAgY29tcGFyaXNvbklzUmVnZXggJiYgbGFzdENvbXBhcmlzb25DaGFyID09PSBcImlcIjtcblxuICBpZiAoY29tcGFyaXNvbklzUmVnZXgpIHtcbiAgICBjb25zdCB2YWx1ZU1hdGNoZXMgPSBoYXNDYXNlSW5zZW5zaXRpdmVGbGFnXG4gICAgICA/IG5ldyBSZWdFeHAoY29tcGFyaXNvbi5zbGljZSgxLCAtMiksIFwiaVwiKS50ZXN0KHZhbHVlKVxuICAgICAgOiBuZXcgUmVnRXhwKGNvbXBhcmlzb24uc2xpY2UoMSwgLTEpKS50ZXN0KHZhbHVlKTtcbiAgICByZXR1cm4gdmFsdWVNYXRjaGVzID8geyBtYXRjaDogdmFsdWUsIHBhdHRlcm46IGNvbXBhcmlzb24gfSA6IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlID09PSBjb21wYXJpc29uID8geyBtYXRjaDogdmFsdWUsIHBhdHRlcm46IGNvbXBhcmlzb24gfSA6IGZhbHNlO1xufVxuIl19