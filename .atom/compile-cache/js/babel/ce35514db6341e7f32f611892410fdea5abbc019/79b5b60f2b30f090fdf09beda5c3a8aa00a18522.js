
"use strict";
var _ = require("lodash");

module.exports = function (stylelint, /*: stylelint$internalApi*/
postcssResult, /*: Object*/
filePath /*:: ?: string*/
) /*: Promise<stylelint$result>*/{
  var source = !postcssResult.root.source ? undefined : postcssResult.root.source.input.file || postcssResult.root.source.input.id;

  // Strip out deprecation warnings from the messages
  var deprecationMessages = _.remove(postcssResult.messages, {
    stylelintType: "deprecation"
  });
  var deprecations = deprecationMessages.map(function (deprecationMessage) {
    return {
      text: deprecationMessage.text,
      reference: deprecationMessage.stylelintReference
    };
  });

  // Also strip out invalid options
  var invalidOptionMessages = _.remove(postcssResult.messages, {
    stylelintType: "invalidOption"
  });
  var invalidOptionWarnings = invalidOptionMessages.map(function (invalidOptionMessage) {
    return {
      text: invalidOptionMessage.text
    };
  });

  var parseErrors = _.remove(postcssResult.messages, {
    stylelintType: "parseError"
  });

  // This defines the stylelint result object that formatters receive
  var stylelintResult = {
    source: source,
    deprecations: deprecations,
    invalidOptionWarnings: invalidOptionWarnings,
    parseErrors: parseErrors,
    errored: postcssResult.stylelint.stylelintError,
    warnings: postcssResult.messages.map(function (message) {
      return {
        line: message.line,
        column: message.column,
        rule: message.rule,
        severity: message.severity,
        text: message.text
      };
    }),
    ignored: postcssResult.stylelint.ignored,
    _postcssResult: postcssResult
  };

  return stylelint.getConfigForFile(filePath).then(function (result) {
    var config = result.config;

    if (config.resultProcessors) {
      config.resultProcessors.forEach(function (resultProcessor) {
        // Result processors might just mutate the result object,
        // or might return a new one
        var returned = resultProcessor(stylelintResult, source);
        if (returned) {
          stylelintResult = returned;
        }
      });
    }

    return stylelintResult;
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2plc3VzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1zdHlsZWxpbnQvbm9kZV9tb2R1bGVzL3N0eWxlbGludC9saWIvY3JlYXRlU3R5bGVsaW50UmVzdWx0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxZQUFZLENBQUM7QUFDYixJQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7O0FBRTVCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFDZixTQUFTO0FBQ1QsYUFBYTtBQUNiLFFBQVE7aUNBQ3dCO0FBQ2hDLE1BQU0sTUFBTSxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQ3JDLFNBQVMsR0FDVCxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUNwQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDOzs7QUFHdkMsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUU7QUFDM0QsaUJBQWEsRUFBRSxhQUFhO0dBQzdCLENBQUMsQ0FBQztBQUNILE1BQU0sWUFBWSxHQUFHLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxVQUFBLGtCQUFrQixFQUFJO0FBQ2pFLFdBQU87QUFDTCxVQUFJLEVBQUUsa0JBQWtCLENBQUMsSUFBSTtBQUM3QixlQUFTLEVBQUUsa0JBQWtCLENBQUMsa0JBQWtCO0tBQ2pELENBQUM7R0FDSCxDQUFDLENBQUM7OztBQUdILE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFO0FBQzdELGlCQUFhLEVBQUUsZUFBZTtHQUMvQixDQUFDLENBQUM7QUFDSCxNQUFNLHFCQUFxQixHQUFHLHFCQUFxQixDQUFDLEdBQUcsQ0FDckQsVUFBQSxvQkFBb0IsRUFBSTtBQUN0QixXQUFPO0FBQ0wsVUFBSSxFQUFFLG9CQUFvQixDQUFDLElBQUk7S0FDaEMsQ0FBQztHQUNILENBQ0YsQ0FBQzs7QUFFRixNQUFNLFdBQVcsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUU7QUFDbkQsaUJBQWEsRUFBRSxZQUFZO0dBQzVCLENBQUMsQ0FBQzs7O0FBR0gsTUFBSSxlQUFlLEdBQUc7QUFDcEIsVUFBTSxFQUFOLE1BQU07QUFDTixnQkFBWSxFQUFaLFlBQVk7QUFDWix5QkFBcUIsRUFBckIscUJBQXFCO0FBQ3JCLGVBQVcsRUFBWCxXQUFXO0FBQ1gsV0FBTyxFQUFFLGFBQWEsQ0FBQyxTQUFTLENBQUMsY0FBYztBQUMvQyxZQUFRLEVBQUUsYUFBYSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBQSxPQUFPLEVBQUk7QUFDOUMsYUFBTztBQUNMLFlBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtBQUNsQixjQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU07QUFDdEIsWUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJO0FBQ2xCLGdCQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7QUFDMUIsWUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJO09BQ25CLENBQUM7S0FDSCxDQUFDO0FBQ0YsV0FBTyxFQUFFLGFBQWEsQ0FBQyxTQUFTLENBQUMsT0FBTztBQUN4QyxrQkFBYyxFQUFFLGFBQWE7R0FDOUIsQ0FBQzs7QUFFRixTQUFPLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxNQUFNLEVBQUk7QUFDekQsUUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQzs7QUFFN0IsUUFBSSxNQUFNLENBQUMsZ0JBQWdCLEVBQUU7QUFDM0IsWUFBTSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxVQUFBLGVBQWUsRUFBSTs7O0FBR2pELFlBQU0sUUFBUSxHQUFHLGVBQWUsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDMUQsWUFBSSxRQUFRLEVBQUU7QUFDWix5QkFBZSxHQUFHLFFBQVEsQ0FBQztTQUM1QjtPQUNGLENBQUMsQ0FBQztLQUNKOztBQUVELFdBQU8sZUFBZSxDQUFDO0dBQ3hCLENBQUMsQ0FBQztDQUNKLENBQUMiLCJmaWxlIjoiL2hvbWUvamVzdXMvLmF0b20vcGFja2FnZXMvbGludGVyLXN0eWxlbGludC9ub2RlX21vZHVsZXMvc3R5bGVsaW50L2xpYi9jcmVhdGVTdHlsZWxpbnRSZXN1bHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihcbiAgc3R5bGVsaW50IC8qOiBzdHlsZWxpbnQkaW50ZXJuYWxBcGkqLyxcbiAgcG9zdGNzc1Jlc3VsdCAvKjogT2JqZWN0Ki8sXG4gIGZpbGVQYXRoIC8qOjogPzogc3RyaW5nKi9cbikgLyo6IFByb21pc2U8c3R5bGVsaW50JHJlc3VsdD4qLyB7XG4gIGNvbnN0IHNvdXJjZSA9ICFwb3N0Y3NzUmVzdWx0LnJvb3Quc291cmNlXG4gICAgPyB1bmRlZmluZWRcbiAgICA6IHBvc3Rjc3NSZXN1bHQucm9vdC5zb3VyY2UuaW5wdXQuZmlsZSB8fFxuICAgICAgcG9zdGNzc1Jlc3VsdC5yb290LnNvdXJjZS5pbnB1dC5pZDtcblxuICAvLyBTdHJpcCBvdXQgZGVwcmVjYXRpb24gd2FybmluZ3MgZnJvbSB0aGUgbWVzc2FnZXNcbiAgY29uc3QgZGVwcmVjYXRpb25NZXNzYWdlcyA9IF8ucmVtb3ZlKHBvc3Rjc3NSZXN1bHQubWVzc2FnZXMsIHtcbiAgICBzdHlsZWxpbnRUeXBlOiBcImRlcHJlY2F0aW9uXCJcbiAgfSk7XG4gIGNvbnN0IGRlcHJlY2F0aW9ucyA9IGRlcHJlY2F0aW9uTWVzc2FnZXMubWFwKGRlcHJlY2F0aW9uTWVzc2FnZSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRleHQ6IGRlcHJlY2F0aW9uTWVzc2FnZS50ZXh0LFxuICAgICAgcmVmZXJlbmNlOiBkZXByZWNhdGlvbk1lc3NhZ2Uuc3R5bGVsaW50UmVmZXJlbmNlXG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gQWxzbyBzdHJpcCBvdXQgaW52YWxpZCBvcHRpb25zXG4gIGNvbnN0IGludmFsaWRPcHRpb25NZXNzYWdlcyA9IF8ucmVtb3ZlKHBvc3Rjc3NSZXN1bHQubWVzc2FnZXMsIHtcbiAgICBzdHlsZWxpbnRUeXBlOiBcImludmFsaWRPcHRpb25cIlxuICB9KTtcbiAgY29uc3QgaW52YWxpZE9wdGlvbldhcm5pbmdzID0gaW52YWxpZE9wdGlvbk1lc3NhZ2VzLm1hcChcbiAgICBpbnZhbGlkT3B0aW9uTWVzc2FnZSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0ZXh0OiBpbnZhbGlkT3B0aW9uTWVzc2FnZS50ZXh0XG4gICAgICB9O1xuICAgIH1cbiAgKTtcblxuICBjb25zdCBwYXJzZUVycm9ycyA9IF8ucmVtb3ZlKHBvc3Rjc3NSZXN1bHQubWVzc2FnZXMsIHtcbiAgICBzdHlsZWxpbnRUeXBlOiBcInBhcnNlRXJyb3JcIlxuICB9KTtcblxuICAvLyBUaGlzIGRlZmluZXMgdGhlIHN0eWxlbGludCByZXN1bHQgb2JqZWN0IHRoYXQgZm9ybWF0dGVycyByZWNlaXZlXG4gIGxldCBzdHlsZWxpbnRSZXN1bHQgPSB7XG4gICAgc291cmNlLFxuICAgIGRlcHJlY2F0aW9ucyxcbiAgICBpbnZhbGlkT3B0aW9uV2FybmluZ3MsXG4gICAgcGFyc2VFcnJvcnMsXG4gICAgZXJyb3JlZDogcG9zdGNzc1Jlc3VsdC5zdHlsZWxpbnQuc3R5bGVsaW50RXJyb3IsXG4gICAgd2FybmluZ3M6IHBvc3Rjc3NSZXN1bHQubWVzc2FnZXMubWFwKG1lc3NhZ2UgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGluZTogbWVzc2FnZS5saW5lLFxuICAgICAgICBjb2x1bW46IG1lc3NhZ2UuY29sdW1uLFxuICAgICAgICBydWxlOiBtZXNzYWdlLnJ1bGUsXG4gICAgICAgIHNldmVyaXR5OiBtZXNzYWdlLnNldmVyaXR5LFxuICAgICAgICB0ZXh0OiBtZXNzYWdlLnRleHRcbiAgICAgIH07XG4gICAgfSksXG4gICAgaWdub3JlZDogcG9zdGNzc1Jlc3VsdC5zdHlsZWxpbnQuaWdub3JlZCxcbiAgICBfcG9zdGNzc1Jlc3VsdDogcG9zdGNzc1Jlc3VsdFxuICB9O1xuXG4gIHJldHVybiBzdHlsZWxpbnQuZ2V0Q29uZmlnRm9yRmlsZShmaWxlUGF0aCkudGhlbihyZXN1bHQgPT4ge1xuICAgIGNvbnN0IGNvbmZpZyA9IHJlc3VsdC5jb25maWc7XG5cbiAgICBpZiAoY29uZmlnLnJlc3VsdFByb2Nlc3NvcnMpIHtcbiAgICAgIGNvbmZpZy5yZXN1bHRQcm9jZXNzb3JzLmZvckVhY2gocmVzdWx0UHJvY2Vzc29yID0+IHtcbiAgICAgICAgLy8gUmVzdWx0IHByb2Nlc3NvcnMgbWlnaHQganVzdCBtdXRhdGUgdGhlIHJlc3VsdCBvYmplY3QsXG4gICAgICAgIC8vIG9yIG1pZ2h0IHJldHVybiBhIG5ldyBvbmVcbiAgICAgICAgY29uc3QgcmV0dXJuZWQgPSByZXN1bHRQcm9jZXNzb3Ioc3R5bGVsaW50UmVzdWx0LCBzb3VyY2UpO1xuICAgICAgICBpZiAocmV0dXJuZWQpIHtcbiAgICAgICAgICBzdHlsZWxpbnRSZXN1bHQgPSByZXR1cm5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlbGludFJlc3VsdDtcbiAgfSk7XG59O1xuIl19