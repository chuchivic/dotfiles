
"use strict";

var debug = require("debug")("stylelint:file-cache");
var fileEntryCache = require("file-entry-cache");
var getCacheFile = require("./getCacheFile");
var path = require("path");

var DEFAULT_CACHE_LOCATION = "./.stylelintcache";
var DEFAULT_HASH = "";

function FileCache(cacheLocation, /*: ?string */hashOfConfig /*: ?string */) {
  var cacheFile = path.resolve(getCacheFile(cacheLocation || DEFAULT_CACHE_LOCATION, process.cwd()));
  debug("Cache file is created at " + cacheFile);
  this._fileCache = fileEntryCache.create(cacheFile);
  this._hashOfConfig = hashOfConfig || DEFAULT_HASH;
}

FileCache.prototype.hasFileChanged = function (absoluteFilepath) {
  // Get file descriptor compares current metadata against cached
  // one and stores the result to "changed" prop.w
  var descriptor = this._fileCache.getFileDescriptor(absoluteFilepath);
  var meta = descriptor.meta || {};
  var changed = descriptor.changed || meta.hashOfConfig !== this._hashOfConfig;
  if (!changed) {
    debug("Skip linting " + absoluteFilepath + ". File hasn't changed.");
  }
  // Mutate file descriptor object and store config hash to each file.
  // Running lint with different config should invalidate the cache.
  if (meta.hashOfConfig !== this._hashOfConfig) {
    meta.hashOfConfig = this._hashOfConfig;
  }
  return changed;
};

FileCache.prototype.reconcile = function () {
  this._fileCache.reconcile();
};

FileCache.prototype.destroy = function () {
  this._fileCache.destroy();
};

FileCache.prototype.removeEntry = function (absoluteFilepath) {
  this._fileCache.removeEntry(absoluteFilepath);
};

module.exports = FileCache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2plc3VzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1zdHlsZWxpbnQvbm9kZV9tb2R1bGVzL3N0eWxlbGludC9saWIvdXRpbHMvRmlsZUNhY2hlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxZQUFZLENBQUM7O0FBRWIsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDdkQsSUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDbkQsSUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDL0MsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUU3QixJQUFNLHNCQUFzQixHQUFHLG1CQUFtQixDQUFDO0FBQ25ELElBQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQzs7QUFFeEIsU0FBUyxTQUFTLENBQUMsYUFBYSxnQkFBaUIsWUFBWSxpQkFBaUI7QUFDNUUsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FDNUIsWUFBWSxDQUFDLGFBQWEsSUFBSSxzQkFBc0IsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FDckUsQ0FBQztBQUNGLE9BQUssK0JBQTZCLFNBQVMsQ0FBRyxDQUFDO0FBQy9DLE1BQUksQ0FBQyxVQUFVLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNuRCxNQUFJLENBQUMsYUFBYSxHQUFHLFlBQVksSUFBSSxZQUFZLENBQUM7Q0FDbkQ7O0FBRUQsU0FBUyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsVUFBUyxnQkFBZ0IsRUFBRTs7O0FBRzlELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUN2RSxNQUFNLElBQUksR0FBRyxVQUFVLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztBQUNuQyxNQUFNLE9BQU8sR0FDWCxVQUFVLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxZQUFZLEtBQUssSUFBSSxDQUFDLGFBQWEsQ0FBQztBQUNqRSxNQUFJLENBQUMsT0FBTyxFQUFFO0FBQ1osU0FBSyxtQkFBaUIsZ0JBQWdCLDRCQUF5QixDQUFDO0dBQ2pFOzs7QUFHRCxNQUFJLElBQUksQ0FBQyxZQUFZLEtBQUssSUFBSSxDQUFDLGFBQWEsRUFBRTtBQUM1QyxRQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7R0FDeEM7QUFDRCxTQUFPLE9BQU8sQ0FBQztDQUNoQixDQUFDOztBQUVGLFNBQVMsQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFlBQVc7QUFDekMsTUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztDQUM3QixDQUFDOztBQUVGLFNBQVMsQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFHLFlBQVc7QUFDdkMsTUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztDQUMzQixDQUFDOztBQUVGLFNBQVMsQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLFVBQVMsZ0JBQWdCLEVBQUU7QUFDM0QsTUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztDQUMvQyxDQUFDOztBQUVGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDIiwiZmlsZSI6Ii9ob21lL2plc3VzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1zdHlsZWxpbnQvbm9kZV9tb2R1bGVzL3N0eWxlbGludC9saWIvdXRpbHMvRmlsZUNhY2hlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKShcInN0eWxlbGludDpmaWxlLWNhY2hlXCIpO1xuY29uc3QgZmlsZUVudHJ5Q2FjaGUgPSByZXF1aXJlKFwiZmlsZS1lbnRyeS1jYWNoZVwiKTtcbmNvbnN0IGdldENhY2hlRmlsZSA9IHJlcXVpcmUoXCIuL2dldENhY2hlRmlsZVwiKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcblxuY29uc3QgREVGQVVMVF9DQUNIRV9MT0NBVElPTiA9IFwiLi8uc3R5bGVsaW50Y2FjaGVcIjtcbmNvbnN0IERFRkFVTFRfSEFTSCA9IFwiXCI7XG5cbmZ1bmN0aW9uIEZpbGVDYWNoZShjYWNoZUxvY2F0aW9uIC8qOiA/c3RyaW5nICovLCBoYXNoT2ZDb25maWcgLyo6ID9zdHJpbmcgKi8pIHtcbiAgY29uc3QgY2FjaGVGaWxlID0gcGF0aC5yZXNvbHZlKFxuICAgIGdldENhY2hlRmlsZShjYWNoZUxvY2F0aW9uIHx8IERFRkFVTFRfQ0FDSEVfTE9DQVRJT04sIHByb2Nlc3MuY3dkKCkpXG4gICk7XG4gIGRlYnVnKGBDYWNoZSBmaWxlIGlzIGNyZWF0ZWQgYXQgJHtjYWNoZUZpbGV9YCk7XG4gIHRoaXMuX2ZpbGVDYWNoZSA9IGZpbGVFbnRyeUNhY2hlLmNyZWF0ZShjYWNoZUZpbGUpO1xuICB0aGlzLl9oYXNoT2ZDb25maWcgPSBoYXNoT2ZDb25maWcgfHwgREVGQVVMVF9IQVNIO1xufVxuXG5GaWxlQ2FjaGUucHJvdG90eXBlLmhhc0ZpbGVDaGFuZ2VkID0gZnVuY3Rpb24oYWJzb2x1dGVGaWxlcGF0aCkge1xuICAvLyBHZXQgZmlsZSBkZXNjcmlwdG9yIGNvbXBhcmVzIGN1cnJlbnQgbWV0YWRhdGEgYWdhaW5zdCBjYWNoZWRcbiAgLy8gb25lIGFuZCBzdG9yZXMgdGhlIHJlc3VsdCB0byBcImNoYW5nZWRcIiBwcm9wLndcbiAgY29uc3QgZGVzY3JpcHRvciA9IHRoaXMuX2ZpbGVDYWNoZS5nZXRGaWxlRGVzY3JpcHRvcihhYnNvbHV0ZUZpbGVwYXRoKTtcbiAgY29uc3QgbWV0YSA9IGRlc2NyaXB0b3IubWV0YSB8fCB7fTtcbiAgY29uc3QgY2hhbmdlZCA9XG4gICAgZGVzY3JpcHRvci5jaGFuZ2VkIHx8IG1ldGEuaGFzaE9mQ29uZmlnICE9PSB0aGlzLl9oYXNoT2ZDb25maWc7XG4gIGlmICghY2hhbmdlZCkge1xuICAgIGRlYnVnKGBTa2lwIGxpbnRpbmcgJHthYnNvbHV0ZUZpbGVwYXRofS4gRmlsZSBoYXNuJ3QgY2hhbmdlZC5gKTtcbiAgfVxuICAvLyBNdXRhdGUgZmlsZSBkZXNjcmlwdG9yIG9iamVjdCBhbmQgc3RvcmUgY29uZmlnIGhhc2ggdG8gZWFjaCBmaWxlLlxuICAvLyBSdW5uaW5nIGxpbnQgd2l0aCBkaWZmZXJlbnQgY29uZmlnIHNob3VsZCBpbnZhbGlkYXRlIHRoZSBjYWNoZS5cbiAgaWYgKG1ldGEuaGFzaE9mQ29uZmlnICE9PSB0aGlzLl9oYXNoT2ZDb25maWcpIHtcbiAgICBtZXRhLmhhc2hPZkNvbmZpZyA9IHRoaXMuX2hhc2hPZkNvbmZpZztcbiAgfVxuICByZXR1cm4gY2hhbmdlZDtcbn07XG5cbkZpbGVDYWNoZS5wcm90b3R5cGUucmVjb25jaWxlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2ZpbGVDYWNoZS5yZWNvbmNpbGUoKTtcbn07XG5cbkZpbGVDYWNoZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9maWxlQ2FjaGUuZGVzdHJveSgpO1xufTtcblxuRmlsZUNhY2hlLnByb3RvdHlwZS5yZW1vdmVFbnRyeSA9IGZ1bmN0aW9uKGFic29sdXRlRmlsZXBhdGgpIHtcbiAgdGhpcy5fZmlsZUNhY2hlLnJlbW92ZUVudHJ5KGFic29sdXRlRmlsZXBhdGgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGaWxlQ2FjaGU7XG4iXX0=