
"use strict";

var isNumbery = require("./isNumbery");
var isStandardSyntaxValue = require("./isStandardSyntaxValue");
var isValidFontSize = require("./isValidFontSize");
var isVariable = require("./isVariable");
var keywordSets = require("../reference/keywordSets");
var postcssValueParser = require("postcss-value-parser");

var nodeTypesToCheck = new Set(["word", "string", "space", "div"]);

function joinValueNodes(firstNode, secondNode, charactersBetween) {
  firstNode.value = firstNode.value + charactersBetween + secondNode.value;

  return firstNode;
}

/**
 * Get the font-families within a `font` shorthand property value.
 *
 * @param {string} value
 * @return {object} Collection font-family nodes
 */
module.exports = function findFontFamily(value /*: string*/
) /*: Array<Object>*/{
  var fontFamilies = [];

  var valueNodes = postcssValueParser(value);

  // Handle `inherit`, `initial` and etc
  if (valueNodes.nodes.length === 1 && keywordSets.basicKeywords.has(valueNodes.nodes[0].value.toLowerCase())) {
    return [valueNodes.nodes[0]];
  }

  var needMergeNodesByValue = false;
  var mergeCharacters = null;

  valueNodes.walk(function (valueNode, index, nodes) {
    if (valueNode.type === "function") {
      return false;
    }
    if (!nodeTypesToCheck.has(valueNode.type)) {
      return;
    }

    var valueLowerCase = valueNode.value.toLowerCase();

    // Ignore non standard syntax
    if (!isStandardSyntaxValue(valueLowerCase)) {
      return;
    }

    // Ignore variables
    if (isVariable(valueLowerCase)) {
      return;
    }

    // Ignore keywords for other font parts
    if (keywordSets.fontShorthandKeywords.has(valueLowerCase) && !keywordSets.fontFamilyKeywords.has(valueLowerCase)) {
      return;
    }

    // Ignore font-sizes
    if (isValidFontSize(valueNode.value)) {
      return;
    }

    // Ignore anything come after a <font-size>/, because it's a line-height
    if (nodes[index - 1] && nodes[index - 1].value === "/" && nodes[index - 2] && isValidFontSize(nodes[index - 2].value)) {
      return;
    }

    // Ignore number values
    if (isNumbery(valueLowerCase)) {
      return;
    }

    // Detect when a space or comma is dividing a list of font-families, and save the joining character.
    if ((valueNode.type === "space" || valueNode.type === "div" && valueNode.value !== ",") && fontFamilies.length !== 0) {
      needMergeNodesByValue = true;
      mergeCharacters = valueNode.value;
      return;
    } else if (valueNode.type === "space" || valueNode.type === "div") {
      return;
    }

    var fontFamily = valueNode;

    if (needMergeNodesByValue) {
      joinValueNodes(fontFamilies[fontFamilies.length - 1], valueNode, mergeCharacters);
      needMergeNodesByValue = false;
      mergeCharacters = null;
    } else {
      fontFamilies.push(fontFamily);
    }
  });

  return fontFamilies;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2plc3VzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1zdHlsZWxpbnQvbm9kZV9tb2R1bGVzL3N0eWxlbGludC9saWIvdXRpbHMvZmluZEZvbnRGYW1pbHkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLFlBQVksQ0FBQzs7QUFFYixJQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDekMsSUFBTSxxQkFBcUIsR0FBRyxPQUFPLENBQUMseUJBQXlCLENBQUMsQ0FBQztBQUNqRSxJQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUNyRCxJQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDM0MsSUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLDBCQUEwQixDQUFDLENBQUM7QUFDeEQsSUFBTSxrQkFBa0IsR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQzs7QUFFM0QsSUFBTSxnQkFBZ0IsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7O0FBRXJFLFNBQVMsY0FBYyxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsaUJBQWlCLEVBQUU7QUFDaEUsV0FBUyxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxHQUFHLGlCQUFpQixHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUM7O0FBRXpFLFNBQU8sU0FBUyxDQUFDO0NBQ2xCOzs7Ozs7OztBQVFELE1BQU0sQ0FBQyxPQUFPLEdBQUcsU0FBUyxjQUFjLENBQ3RDLEtBQUs7cUJBQ2U7QUFDcEIsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDOztBQUV4QixNQUFNLFVBQVUsR0FBRyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7O0FBRzdDLE1BQ0UsVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUM3QixXQUFXLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUN0RTtBQUNBLFdBQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDOUI7O0FBRUQsTUFBSSxxQkFBcUIsR0FBRyxLQUFLLENBQUM7QUFDbEMsTUFBSSxlQUFlLEdBQUcsSUFBSSxDQUFDOztBQUUzQixZQUFVLENBQUMsSUFBSSxDQUFDLFVBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUs7QUFDM0MsUUFBSSxTQUFTLENBQUMsSUFBSSxLQUFLLFVBQVUsRUFBRTtBQUNqQyxhQUFPLEtBQUssQ0FBQztLQUNkO0FBQ0QsUUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDekMsYUFBTztLQUNSOztBQUVELFFBQU0sY0FBYyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7OztBQUdyRCxRQUFJLENBQUMscUJBQXFCLENBQUMsY0FBYyxDQUFDLEVBQUU7QUFDMUMsYUFBTztLQUNSOzs7QUFHRCxRQUFJLFVBQVUsQ0FBQyxjQUFjLENBQUMsRUFBRTtBQUM5QixhQUFPO0tBQ1I7OztBQUdELFFBQ0UsV0FBVyxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFDckQsQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxFQUNuRDtBQUNBLGFBQU87S0FDUjs7O0FBR0QsUUFBSSxlQUFlLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3BDLGFBQU87S0FDUjs7O0FBR0QsUUFDRSxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUNoQixLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxHQUFHLElBQzlCLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLElBQ2hCLGVBQWUsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUN2QztBQUNBLGFBQU87S0FDUjs7O0FBR0QsUUFBSSxTQUFTLENBQUMsY0FBYyxDQUFDLEVBQUU7QUFDN0IsYUFBTztLQUNSOzs7QUFHRCxRQUNFLENBQUMsU0FBUyxDQUFDLElBQUksS0FBSyxPQUFPLElBQ3hCLFNBQVMsQ0FBQyxJQUFJLEtBQUssS0FBSyxJQUFJLFNBQVMsQ0FBQyxLQUFLLEtBQUssR0FBRyxDQUFDLElBQ3ZELFlBQVksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUN6QjtBQUNBLDJCQUFxQixHQUFHLElBQUksQ0FBQztBQUM3QixxQkFBZSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7QUFDbEMsYUFBTztLQUNSLE1BQU0sSUFBSSxTQUFTLENBQUMsSUFBSSxLQUFLLE9BQU8sSUFBSSxTQUFTLENBQUMsSUFBSSxLQUFLLEtBQUssRUFBRTtBQUNqRSxhQUFPO0tBQ1I7O0FBRUQsUUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDOztBQUU3QixRQUFJLHFCQUFxQixFQUFFO0FBQ3pCLG9CQUFjLENBQ1osWUFBWSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQ3JDLFNBQVMsRUFDVCxlQUFlLENBQ2hCLENBQUM7QUFDRiwyQkFBcUIsR0FBRyxLQUFLLENBQUM7QUFDOUIscUJBQWUsR0FBRyxJQUFJLENBQUM7S0FDeEIsTUFBTTtBQUNMLGtCQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQy9CO0dBQ0YsQ0FBQyxDQUFDOztBQUVILFNBQU8sWUFBWSxDQUFDO0NBQ3JCLENBQUMiLCJmaWxlIjoiL2hvbWUvamVzdXMvLmF0b20vcGFja2FnZXMvbGludGVyLXN0eWxlbGludC9ub2RlX21vZHVsZXMvc3R5bGVsaW50L2xpYi91dGlscy9maW5kRm9udEZhbWlseS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cInVzZSBzdHJpY3RcIjtcblxuY29uc3QgaXNOdW1iZXJ5ID0gcmVxdWlyZShcIi4vaXNOdW1iZXJ5XCIpO1xuY29uc3QgaXNTdGFuZGFyZFN5bnRheFZhbHVlID0gcmVxdWlyZShcIi4vaXNTdGFuZGFyZFN5bnRheFZhbHVlXCIpO1xuY29uc3QgaXNWYWxpZEZvbnRTaXplID0gcmVxdWlyZShcIi4vaXNWYWxpZEZvbnRTaXplXCIpO1xuY29uc3QgaXNWYXJpYWJsZSA9IHJlcXVpcmUoXCIuL2lzVmFyaWFibGVcIik7XG5jb25zdCBrZXl3b3JkU2V0cyA9IHJlcXVpcmUoXCIuLi9yZWZlcmVuY2Uva2V5d29yZFNldHNcIik7XG5jb25zdCBwb3N0Y3NzVmFsdWVQYXJzZXIgPSByZXF1aXJlKFwicG9zdGNzcy12YWx1ZS1wYXJzZXJcIik7XG5cbmNvbnN0IG5vZGVUeXBlc1RvQ2hlY2sgPSBuZXcgU2V0KFtcIndvcmRcIiwgXCJzdHJpbmdcIiwgXCJzcGFjZVwiLCBcImRpdlwiXSk7XG5cbmZ1bmN0aW9uIGpvaW5WYWx1ZU5vZGVzKGZpcnN0Tm9kZSwgc2Vjb25kTm9kZSwgY2hhcmFjdGVyc0JldHdlZW4pIHtcbiAgZmlyc3ROb2RlLnZhbHVlID0gZmlyc3ROb2RlLnZhbHVlICsgY2hhcmFjdGVyc0JldHdlZW4gKyBzZWNvbmROb2RlLnZhbHVlO1xuXG4gIHJldHVybiBmaXJzdE5vZGU7XG59XG5cbi8qKlxuICogR2V0IHRoZSBmb250LWZhbWlsaWVzIHdpdGhpbiBhIGBmb250YCBzaG9ydGhhbmQgcHJvcGVydHkgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtvYmplY3R9IENvbGxlY3Rpb24gZm9udC1mYW1pbHkgbm9kZXNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaW5kRm9udEZhbWlseShcbiAgdmFsdWUgLyo6IHN0cmluZyovXG4pIC8qOiBBcnJheTxPYmplY3Q+Ki8ge1xuICBjb25zdCBmb250RmFtaWxpZXMgPSBbXTtcblxuICBjb25zdCB2YWx1ZU5vZGVzID0gcG9zdGNzc1ZhbHVlUGFyc2VyKHZhbHVlKTtcblxuICAvLyBIYW5kbGUgYGluaGVyaXRgLCBgaW5pdGlhbGAgYW5kIGV0Y1xuICBpZiAoXG4gICAgdmFsdWVOb2Rlcy5ub2Rlcy5sZW5ndGggPT09IDEgJiZcbiAgICBrZXl3b3JkU2V0cy5iYXNpY0tleXdvcmRzLmhhcyh2YWx1ZU5vZGVzLm5vZGVzWzBdLnZhbHVlLnRvTG93ZXJDYXNlKCkpXG4gICkge1xuICAgIHJldHVybiBbdmFsdWVOb2Rlcy5ub2Rlc1swXV07XG4gIH1cblxuICBsZXQgbmVlZE1lcmdlTm9kZXNCeVZhbHVlID0gZmFsc2U7XG4gIGxldCBtZXJnZUNoYXJhY3RlcnMgPSBudWxsO1xuXG4gIHZhbHVlTm9kZXMud2FsaygodmFsdWVOb2RlLCBpbmRleCwgbm9kZXMpID0+IHtcbiAgICBpZiAodmFsdWVOb2RlLnR5cGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIW5vZGVUeXBlc1RvQ2hlY2suaGFzKHZhbHVlTm9kZS50eXBlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlTG93ZXJDYXNlID0gdmFsdWVOb2RlLnZhbHVlLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBJZ25vcmUgbm9uIHN0YW5kYXJkIHN5bnRheFxuICAgIGlmICghaXNTdGFuZGFyZFN5bnRheFZhbHVlKHZhbHVlTG93ZXJDYXNlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElnbm9yZSB2YXJpYWJsZXNcbiAgICBpZiAoaXNWYXJpYWJsZSh2YWx1ZUxvd2VyQ2FzZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZ25vcmUga2V5d29yZHMgZm9yIG90aGVyIGZvbnQgcGFydHNcbiAgICBpZiAoXG4gICAgICBrZXl3b3JkU2V0cy5mb250U2hvcnRoYW5kS2V5d29yZHMuaGFzKHZhbHVlTG93ZXJDYXNlKSAmJlxuICAgICAgIWtleXdvcmRTZXRzLmZvbnRGYW1pbHlLZXl3b3Jkcy5oYXModmFsdWVMb3dlckNhc2UpXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWdub3JlIGZvbnQtc2l6ZXNcbiAgICBpZiAoaXNWYWxpZEZvbnRTaXplKHZhbHVlTm9kZS52YWx1ZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZ25vcmUgYW55dGhpbmcgY29tZSBhZnRlciBhIDxmb250LXNpemU+LywgYmVjYXVzZSBpdCdzIGEgbGluZS1oZWlnaHRcbiAgICBpZiAoXG4gICAgICBub2Rlc1tpbmRleCAtIDFdICYmXG4gICAgICBub2Rlc1tpbmRleCAtIDFdLnZhbHVlID09PSBcIi9cIiAmJlxuICAgICAgbm9kZXNbaW5kZXggLSAyXSAmJlxuICAgICAgaXNWYWxpZEZvbnRTaXplKG5vZGVzW2luZGV4IC0gMl0udmFsdWUpXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWdub3JlIG51bWJlciB2YWx1ZXNcbiAgICBpZiAoaXNOdW1iZXJ5KHZhbHVlTG93ZXJDYXNlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIERldGVjdCB3aGVuIGEgc3BhY2Ugb3IgY29tbWEgaXMgZGl2aWRpbmcgYSBsaXN0IG9mIGZvbnQtZmFtaWxpZXMsIGFuZCBzYXZlIHRoZSBqb2luaW5nIGNoYXJhY3Rlci5cbiAgICBpZiAoXG4gICAgICAodmFsdWVOb2RlLnR5cGUgPT09IFwic3BhY2VcIiB8fFxuICAgICAgICAodmFsdWVOb2RlLnR5cGUgPT09IFwiZGl2XCIgJiYgdmFsdWVOb2RlLnZhbHVlICE9PSBcIixcIikpICYmXG4gICAgICBmb250RmFtaWxpZXMubGVuZ3RoICE9PSAwXG4gICAgKSB7XG4gICAgICBuZWVkTWVyZ2VOb2Rlc0J5VmFsdWUgPSB0cnVlO1xuICAgICAgbWVyZ2VDaGFyYWN0ZXJzID0gdmFsdWVOb2RlLnZhbHVlO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAodmFsdWVOb2RlLnR5cGUgPT09IFwic3BhY2VcIiB8fCB2YWx1ZU5vZGUudHlwZSA9PT0gXCJkaXZcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGZvbnRGYW1pbHkgPSB2YWx1ZU5vZGU7XG5cbiAgICBpZiAobmVlZE1lcmdlTm9kZXNCeVZhbHVlKSB7XG4gICAgICBqb2luVmFsdWVOb2RlcyhcbiAgICAgICAgZm9udEZhbWlsaWVzW2ZvbnRGYW1pbGllcy5sZW5ndGggLSAxXSxcbiAgICAgICAgdmFsdWVOb2RlLFxuICAgICAgICBtZXJnZUNoYXJhY3RlcnNcbiAgICAgICk7XG4gICAgICBuZWVkTWVyZ2VOb2Rlc0J5VmFsdWUgPSBmYWxzZTtcbiAgICAgIG1lcmdlQ2hhcmFjdGVycyA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvbnRGYW1pbGllcy5wdXNoKGZvbnRGYW1pbHkpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGZvbnRGYW1pbGllcztcbn07XG4iXX0=