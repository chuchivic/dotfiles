'use babel';
var git = require('../../lib/git');
var GitCheckoutBranch = require('../../lib/models/git-checkout-branch');

var _require = require('../fixtures');

var repo = _require.repo;

var cwd = repo.getWorkingDirectory();

describe("GitCheckoutBranch", function () {
  beforeEach(function () {
    spyOn(atom.workspace, 'addModalPanel').andCallThrough();
    spyOn(git, 'cmd').andReturn(Promise.resolve('branch1\nbranch2'));
  });

  describe("when the remote option is false", function () {
    it("gets a list of the repo's branches", function () {
      waitsForPromise(function () {
        return GitCheckoutBranch(repo);
      });
      runs(function () {
        expect(git.cmd).toHaveBeenCalledWith(['branch', '--no-color'], { cwd: cwd });
        expect(atom.workspace.addModalPanel).toHaveBeenCalled();
      });
    });
  });

  describe("when the remote option is true", function () {
    it("gets a list of the repo's remote branches", function () {
      waitsForPromise(function () {
        return GitCheckoutBranch(repo, { remote: true });
      });
      runs(function () {
        expect(git.cmd).toHaveBeenCalledWith(['branch', '-r', '--no-color'], { cwd: cwd });
        expect(atom.workspace.addModalPanel).toHaveBeenCalled();
      });
    });
  });

  it("checkouts the selected branch", function () {
    waitsForPromise(function () {
      return GitCheckoutBranch(repo, { remote: true }).then(function (view) {
        return view.confirmSelection();
      });
    });
    runs(function () {
      expect(git.cmd).toHaveBeenCalledWith(['checkout', 'branch1', '--track'], { cwd: cwd });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2plc3VzLy5hdG9tL3BhY2thZ2VzL2dpdC1wbHVzL3NwZWMvbW9kZWxzL2dpdC1jaGVja291dC1icmFuY2gtc3BlYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUE7QUFDWCxJQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUE7QUFDcEMsSUFBTSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsc0NBQXNDLENBQUMsQ0FBQTs7ZUFFMUQsT0FBTyxDQUFDLGFBQWEsQ0FBQzs7SUFBOUIsSUFBSSxZQUFKLElBQUk7O0FBQ1gsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUE7O0FBRXRDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxZQUFNO0FBQ2xDLFlBQVUsQ0FBQyxZQUFNO0FBQ2YsU0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsZUFBZSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUE7QUFDdkQsU0FBSyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUE7R0FDakUsQ0FBQyxDQUFBOztBQUVGLFVBQVEsQ0FBQyxpQ0FBaUMsRUFBRSxZQUFNO0FBQ2hELE1BQUUsQ0FBQyxvQ0FBb0MsRUFBRSxZQUFNO0FBQzdDLHFCQUFlLENBQUM7ZUFBTSxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7T0FBQSxDQUFDLENBQUE7QUFDOUMsVUFBSSxDQUFDLFlBQU07QUFDVCxjQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxFQUFFLEVBQUMsR0FBRyxFQUFILEdBQUcsRUFBQyxDQUFDLENBQUE7QUFDckUsY0FBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQTtPQUN4RCxDQUFDLENBQUE7S0FDSCxDQUFDLENBQUE7R0FDSCxDQUFDLENBQUE7O0FBRUYsVUFBUSxDQUFDLGdDQUFnQyxFQUFFLFlBQU07QUFDL0MsTUFBRSxDQUFDLDJDQUEyQyxFQUFFLFlBQU07QUFDcEQscUJBQWUsQ0FBQztlQUFNLGlCQUFpQixDQUFDLElBQUksRUFBRSxFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUMsQ0FBQztPQUFBLENBQUMsQ0FBQTtBQUM5RCxVQUFJLENBQUMsWUFBTTtBQUNULGNBQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLFlBQVksQ0FBQyxFQUFFLEVBQUMsR0FBRyxFQUFILEdBQUcsRUFBQyxDQUFDLENBQUE7QUFDM0UsY0FBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQTtPQUN4RCxDQUFDLENBQUE7S0FDSCxDQUFDLENBQUE7R0FDSCxDQUFDLENBQUE7O0FBRUYsSUFBRSxDQUFDLCtCQUErQixFQUFFLFlBQU07QUFDeEMsbUJBQWUsQ0FBQzthQUFNLGlCQUFpQixDQUFDLElBQUksRUFBRSxFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLElBQUk7ZUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7T0FBQSxDQUFDO0tBQUEsQ0FBQyxDQUFBO0FBQ3BHLFFBQUksQ0FBQyxZQUFNO0FBQ1QsWUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUgsR0FBRyxFQUFDLENBQUMsQ0FBQTtLQUNoRixDQUFDLENBQUE7R0FDSCxDQUFDLENBQUE7Q0FDSCxDQUFDLENBQUEiLCJmaWxlIjoiL2hvbWUvamVzdXMvLmF0b20vcGFja2FnZXMvZ2l0LXBsdXMvc3BlYy9tb2RlbHMvZ2l0LWNoZWNrb3V0LWJyYW5jaC1zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCdcbmNvbnN0IGdpdCA9IHJlcXVpcmUoJy4uLy4uL2xpYi9naXQnKVxuY29uc3QgR2l0Q2hlY2tvdXRCcmFuY2ggPSByZXF1aXJlKCcuLi8uLi9saWIvbW9kZWxzL2dpdC1jaGVja291dC1icmFuY2gnKVxuXG5jb25zdCB7cmVwb30gPSByZXF1aXJlKCcuLi9maXh0dXJlcycpXG5jb25zdCBjd2QgPSByZXBvLmdldFdvcmtpbmdEaXJlY3RvcnkoKVxuXG5kZXNjcmliZShcIkdpdENoZWNrb3V0QnJhbmNoXCIsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgc3B5T24oYXRvbS53b3Jrc3BhY2UsICdhZGRNb2RhbFBhbmVsJykuYW5kQ2FsbFRocm91Z2goKVxuICAgIHNweU9uKGdpdCwgJ2NtZCcpLmFuZFJldHVybihQcm9taXNlLnJlc29sdmUoJ2JyYW5jaDFcXG5icmFuY2gyJykpXG4gIH0pXG5cbiAgZGVzY3JpYmUoXCJ3aGVuIHRoZSByZW1vdGUgb3B0aW9uIGlzIGZhbHNlXCIsICgpID0+IHtcbiAgICBpdChcImdldHMgYSBsaXN0IG9mIHRoZSByZXBvJ3MgYnJhbmNoZXNcIiwgKCkgPT4ge1xuICAgICAgd2FpdHNGb3JQcm9taXNlKCgpID0+IEdpdENoZWNrb3V0QnJhbmNoKHJlcG8pKVxuICAgICAgcnVucygoKSA9PiB7XG4gICAgICAgIGV4cGVjdChnaXQuY21kKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChbJ2JyYW5jaCcsICctLW5vLWNvbG9yJ10sIHtjd2R9KVxuICAgICAgICBleHBlY3QoYXRvbS53b3Jrc3BhY2UuYWRkTW9kYWxQYW5lbCkudG9IYXZlQmVlbkNhbGxlZCgpXG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoXCJ3aGVuIHRoZSByZW1vdGUgb3B0aW9uIGlzIHRydWVcIiwgKCkgPT4ge1xuICAgIGl0KFwiZ2V0cyBhIGxpc3Qgb2YgdGhlIHJlcG8ncyByZW1vdGUgYnJhbmNoZXNcIiwgKCkgPT4ge1xuICAgICAgd2FpdHNGb3JQcm9taXNlKCgpID0+IEdpdENoZWNrb3V0QnJhbmNoKHJlcG8sIHtyZW1vdGU6IHRydWV9KSlcbiAgICAgIHJ1bnMoKCkgPT4ge1xuICAgICAgICBleHBlY3QoZ2l0LmNtZCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoWydicmFuY2gnLCAnLXInLCAnLS1uby1jb2xvciddLCB7Y3dkfSlcbiAgICAgICAgZXhwZWN0KGF0b20ud29ya3NwYWNlLmFkZE1vZGFsUGFuZWwpLnRvSGF2ZUJlZW5DYWxsZWQoKVxuICAgICAgfSlcbiAgICB9KVxuICB9KVxuXG4gIGl0KFwiY2hlY2tvdXRzIHRoZSBzZWxlY3RlZCBicmFuY2hcIiwgKCkgPT4ge1xuICAgIHdhaXRzRm9yUHJvbWlzZSgoKSA9PiBHaXRDaGVja291dEJyYW5jaChyZXBvLCB7cmVtb3RlOiB0cnVlfSkudGhlbih2aWV3ID0+IHZpZXcuY29uZmlybVNlbGVjdGlvbigpKSlcbiAgICBydW5zKCgpID0+IHtcbiAgICAgIGV4cGVjdChnaXQuY21kKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChbJ2NoZWNrb3V0JywgJ2JyYW5jaDEnLCAnLS10cmFjayddLCB7Y3dkfSlcbiAgICB9KVxuICB9KVxufSlcbiJdfQ==