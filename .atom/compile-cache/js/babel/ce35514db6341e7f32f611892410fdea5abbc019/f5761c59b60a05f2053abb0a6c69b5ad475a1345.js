
"use strict";

var fileEntryCache = require("file-entry-cache");
var path = require("path");
var debug = require("debug")("stylelint:file-cache");
var getCacheFile = require("./getCacheFile");

var DEFAULT_CACHE_LOCATION = "./.stylelintcache";
var DEFAULT_HASH = "";

function FileCache(cacheLocation, /*: ?string */hashOfConfig /*: ?string */) {
  var cacheFile = path.resolve(getCacheFile(cacheLocation || DEFAULT_CACHE_LOCATION, process.cwd()));
  debug("Cache file is created at " + cacheFile);
  this._fileCache = fileEntryCache.create(cacheFile);
  this._hashOfConfig = hashOfConfig || DEFAULT_HASH;
}

FileCache.prototype.hasFileChanged = function (absoluteFilepath) {
  // Get file descriptor compares current metadata against cached
  // one and stores the result to "changed" prop.w
  var descriptor = this._fileCache.getFileDescriptor(absoluteFilepath);
  var meta = descriptor.meta || {};
  var changed = descriptor.changed || meta.hashOfConfig !== this._hashOfConfig;
  if (!changed) {
    debug("Skip linting " + absoluteFilepath + ". File hasn't changed.");
  }
  // Mutate file descriptor object and store config hash to each file.
  // Running lint with different config should invalidate the cache.
  if (meta.hashOfConfig !== this._hashOfConfig) {
    meta.hashOfConfig = this._hashOfConfig;
  }
  return changed;
};

FileCache.prototype.reconcile = function () {
  this._fileCache.reconcile();
};

FileCache.prototype.destroy = function () {
  this._fileCache.destroy();
};

FileCache.prototype.removeEntry = function (absoluteFilepath) {
  this._fileCache.removeEntry(absoluteFilepath);
};

module.exports = FileCache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2plc3VzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1zdHlsZWxpbnQvbm9kZV9tb2R1bGVzL3N0eWxlbGludC9saWIvdXRpbHMvRmlsZUNhY2hlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxZQUFZLENBQUE7O0FBRVosSUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUE7QUFDbEQsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQzVCLElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFBO0FBQ3RELElBQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBOztBQUU5QyxJQUFNLHNCQUFzQixHQUFHLG1CQUFtQixDQUFBO0FBQ2xELElBQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQTs7QUFFdkIsU0FBUyxTQUFTLENBQUMsYUFBYSxnQkFBZ0IsWUFBWSxpQkFBZ0I7QUFDMUUsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsYUFBYSxJQUFJLHNCQUFzQixFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDcEcsT0FBSywrQkFBNkIsU0FBUyxDQUFHLENBQUE7QUFDOUMsTUFBSSxDQUFDLFVBQVUsR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBQ2xELE1BQUksQ0FBQyxhQUFhLEdBQUcsWUFBWSxJQUFJLFlBQVksQ0FBQTtDQUNsRDs7QUFFRCxTQUFTLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBRyxVQUFVLGdCQUFnQixFQUFFOzs7QUFHL0QsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0FBQ3RFLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFBO0FBQ2xDLE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLFlBQVksS0FBSyxJQUFJLENBQUMsYUFBYSxDQUFBO0FBQzlFLE1BQUksQ0FBQyxPQUFPLEVBQUU7QUFDWixTQUFLLG1CQUFpQixnQkFBZ0IsNEJBQXlCLENBQUE7R0FDaEU7OztBQUdELE1BQUksSUFBSSxDQUFDLFlBQVksS0FBSyxJQUFJLENBQUMsYUFBYSxFQUFFO0FBQzVDLFFBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQTtHQUN2QztBQUNELFNBQU8sT0FBTyxDQUFBO0NBQ2YsQ0FBQTs7QUFFRCxTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxZQUFZO0FBQzFDLE1BQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLENBQUE7Q0FDNUIsQ0FBQTs7QUFFRCxTQUFTLENBQUMsU0FBUyxDQUFDLE9BQU8sR0FBRyxZQUFZO0FBQ3hDLE1BQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUE7Q0FDMUIsQ0FBQTs7QUFFRCxTQUFTLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxVQUFVLGdCQUFnQixFQUFFO0FBQzVELE1BQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLENBQUE7Q0FDOUMsQ0FBQTs7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQSIsImZpbGUiOiIvaG9tZS9qZXN1cy8uYXRvbS9wYWNrYWdlcy9saW50ZXItc3R5bGVsaW50L25vZGVfbW9kdWxlcy9zdHlsZWxpbnQvbGliL3V0aWxzL0ZpbGVDYWNoZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cInVzZSBzdHJpY3RcIlxuXG5jb25zdCBmaWxlRW50cnlDYWNoZSA9IHJlcXVpcmUoXCJmaWxlLWVudHJ5LWNhY2hlXCIpXG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIilcbmNvbnN0IGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpKFwic3R5bGVsaW50OmZpbGUtY2FjaGVcIilcbmNvbnN0IGdldENhY2hlRmlsZSA9IHJlcXVpcmUoXCIuL2dldENhY2hlRmlsZVwiKVxuXG5jb25zdCBERUZBVUxUX0NBQ0hFX0xPQ0FUSU9OID0gXCIuLy5zdHlsZWxpbnRjYWNoZVwiXG5jb25zdCBERUZBVUxUX0hBU0ggPSBcIlwiXG5cbmZ1bmN0aW9uIEZpbGVDYWNoZShjYWNoZUxvY2F0aW9uLyo6ID9zdHJpbmcgKi8sIGhhc2hPZkNvbmZpZy8qOiA/c3RyaW5nICovKSB7XG4gIGNvbnN0IGNhY2hlRmlsZSA9IHBhdGgucmVzb2x2ZShnZXRDYWNoZUZpbGUoY2FjaGVMb2NhdGlvbiB8fCBERUZBVUxUX0NBQ0hFX0xPQ0FUSU9OLCBwcm9jZXNzLmN3ZCgpKSlcbiAgZGVidWcoYENhY2hlIGZpbGUgaXMgY3JlYXRlZCBhdCAke2NhY2hlRmlsZX1gKVxuICB0aGlzLl9maWxlQ2FjaGUgPSBmaWxlRW50cnlDYWNoZS5jcmVhdGUoY2FjaGVGaWxlKVxuICB0aGlzLl9oYXNoT2ZDb25maWcgPSBoYXNoT2ZDb25maWcgfHwgREVGQVVMVF9IQVNIXG59XG5cbkZpbGVDYWNoZS5wcm90b3R5cGUuaGFzRmlsZUNoYW5nZWQgPSBmdW5jdGlvbiAoYWJzb2x1dGVGaWxlcGF0aCkge1xuICAvLyBHZXQgZmlsZSBkZXNjcmlwdG9yIGNvbXBhcmVzIGN1cnJlbnQgbWV0YWRhdGEgYWdhaW5zdCBjYWNoZWRcbiAgLy8gb25lIGFuZCBzdG9yZXMgdGhlIHJlc3VsdCB0byBcImNoYW5nZWRcIiBwcm9wLndcbiAgY29uc3QgZGVzY3JpcHRvciA9IHRoaXMuX2ZpbGVDYWNoZS5nZXRGaWxlRGVzY3JpcHRvcihhYnNvbHV0ZUZpbGVwYXRoKVxuICBjb25zdCBtZXRhID0gZGVzY3JpcHRvci5tZXRhIHx8IHt9XG4gIGNvbnN0IGNoYW5nZWQgPSBkZXNjcmlwdG9yLmNoYW5nZWQgfHwgbWV0YS5oYXNoT2ZDb25maWcgIT09IHRoaXMuX2hhc2hPZkNvbmZpZ1xuICBpZiAoIWNoYW5nZWQpIHtcbiAgICBkZWJ1ZyhgU2tpcCBsaW50aW5nICR7YWJzb2x1dGVGaWxlcGF0aH0uIEZpbGUgaGFzbid0IGNoYW5nZWQuYClcbiAgfVxuICAvLyBNdXRhdGUgZmlsZSBkZXNjcmlwdG9yIG9iamVjdCBhbmQgc3RvcmUgY29uZmlnIGhhc2ggdG8gZWFjaCBmaWxlLlxuICAvLyBSdW5uaW5nIGxpbnQgd2l0aCBkaWZmZXJlbnQgY29uZmlnIHNob3VsZCBpbnZhbGlkYXRlIHRoZSBjYWNoZS5cbiAgaWYgKG1ldGEuaGFzaE9mQ29uZmlnICE9PSB0aGlzLl9oYXNoT2ZDb25maWcpIHtcbiAgICBtZXRhLmhhc2hPZkNvbmZpZyA9IHRoaXMuX2hhc2hPZkNvbmZpZ1xuICB9XG4gIHJldHVybiBjaGFuZ2VkXG59XG5cbkZpbGVDYWNoZS5wcm90b3R5cGUucmVjb25jaWxlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9maWxlQ2FjaGUucmVjb25jaWxlKClcbn1cblxuRmlsZUNhY2hlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9maWxlQ2FjaGUuZGVzdHJveSgpXG59XG5cbkZpbGVDYWNoZS5wcm90b3R5cGUucmVtb3ZlRW50cnkgPSBmdW5jdGlvbiAoYWJzb2x1dGVGaWxlcGF0aCkge1xuICB0aGlzLl9maWxlQ2FjaGUucmVtb3ZlRW50cnkoYWJzb2x1dGVGaWxlcGF0aClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBGaWxlQ2FjaGVcbiJdfQ==