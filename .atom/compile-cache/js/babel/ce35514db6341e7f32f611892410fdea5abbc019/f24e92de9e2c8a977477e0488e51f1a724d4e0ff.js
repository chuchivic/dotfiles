Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeString = normalizeString;
exports.getRow = getRow;
exports.getTextInRange = getTextInRange;
exports.getRows = getRows;
exports.getSelectedText = getSelectedText;
exports.isComment = isComment;
exports.isBlank = isBlank;
exports.escapeBlankRows = escapeBlankRows;
exports.getFoldRange = getFoldRange;
exports.getFoldContents = getFoldContents;
exports.getCodeToInspect = getCodeToInspect;
exports.getRegexString = getRegexString;
exports.getBreakpoints = getBreakpoints;
exports.getCurrentCell = getCurrentCell;
exports.getCells = getCells;
exports.getCellsForBreakPoints = getCellsForBreakPoints;
exports.moveDown = moveDown;
exports.findPrecedingBlock = findPrecedingBlock;
exports.findCodeBlock = findCodeBlock;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _atom = require("atom");

var _escapeStringRegexp = require("escape-string-regexp");

var _escapeStringRegexp2 = _interopRequireDefault(_escapeStringRegexp);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _store = require("./store");

var _store2 = _interopRequireDefault(_store);

var _utils = require("./utils");

function normalizeString(code) {
  if (code) {
    return code.replace(/\r\n|\r/g, "\n").trim();
  }
  return null;
}

function getRow(editor, row) {
  return normalizeString(editor.lineTextForBufferRow(row));
}

function getTextInRange(editor, start, end) {
  var code = editor.getTextInBufferRange([start, end]);
  return normalizeString(code);
}

function getRows(editor, startRow, endRow) {
  var code = editor.getTextInBufferRange({
    start: {
      row: startRow,
      column: 0
    },
    end: {
      row: endRow,
      column: 9999999
    }
  });
  return normalizeString(code);
}

function getSelectedText(editor) {
  return normalizeString(editor.getSelectedText());
}

function isComment(editor, position) {
  var scope = editor.scopeDescriptorForBufferPosition(position);
  var scopeString = scope.getScopeChain();
  return _lodash2["default"].includes(scopeString, "comment.line");
}

function isBlank(editor, row) {
  return editor.getBuffer().isRowBlank(row) || editor.isBufferRowCommented(row);
}

function escapeBlankRows(editor, startRow, endRow) {
  while (endRow > startRow) {
    if (!isBlank(editor, endRow)) break;
    endRow -= 1;
  }
  return endRow;
}

function getFoldRange(editor, row) {
  var range = editor.languageMode.rowRangeForCodeFoldAtBufferRow(row);
  if (!range) return;
  if (range[1] < editor.getLastBufferRow() && getRow(editor, range[1] + 1) === "end") {
    range[1] += 1;
  }
  (0, _utils.log)("getFoldRange:", range);
  return range;
}

function getFoldContents(editor, row) {
  var range = getFoldRange(editor, row);
  if (!range) return;
  return [getRows(editor, range[0], range[1]), range[1]];
}

function getCodeToInspect(editor) {
  var selectedText = getSelectedText(editor);
  var code = undefined;
  var cursorPosition = undefined;
  if (selectedText) {
    code = selectedText;
    cursorPosition = code.length;
  } else {
    var cursor = editor.getLastCursor();
    var row = cursor.getBufferRow();
    code = getRow(editor, row);
    cursorPosition = cursor.getBufferColumn();

    // TODO: use kernel.complete to find a selection
    var identifierEnd = code ? code.slice(cursorPosition).search(/\W/) : -1;
    if (identifierEnd !== -1) {
      cursorPosition += identifierEnd;
    }
  }

  return [code, cursorPosition];
}

function getRegexString(editor) {
  var scope = editor.getRootScopeDescriptor();

  var _editor$getCommentStrings = editor.getCommentStrings(scope);

  var commentStartString = _editor$getCommentStrings.commentStartString;

  if (!commentStartString) {
    (0, _utils.log)("CellManager: No comment string defined in root scope");
    return null;
  }

  var escapedCommentStartString = (0, _escapeStringRegexp2["default"])(commentStartString.trimRight());

  var regexString = escapedCommentStartString + "(%%| %%| <codecell>| In[[0-9 ]*]:?)";

  return regexString;
}

function getBreakpoints(editor) {
  var buffer = editor.getBuffer();
  var breakpoints = [];

  var regexString = getRegexString(editor);
  if (regexString) {
    var regex = new RegExp(regexString, "g");
    buffer.scan(regex, function (_ref) {
      var range = _ref.range;

      breakpoints.push(range.start);
    });
  }

  breakpoints.push(buffer.getEndPosition());

  (0, _utils.log)("CellManager: Breakpoints:", breakpoints);

  return breakpoints;
}

function getCurrentCodeCell(editor) {
  var buffer = editor.getBuffer();
  var start = new _atom.Point(0, 0);
  var end = buffer.getEndPosition();
  var regexString = getRegexString(editor);

  if (!regexString) {
    return new _atom.Range(start, end);
  }

  var regex = new RegExp(regexString);
  var cursor = editor.getCursorBufferPosition();

  while (cursor.row < end.row && isComment(editor, cursor)) {
    cursor.row += 1;
    cursor.column = 0;
  }

  if (cursor.row > 0) {
    buffer.backwardsScanInRange(regex, new _atom.Range(start, cursor), function (_ref2) {
      var range = _ref2.range;

      start = new _atom.Point(range.start.row + 1, 0);
    });
  }

  buffer.scanInRange(regex, new _atom.Range(cursor, end), function (_ref3) {
    var range = _ref3.range;

    end = range.start;
  });

  (0, _utils.log)("CellManager: Cell [start, end]:", [start, end], "cursor:", cursor);

  return new _atom.Range(start, end);
}

function isEmbeddedCode(editor, referenceScope, row) {
  var scopes = editor.scopeDescriptorForBufferPosition(new _atom.Point(row, 0)).getScopesArray();
  return _lodash2["default"].includes(scopes, referenceScope);
}

function getCurrentFencedCodeBlock(editor) {
  var buffer = editor.getBuffer();

  var _buffer$getEndPosition = buffer.getEndPosition();

  var bufferEndRow = _buffer$getEndPosition.row;

  var cursor = editor.getCursorBufferPosition();
  var start = cursor.row;
  var end = cursor.row;
  var scope = (0, _utils.getEmbeddedScope)(editor, cursor);
  if (!scope) return getCurrentCodeCell(editor);
  while (start > 0 && isEmbeddedCode(editor, scope, start - 1)) {
    start -= 1;
  }

  while (end < bufferEndRow && isEmbeddedCode(editor, scope, end + 1)) {
    end += 1;
  }

  return new _atom.Range([start, 0], [end, 9999999]);
}

function getCurrentCell(editor) {
  if ((0, _utils.isMultilanguageGrammar)(editor.getGrammar())) {
    return getCurrentFencedCodeBlock(editor);
  }
  return getCurrentCodeCell(editor);
}

function getCells(editor) {
  var breakpoints = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

  if (breakpoints.length !== 0) {
    breakpoints.sort(function (a, b) {
      return a.compare(b);
    });
  } else {
    breakpoints = getBreakpoints(editor);
  }
  return getCellsForBreakPoints(breakpoints);
}

function getCellsForBreakPoints(breakpoints) {
  var start = new _atom.Point(0, 0);
  return _lodash2["default"].map(breakpoints, function (end) {
    var cell = new _atom.Range(start, end);
    start = new _atom.Point(end.row + 1, 0);
    return cell;
  });
}

function moveDown(editor, row) {
  var lastRow = editor.getLastBufferRow();

  if (row >= lastRow) {
    editor.moveToBottom();
    editor.insertNewline();
    return;
  }

  while (row < lastRow) {
    row += 1;
    if (!isBlank(editor, row)) break;
  }

  editor.setCursorBufferPosition({
    row: row,
    column: 0
  });
}

function findPrecedingBlock(editor, row, indentLevel) {
  var previousRow = row - 1;
  while (previousRow >= 0) {
    var previousIndentLevel = editor.indentationForBufferRow(previousRow);
    var sameIndent = previousIndentLevel <= indentLevel;
    var blank = isBlank(editor, previousRow);
    var isEnd = getRow(editor, previousRow) === "end";

    if (isBlank(editor, row)) {
      row = previousRow;
    }
    if (sameIndent && !blank && !isEnd) {
      return [getRows(editor, previousRow, row), row];
    }
    previousRow -= 1;
  }
  return null;
}

function findCodeBlock(editor) {
  var selectedText = getSelectedText(editor);

  if (selectedText) {
    var selectedRange = editor.getSelectedBufferRange();
    var endRow = selectedRange.end.row;
    if (selectedRange.end.column === 0) {
      endRow -= 1;
    }
    endRow = escapeBlankRows(editor, selectedRange.start.row, endRow);
    return [selectedText, endRow];
  }

  var cursor = editor.getLastCursor();

  var row = cursor.getBufferRow();
  (0, _utils.log)("findCodeBlock:", row);

  var indentLevel = cursor.getIndentLevel();
  var foldable = editor.isFoldableAtBufferRow(row);
  var foldRange = editor.languageMode.rowRangeForCodeFoldAtBufferRow(row);
  if (!foldRange || foldRange[0] == null || foldRange[1] == null) {
    foldable = false;
  }

  if (foldable) {
    return getFoldContents(editor, row);
  }
  if (isBlank(editor, row) || getRow(editor, row) === "end") {
    return findPrecedingBlock(editor, row, indentLevel);
  }
  return [getRow(editor, row), row];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,