
"use strict";
var augmentConfigFull = require("./augmentConfig").augmentConfigFull;
var configurationError = require("./utils/configurationError");
var path = require("path");

module.exports = function (stylelint, /*: stylelint$internalApi*/
searchPath /*:: ?: string*/
) /*: Promise<?{ config: stylelint$config, filepath: string }>*/{
  searchPath = searchPath || process.cwd();

  var optionsConfig = stylelint._options.config;

  if (optionsConfig !== undefined) {
    var cached = stylelint._specifiedConfigCache.get(optionsConfig);
    if (cached) return cached;

    // stylelint._fullExplorer (cosmiconfig) is already configured to
    // run augmentConfigFull; but since we're making up the result here,
    // we need to manually run the transform
    var augmentedResult = augmentConfigFull(stylelint, {
      config: optionsConfig,
      // Add the extra path part so that we can get the directory without being
      // confused
      filepath: path.join(process.cwd(), "argument-config")
    });
    stylelint._specifiedConfigCache.set(optionsConfig, augmentedResult);
    return augmentedResult;
  }

  return stylelint._fullExplorer.load(searchPath, stylelint._options.configFile).then(function (config) {
    // If no config was found, try looking from process.cwd
    if (!config) return stylelint._fullExplorer.load(process.cwd());
    return config;
  }).then(function (config) {
    if (!config) {
      var ending = searchPath ? " for " + searchPath : "";
      throw configurationError("No configuration provided" + ending);
    }
    return config;
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2plc3VzLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1zdHlsZWxpbnQvbm9kZV9tb2R1bGVzL3N0eWxlbGludC9saWIvZ2V0Q29uZmlnRm9yRmlsZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsWUFBWSxDQUFDO0FBQ2IsSUFBTSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQztBQUN2RSxJQUFNLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0FBQ2pFLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQzs7QUFFN0IsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUNmLFNBQVM7QUFDVCxVQUFVO2dFQUNxRDtBQUMvRCxZQUFVLEdBQUcsVUFBVSxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQzs7QUFFekMsTUFBTSxhQUFhLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7O0FBRWhELE1BQUksYUFBYSxLQUFLLFNBQVMsRUFBRTtBQUMvQixRQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ2xFLFFBQUksTUFBTSxFQUFFLE9BQU8sTUFBTSxDQUFDOzs7OztBQUsxQixRQUFNLGVBQWUsR0FBRyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUU7QUFDbkQsWUFBTSxFQUFFLGFBQWE7OztBQUdyQixjQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsaUJBQWlCLENBQUM7S0FDdEQsQ0FBQyxDQUFDO0FBQ0gsYUFBUyxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFDcEUsV0FBTyxlQUFlLENBQUM7R0FDeEI7O0FBRUQsU0FBTyxTQUFTLENBQUMsYUFBYSxDQUMzQixJQUFJLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQy9DLElBQUksQ0FBQyxVQUFBLE1BQU0sRUFBSTs7QUFFZCxRQUFJLENBQUMsTUFBTSxFQUFFLE9BQU8sU0FBUyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDaEUsV0FBTyxNQUFNLENBQUM7R0FDZixDQUFDLENBQ0QsSUFBSSxDQUFDLFVBQUEsTUFBTSxFQUFJO0FBQ2QsUUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNYLFVBQU0sTUFBTSxHQUFHLFVBQVUsYUFBVyxVQUFVLEdBQUssRUFBRSxDQUFDO0FBQ3RELFlBQU0sa0JBQWtCLCtCQUE2QixNQUFNLENBQUcsQ0FBQztLQUNoRTtBQUNELFdBQU8sTUFBTSxDQUFDO0dBQ2YsQ0FBQyxDQUFDO0NBQ04sQ0FBQyIsImZpbGUiOiIvaG9tZS9qZXN1cy8uYXRvbS9wYWNrYWdlcy9saW50ZXItc3R5bGVsaW50L25vZGVfbW9kdWxlcy9zdHlsZWxpbnQvbGliL2dldENvbmZpZ0ZvckZpbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBhdWdtZW50Q29uZmlnRnVsbCA9IHJlcXVpcmUoXCIuL2F1Z21lbnRDb25maWdcIikuYXVnbWVudENvbmZpZ0Z1bGw7XG5jb25zdCBjb25maWd1cmF0aW9uRXJyb3IgPSByZXF1aXJlKFwiLi91dGlscy9jb25maWd1cmF0aW9uRXJyb3JcIik7XG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oXG4gIHN0eWxlbGludCAvKjogc3R5bGVsaW50JGludGVybmFsQXBpKi8sXG4gIHNlYXJjaFBhdGggLyo6OiA/OiBzdHJpbmcqL1xuKSAvKjogUHJvbWlzZTw/eyBjb25maWc6IHN0eWxlbGludCRjb25maWcsIGZpbGVwYXRoOiBzdHJpbmcgfT4qLyB7XG4gIHNlYXJjaFBhdGggPSBzZWFyY2hQYXRoIHx8IHByb2Nlc3MuY3dkKCk7XG5cbiAgY29uc3Qgb3B0aW9uc0NvbmZpZyA9IHN0eWxlbGludC5fb3B0aW9ucy5jb25maWc7XG5cbiAgaWYgKG9wdGlvbnNDb25maWcgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IGNhY2hlZCA9IHN0eWxlbGludC5fc3BlY2lmaWVkQ29uZmlnQ2FjaGUuZ2V0KG9wdGlvbnNDb25maWcpO1xuICAgIGlmIChjYWNoZWQpIHJldHVybiBjYWNoZWQ7XG5cbiAgICAvLyBzdHlsZWxpbnQuX2Z1bGxFeHBsb3JlciAoY29zbWljb25maWcpIGlzIGFscmVhZHkgY29uZmlndXJlZCB0b1xuICAgIC8vIHJ1biBhdWdtZW50Q29uZmlnRnVsbDsgYnV0IHNpbmNlIHdlJ3JlIG1ha2luZyB1cCB0aGUgcmVzdWx0IGhlcmUsXG4gICAgLy8gd2UgbmVlZCB0byBtYW51YWxseSBydW4gdGhlIHRyYW5zZm9ybVxuICAgIGNvbnN0IGF1Z21lbnRlZFJlc3VsdCA9IGF1Z21lbnRDb25maWdGdWxsKHN0eWxlbGludCwge1xuICAgICAgY29uZmlnOiBvcHRpb25zQ29uZmlnLFxuICAgICAgLy8gQWRkIHRoZSBleHRyYSBwYXRoIHBhcnQgc28gdGhhdCB3ZSBjYW4gZ2V0IHRoZSBkaXJlY3Rvcnkgd2l0aG91dCBiZWluZ1xuICAgICAgLy8gY29uZnVzZWRcbiAgICAgIGZpbGVwYXRoOiBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgXCJhcmd1bWVudC1jb25maWdcIilcbiAgICB9KTtcbiAgICBzdHlsZWxpbnQuX3NwZWNpZmllZENvbmZpZ0NhY2hlLnNldChvcHRpb25zQ29uZmlnLCBhdWdtZW50ZWRSZXN1bHQpO1xuICAgIHJldHVybiBhdWdtZW50ZWRSZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gc3R5bGVsaW50Ll9mdWxsRXhwbG9yZXJcbiAgICAubG9hZChzZWFyY2hQYXRoLCBzdHlsZWxpbnQuX29wdGlvbnMuY29uZmlnRmlsZSlcbiAgICAudGhlbihjb25maWcgPT4ge1xuICAgICAgLy8gSWYgbm8gY29uZmlnIHdhcyBmb3VuZCwgdHJ5IGxvb2tpbmcgZnJvbSBwcm9jZXNzLmN3ZFxuICAgICAgaWYgKCFjb25maWcpIHJldHVybiBzdHlsZWxpbnQuX2Z1bGxFeHBsb3Jlci5sb2FkKHByb2Nlc3MuY3dkKCkpO1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9KVxuICAgIC50aGVuKGNvbmZpZyA9PiB7XG4gICAgICBpZiAoIWNvbmZpZykge1xuICAgICAgICBjb25zdCBlbmRpbmcgPSBzZWFyY2hQYXRoID8gYCBmb3IgJHtzZWFyY2hQYXRofWAgOiBcIlwiO1xuICAgICAgICB0aHJvdyBjb25maWd1cmF0aW9uRXJyb3IoYE5vIGNvbmZpZ3VyYXRpb24gcHJvdmlkZWQke2VuZGluZ31gKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfSk7XG59O1xuIl19